
NITI_TestTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d4c  08006d4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006d4c  08006d4c  00016d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d54  08006d54  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d54  08006d54  00016d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aa4  20000010  08006d6c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ab4  08006d6c  00024ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d37  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310a  00000000  00000000  00037d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0003ae88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178ac  00000000  00000000  0003d640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dd5  00000000  00000000  00054eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096dae  00000000  00000000  0006acc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101a6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005668  00000000  00000000  00101ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c00 	.word	0x08006c00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006c00 	.word	0x08006c00

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
return 0;
 800050a:	2300      	movs	r3, #0
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
	...

08000518 <main>:
 * @brief  The application entry point.
 * @retval int
 */
int
main (void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  send_data = 1;
 800051c:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <main+0xa0>)
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
//  rx_queue_handle = xQueueCreateStatic(RX_QUEUE_SIZE, RX_ITEM_SIZE,
//				       &rx_queue_storage[0], &rx_queue_buff);
//  tx_queue_handle = xQueueCreateStatic(TX_QUEUE_SIZE, TX_ITEM_SIZE,
//				       &tx_queue_storage[0], &tx_queue_buff);

  rx_queue_handle = xQueueCreate(RX_QUEUE_SIZE, RX_ITEM_SIZE);
 8000522:	2200      	movs	r2, #0
 8000524:	2105      	movs	r1, #5
 8000526:	2002      	movs	r0, #2
 8000528:	f004 f840 	bl	80045ac <xQueueGenericCreate>
 800052c:	4603      	mov	r3, r0
 800052e:	4a23      	ldr	r2, [pc, #140]	; (80005bc <main+0xa4>)
 8000530:	6013      	str	r3, [r2, #0]
  tx_queue_handle = xQueueCreate(TX_QUEUE_SIZE, TX_ITEM_SIZE);
 8000532:	2200      	movs	r2, #0
 8000534:	2109      	movs	r1, #9
 8000536:	2002      	movs	r0, #2
 8000538:	f004 f838 	bl	80045ac <xQueueGenericCreate>
 800053c:	4603      	mov	r3, r0
 800053e:	4a20      	ldr	r2, [pc, #128]	; (80005c0 <main+0xa8>)
 8000540:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init ();
 8000542:	f000 fc7d 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config ();
 8000546:	f000 f859 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init ();
 800054a:	f000 f95d 	bl	8000808 <MX_GPIO_Init>
  MX_DMA_Init ();
 800054e:	f000 f93b 	bl	80007c8 <MX_DMA_Init>
  MX_USART1_UART_Init ();
 8000552:	f000 f90f 	bl	8000774 <MX_USART1_UART_Init>
  MX_TIM1_Init ();
 8000556:	f000 f8bb 	bl	80006d0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin (LED13_GPIO_Port, LED13_Pin, RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000560:	4818      	ldr	r0, [pc, #96]	; (80005c4 <main+0xac>)
 8000562:	f001 fb8f 	bl	8001c84 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT (&htim1);
 8000566:	4818      	ldr	r0, [pc, #96]	; (80005c8 <main+0xb0>)
 8000568:	f002 f868 	bl	800263c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize ();
 800056c:	f003 fd5e 	bl	800402c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew (StartDefaultTask, NULL,
 8000570:	4a16      	ldr	r2, [pc, #88]	; (80005cc <main+0xb4>)
 8000572:	2100      	movs	r1, #0
 8000574:	4816      	ldr	r0, [pc, #88]	; (80005d0 <main+0xb8>)
 8000576:	f003 fda3 	bl	80040c0 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <main+0xbc>)
 800057e:	6013      	str	r3, [r2, #0]
				   &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  pingTaskHandle = osThreadNew (PingTask, NULL, &pingTask_attributes);
 8000580:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <main+0xc0>)
 8000582:	2100      	movs	r1, #0
 8000584:	4815      	ldr	r0, [pc, #84]	; (80005dc <main+0xc4>)
 8000586:	f003 fd9b 	bl	80040c0 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <main+0xc8>)
 800058e:	6013      	str	r3, [r2, #0]
  sendDataTaskHandle = osThreadNew (SendDataTask, NULL,
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <main+0xcc>)
 8000592:	2100      	movs	r1, #0
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <main+0xd0>)
 8000596:	f003 fd93 	bl	80040c0 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <main+0xd4>)
 800059e:	6013      	str	r3, [r2, #0]
				    &sendDataTask_attributes);
  handleDataTaskHandle = osThreadNew (HandleDataTask, NULL,
 80005a0:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <main+0xd8>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4813      	ldr	r0, [pc, #76]	; (80005f4 <main+0xdc>)
 80005a6:	f003 fd8b 	bl	80040c0 <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <main+0xe0>)
 80005ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart ();
 80005b0:	f003 fd60 	bl	8004074 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x9c>
 80005b6:	bf00      	nop
 80005b8:	20000144 	.word	0x20000144
 80005bc:	2000013c 	.word	0x2000013c
 80005c0:	20000140 	.word	0x20000140
 80005c4:	40020800 	.word	0x40020800
 80005c8:	2000002c 	.word	0x2000002c
 80005cc:	08006c9c 	.word	0x08006c9c
 80005d0:	08000b6d 	.word	0x08000b6d
 80005d4:	20000118 	.word	0x20000118
 80005d8:	08006cc0 	.word	0x08006cc0
 80005dc:	08000915 	.word	0x08000915
 80005e0:	2000011c 	.word	0x2000011c
 80005e4:	08006ce4 	.word	0x08006ce4
 80005e8:	080009a1 	.word	0x080009a1
 80005ec:	20000120 	.word	0x20000120
 80005f0:	08006d08 	.word	0x08006d08
 80005f4:	080009fd 	.word	0x080009fd
 80005f8:	20000124 	.word	0x20000124

080005fc <SystemClock_Config>:
 * @brief System Clock Configuration
 * @retval None
 */
void
SystemClock_Config (void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct =
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f006 faf0 	bl	8006bf0 <memset>
    { 0 };
  RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
    { 0 };

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <SystemClock_Config+0xd0>)
 800064a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000674:	2354      	movs	r3, #84	; 0x54
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fb31 	bl	8001cec <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x98>
    {
      Error_Handler ();
 8000690:	f000 fa74 	bl	8000b7c <Error_Handler>
    }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fd93 	bl	80021dc <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc4>
    {
      Error_Handler ();
 80006bc:	f000 fa5e 	bl	8000b7c <Error_Handler>
    }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_TIM1_Init>:
 * @param None
 * @retval None
 */
static void
MX_TIM1_Init (void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig =
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
    { 0 };
  TIM_MasterConfigTypeDef sMasterConfig =
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
    { 0 };

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_TIM1_Init+0x9c>)
 80006ee:	4a20      	ldr	r2, [pc, #128]	; (8000770 <MX_TIM1_Init+0xa0>)
 80006f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_TIM1_Init+0x9c>)
 80006f4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80006f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_TIM1_Init+0x9c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_TIM1_Init+0x9c>)
 8000702:	f242 720f 	movw	r2, #9999	; 0x270f
 8000706:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_TIM1_Init+0x9c>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_TIM1_Init+0x9c>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_TIM1_Init+0x9c>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init (&htim1) != HAL_OK)
 800071a:	4814      	ldr	r0, [pc, #80]	; (800076c <MX_TIM1_Init+0x9c>)
 800071c:	f001 ff3e 	bl	800259c <HAL_TIM_Base_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM1_Init+0x5a>
    {
      Error_Handler ();
 8000726:	f000 fa29 	bl	8000b7c <Error_Handler>
    }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource (&htim1, &sClockSourceConfig) != HAL_OK)
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	4619      	mov	r1, r3
 8000736:	480d      	ldr	r0, [pc, #52]	; (800076c <MX_TIM1_Init+0x9c>)
 8000738:	f002 f8ea 	bl	8002910 <HAL_TIM_ConfigClockSource>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM1_Init+0x76>
    {
      Error_Handler ();
 8000742:	f000 fa1b 	bl	8000b7c <Error_Handler>
    }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization (&htim1, &sMasterConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_TIM1_Init+0x9c>)
 8000754:	f002 faf0 	bl	8002d38 <HAL_TIMEx_MasterConfigSynchronization>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM1_Init+0x92>
    {
      Error_Handler ();
 800075e:	f000 fa0d 	bl	8000b7c <Error_Handler>
    }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000002c 	.word	0x2000002c
 8000770:	40010000 	.word	0x40010000

08000774 <MX_USART1_UART_Init>:
 * @param None
 * @retval None
 */
static void
MX_USART1_UART_Init (void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_USART1_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init (&huart1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART1_UART_Init+0x4c>)
 80007ac:	f002 fb46 	bl	8002e3c <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART1_UART_Init+0x46>
    {
      Error_Handler ();
 80007b6:	f000 f9e1 	bl	8000b7c <Error_Handler>
    }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000074 	.word	0x20000074
 80007c4:	40011000 	.word	0x40011000

080007c8 <MX_DMA_Init>:
/**
 * Enable DMA controller clock
 */
static void
MX_DMA_Init (void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_DMA_Init+0x3c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <MX_DMA_Init+0x3c>)
 80007d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_DMA_Init+0x3c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority (DMA2_Stream7_IRQn, 5, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2105      	movs	r1, #5
 80007ee:	2046      	movs	r0, #70	; 0x46
 80007f0:	f000 fc73 	bl	80010da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ (DMA2_Stream7_IRQn);
 80007f4:	2046      	movs	r0, #70	; 0x46
 80007f6:	f000 fc8c 	bl	8001112 <HAL_NVIC_EnableIRQ>

}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <MX_GPIO_Init>:
 * @param None
 * @retval None
 */
static void
MX_GPIO_Init (void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct =
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
    { 0 };

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a25      	ldr	r2, [pc, #148]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_GPIO_Init+0xb4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_GPIO_Init+0xb4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_GPIO_Init+0xb4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin (LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000878:	4811      	ldr	r0, [pc, #68]	; (80008c0 <MX_GPIO_Init+0xb8>)
 800087a:	f001 fa03 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 800087e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init (LED13_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	4619      	mov	r1, r3
 8000896:	480a      	ldr	r0, [pc, #40]	; (80008c0 <MX_GPIO_Init+0xb8>)
 8000898:	f001 f858 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800089c:	2301      	movs	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init (Button_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_GPIO_Init+0xbc>)
 80008b0:	f001 f84c 	bl	800194c <HAL_GPIO_Init>

}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40020000 	.word	0x40020000

080008c8 <count_check_sum>:
 * @retval None
 */

uint8_t
count_check_sum (uint8_t *data, size_t size)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  check_sum = 0;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <count_check_sum+0x48>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; i++)
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	e00c      	b.n	80008f8 <count_check_sum+0x30>
    {
      check_sum ^= data[i];
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	4413      	add	r3, r2
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <count_check_sum+0x48>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4053      	eors	r3, r2
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <count_check_sum+0x48>)
 80008f0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; i++)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d8ee      	bhi.n	80008de <count_check_sum+0x16>
    }

  return check_sum;
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <count_check_sum+0x48>)
 8000902:	781b      	ldrb	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	20000139 	.word	0x20000139

08000914 <PingTask>:

void
PingTask (void *arg)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  tx_data_t data =
 800091c:	4a1b      	ldr	r2, [pc, #108]	; (800098c <PingTask+0x78>)
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	ca07      	ldmia	r2, {r0, r1, r2}
 8000924:	c303      	stmia	r3!, {r0, r1}
 8000926:	701a      	strb	r2, [r3, #0]
    { .data =
      { 0x01, 0x02, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5A }, };

  for (;;)
    {
      if (ping != 0)
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <PingTask+0x7c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d027      	beq.n	8000982 <PingTask+0x6e>
	{
	  memmove (&data.data[2], &"png", 3);
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	3302      	adds	r3, #2
 8000938:	4a16      	ldr	r2, [pc, #88]	; (8000994 <PingTask+0x80>)
 800093a:	8811      	ldrh	r1, [r2, #0]
 800093c:	7892      	ldrb	r2, [r2, #2]
 800093e:	8019      	strh	r1, [r3, #0]
 8000940:	709a      	strb	r2, [r3, #2]
	  data.data[6] = HAL_GPIO_ReadPin (LED13_GPIO_Port, LED13_Pin);
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	4814      	ldr	r0, [pc, #80]	; (8000998 <PingTask+0x84>)
 8000948:	f001 f984 	bl	8001c54 <HAL_GPIO_ReadPin>
 800094c:	4603      	mov	r3, r0
 800094e:	74bb      	strb	r3, [r7, #18]
	  data.data[7] = count_check_sum (&data.data[2], 5);
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	3302      	adds	r3, #2
 8000956:	2105      	movs	r1, #5
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ffb5 	bl	80008c8 <count_check_sum>
 800095e:	4603      	mov	r3, r0
 8000960:	74fb      	strb	r3, [r7, #19]
	  xQueueSendToBack(tx_queue_handle, &data, portMAX_DELAY);
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <PingTask+0x88>)
 8000964:	6818      	ldr	r0, [r3, #0]
 8000966:	f107 010c 	add.w	r1, r7, #12
 800096a:	2300      	movs	r3, #0
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	f003 fe7a 	bl	8004668 <xQueueGenericSend>
	  ping--;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <PingTask+0x7c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	3b01      	subs	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <PingTask+0x7c>)
 8000980:	701a      	strb	r2, [r3, #0]
	}
      osDelay (1);
 8000982:	2001      	movs	r0, #1
 8000984:	f003 fc2e 	bl	80041e4 <osDelay>
      if (ping != 0)
 8000988:	e7ce      	b.n	8000928 <PingTask+0x14>
 800098a:	bf00      	nop
 800098c:	08006c54 	.word	0x08006c54
 8000990:	20000145 	.word	0x20000145
 8000994:	08006c50 	.word	0x08006c50
 8000998:	40020800 	.word	0x40020800
 800099c:	20000140 	.word	0x20000140

080009a0 <SendDataTask>:
    }
}

void
SendDataTask (void *arg)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  tx_data_t item;

  HAL_UART_Transmit_DMA (&huart1, (uint8_t*) "System started\n", 15);
 80009a8:	220f      	movs	r2, #15
 80009aa:	4910      	ldr	r1, [pc, #64]	; (80009ec <SendDataTask+0x4c>)
 80009ac:	4810      	ldr	r0, [pc, #64]	; (80009f0 <SendDataTask+0x50>)
 80009ae:	f002 fac3 	bl	8002f38 <HAL_UART_Transmit_DMA>
  for (;;)
    {
      if (send_data != 0)
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <SendDataTask+0x54>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d014      	beq.n	80009e4 <SendDataTask+0x44>
	{
	  if (xQueueReceive (tx_queue_handle, &item, 0) == pdTRUE)
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <SendDataTask+0x58>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f107 010c 	add.w	r1, r7, #12
 80009c2:	2200      	movs	r2, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 ffe9 	bl	800499c <xQueueReceive>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d109      	bne.n	80009e4 <SendDataTask+0x44>
	    {
	      HAL_UART_Transmit_DMA (&huart1, (uint8_t*) &item.data, 9);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2209      	movs	r2, #9
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <SendDataTask+0x50>)
 80009da:	f002 faad 	bl	8002f38 <HAL_UART_Transmit_DMA>
	      send_data = 0;
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SendDataTask+0x54>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	    }
	}
      osDelay (1);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f003 fbfd 	bl	80041e4 <osDelay>
      if (send_data != 0)
 80009ea:	e7e2      	b.n	80009b2 <SendDataTask+0x12>
 80009ec:	08006c60 	.word	0x08006c60
 80009f0:	20000074 	.word	0x20000074
 80009f4:	20000144 	.word	0x20000144
 80009f8:	20000140 	.word	0x20000140

080009fc <HandleDataTask>:

/* Test data to send: 01026c656400006d5a 01 02 65 63 68 00 65 0B 5A*/

void
HandleDataTask (void *arg)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint8_t data[9] =
 8000a04:	4a20      	ldr	r2, [pc, #128]	; (8000a88 <HandleDataTask+0x8c>)
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a0c:	c303      	stmia	r3!, {r0, r1}
 8000a0e:	701a      	strb	r2, [r3, #0]
  rx_data_t item;
  char cmd[5];

  for (;;)
    {
      xQueueReceive (rx_queue_handle, &item, portMAX_DELAY);
 8000a10:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <HandleDataTask+0x90>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f107 0114 	add.w	r1, r7, #20
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 ffbd 	bl	800499c <xQueueReceive>
 8000a22:	697b      	ldr	r3, [r7, #20]
      memcpy (&cmd, item.data, 4);
 8000a24:	60fb      	str	r3, [r7, #12]
      if (strcmp (cmd, "ech") == 0)
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4919      	ldr	r1, [pc, #100]	; (8000a90 <HandleDataTask+0x94>)
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fbd7 	bl	80001e0 <strcmp>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d114      	bne.n	8000a62 <HandleDataTask+0x66>
	{
	  data[2] = item.data[6];
 8000a38:	7ebb      	ldrb	r3, [r7, #26]
 8000a3a:	77bb      	strb	r3, [r7, #30]
	  data[7] = count_check_sum (&data[2], 5);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	3302      	adds	r3, #2
 8000a42:	2105      	movs	r1, #5
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff3f 	bl	80008c8 <count_check_sum>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  xQueueSendToBack(tx_queue_handle, &item, portMAX_DELAY);
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HandleDataTask+0x98>)
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	f107 0114 	add.w	r1, r7, #20
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5e:	f003 fe03 	bl	8004668 <xQueueGenericSend>
	}
      if (strcmp (cmd, "led") == 0)
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	490c      	ldr	r1, [pc, #48]	; (8000a98 <HandleDataTask+0x9c>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fbb9 	bl	80001e0 <strcmp>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d104      	bne.n	8000a7e <HandleDataTask+0x82>
	{
	  HAL_GPIO_TogglePin (LED13_GPIO_Port, LED13_Pin);
 8000a74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a78:	4808      	ldr	r0, [pc, #32]	; (8000a9c <HandleDataTask+0xa0>)
 8000a7a:	f001 f91c 	bl	8001cb6 <HAL_GPIO_TogglePin>
	}

      osDelay (1);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f003 fbb0 	bl	80041e4 <osDelay>
      xQueueReceive (rx_queue_handle, &item, portMAX_DELAY);
 8000a84:	e7c4      	b.n	8000a10 <HandleDataTask+0x14>
 8000a86:	bf00      	nop
 8000a88:	08006c78 	.word	0x08006c78
 8000a8c:	2000013c 	.word	0x2000013c
 8000a90:	08006c70 	.word	0x08006c70
 8000a94:	20000140 	.word	0x20000140
 8000a98:	08006c74 	.word	0x08006c74
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <HAL_UART_RxCpltCallback>:
    }
}

void
HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a1f      	ldr	r2, [pc, #124]	; (8000b28 <HAL_UART_RxCpltCallback+0x88>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d137      	bne.n	8000b20 <HAL_UART_RxCpltCallback+0x80>
    {
      BaseType_t xHigherPriotity;

      if (data_buf[0] == 0x01 && data_buf[1] == 0x02 && data_buf[8] == 0x5A)
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <HAL_UART_RxCpltCallback+0x8c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d12b      	bne.n	8000b10 <HAL_UART_RxCpltCallback+0x70>
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_UART_RxCpltCallback+0x8c>)
 8000aba:	785b      	ldrb	r3, [r3, #1]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d127      	bne.n	8000b10 <HAL_UART_RxCpltCallback+0x70>
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_UART_RxCpltCallback+0x8c>)
 8000ac2:	7a1b      	ldrb	r3, [r3, #8]
 8000ac4:	2b5a      	cmp	r3, #90	; 0x5a
 8000ac6:	d123      	bne.n	8000b10 <HAL_UART_RxCpltCallback+0x70>
	{
	  if (data_buf[7] != count_check_sum (&data_buf[2], 5))
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_UART_RxCpltCallback+0x8c>)
 8000aca:	79dc      	ldrb	r4, [r3, #7]
 8000acc:	2105      	movs	r1, #5
 8000ace:	4818      	ldr	r0, [pc, #96]	; (8000b30 <HAL_UART_RxCpltCallback+0x90>)
 8000ad0:	f7ff fefa 	bl	80008c8 <count_check_sum>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	429c      	cmp	r4, r3
 8000ad8:	d11c      	bne.n	8000b14 <HAL_UART_RxCpltCallback+0x74>
	    {
	      goto end;
	    }

	  memcpy (&tmp.data, &data_buf[2], 5);
 8000ada:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <HAL_UART_RxCpltCallback+0x94>)
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_UART_RxCpltCallback+0x8c>)
 8000ade:	3302      	adds	r3, #2
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	6010      	str	r0, [r2, #0]
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	7113      	strb	r3, [r2, #4]
	  xQueueSendToBackFromISR(rx_queue_handle, &tmp, &xHigherPriotity);
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <HAL_UART_RxCpltCallback+0x98>)
 8000aea:	6818      	ldr	r0, [r3, #0]
 8000aec:	f107 020c 	add.w	r2, r7, #12
 8000af0:	2300      	movs	r3, #0
 8000af2:	4910      	ldr	r1, [pc, #64]	; (8000b34 <HAL_UART_RxCpltCallback+0x94>)
 8000af4:	f003 feb6 	bl	8004864 <xQueueGenericSendFromISR>
	  portYIELD_FROM_ISR(xHigherPriotity);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d008      	beq.n	8000b10 <HAL_UART_RxCpltCallback+0x70>
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_UART_RxCpltCallback+0x9c>)
 8000b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	f3bf 8f4f 	dsb	sy
 8000b0a:	f3bf 8f6f 	isb	sy
 8000b0e:	e002      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x76>
	}

end:  HAL_UART_Receive_IT (&huart1, (uint8_t*) &data_buf, 9);
 8000b10:	bf00      	nop
 8000b12:	e000      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x76>
	      goto end;
 8000b14:	bf00      	nop
end:  HAL_UART_Receive_IT (&huart1, (uint8_t*) &data_buf, 9);
 8000b16:	2209      	movs	r2, #9
 8000b18:	4904      	ldr	r1, [pc, #16]	; (8000b2c <HAL_UART_RxCpltCallback+0x8c>)
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <HAL_UART_RxCpltCallback+0x88>)
 8000b1c:	f002 f9db 	bl	8002ed6 <HAL_UART_Receive_IT>
    }
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	20000074 	.word	0x20000074
 8000b2c:	20000130 	.word	0x20000130
 8000b30:	20000132 	.word	0x20000132
 8000b34:	20000128 	.word	0x20000128
 8000b38:	2000013c 	.word	0x2000013c
 8000b3c:	e000ed04 	.word	0xe000ed04

08000b40 <HAL_UART_TxCpltCallback>:

void
HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_UART_TxCpltCallback+0x24>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d102      	bne.n	8000b56 <HAL_UART_TxCpltCallback+0x16>
    {
      send_data = 1;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_UART_TxCpltCallback+0x28>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
    }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000074 	.word	0x20000074
 8000b68:	20000144 	.word	0x20000144

08000b6c <StartDefaultTask>:

/* USER CODE END Header_StartDefaultTask */
void
StartDefaultTask (void *argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
    {
      osDelay (1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f003 fb35 	bl	80041e4 <osDelay>
 8000b7a:	e7fb      	b.n	8000b74 <StartDefaultTask+0x8>

08000b7c <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void
Error_Handler (void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_MspInit+0x54>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <HAL_MspInit+0x54>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_MspInit+0x54>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_MspInit+0x54>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_MspInit+0x54>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_MspInit+0x54>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	210f      	movs	r1, #15
 8000bca:	f06f 0001 	mvn.w	r0, #1
 8000bce:	f000 fa84 	bl	80010da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_TIM_Base_MspInit+0x48>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d115      	bne.n	8000c1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_TIM_Base_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <HAL_TIM_Base_MspInit+0x4c>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_TIM_Base_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2105      	movs	r1, #5
 8000c12:	2019      	movs	r0, #25
 8000c14:	f000 fa61 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c18:	2019      	movs	r0, #25
 8000c1a:	f000 fa7a 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40010000 	.word	0x40010000
 8000c2c:	40023800 	.word	0x40023800

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a34      	ldr	r2, [pc, #208]	; (8000d20 <HAL_UART_MspInit+0xf0>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d161      	bne.n	8000d16 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b33      	ldr	r3, [pc, #204]	; (8000d24 <HAL_UART_MspInit+0xf4>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a32      	ldr	r2, [pc, #200]	; (8000d24 <HAL_UART_MspInit+0xf4>)
 8000c5c:	f043 0310 	orr.w	r3, r3, #16
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <HAL_UART_MspInit+0xf4>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <HAL_UART_MspInit+0xf4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a2b      	ldr	r2, [pc, #172]	; (8000d24 <HAL_UART_MspInit+0xf4>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <HAL_UART_MspInit+0xf4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c8a:	23c0      	movs	r3, #192	; 0xc0
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4820      	ldr	r0, [pc, #128]	; (8000d28 <HAL_UART_MspInit+0xf8>)
 8000ca6:	f000 fe51 	bl	800194c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000cac:	4a20      	ldr	r2, [pc, #128]	; (8000d30 <HAL_UART_MspInit+0x100>)
 8000cae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000cb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000cba:	2240      	movs	r2, #64	; 0x40
 8000cbc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000cea:	4810      	ldr	r0, [pc, #64]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000cec:	f000 fa2c 	bl	8001148 <HAL_DMA_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000cf6:	f7ff ff41 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_UART_MspInit+0xfc>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2105      	movs	r1, #5
 8000d0a:	2025      	movs	r0, #37	; 0x25
 8000d0c:	f000 f9e5 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d10:	2025      	movs	r0, #37	; 0x25
 8000d12:	f000 f9fe 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40011000 	.word	0x40011000
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	200000b8 	.word	0x200000b8
 8000d30:	400264b8 	.word	0x400264b8

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f8be 	bl	8000ee4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d68:	f004 fea6 	bl	8005ab8 <xTaskGetSchedulerState>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d001      	beq.n	8000d76 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d72:	f005 fc91 	bl	8006698 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  ping += 1;
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	3301      	adds	r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000d8c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <TIM1_UP_TIM10_IRQHandler+0x20>)
 8000d90:	f001 fcb6 	bl	8002700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000145 	.word	0x20000145
 8000d9c:	2000002c 	.word	0x2000002c

08000da0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <USART1_IRQHandler+0x10>)
 8000da6:	f002 f945 	bl	8003034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000074 	.word	0x20000074

08000db4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */
  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <DMA2_Stream7_IRQHandler+0x10>)
 8000dba:	f000 fb5d 	bl	8001478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000b8 	.word	0x200000b8

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df2:	490e      	ldr	r1, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e08:	4c0b      	ldr	r4, [pc, #44]	; (8000e38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e16:	f7ff ffd7 	bl	8000dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f005 feb7 	bl	8006b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fb7b 	bl	8000518 <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e30:	08006d5c 	.word	0x08006d5c
  ldr r2, =_sbss
 8000e34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e38:	20004ab4 	.word	0x20004ab4

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f92b 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fe88 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f943 	bl	800112e <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 f90b 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000148 	.word	0x20000148

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000148 	.word	0x20000148

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff29 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff3e 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff31 	bl	8000f88 <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffa2 	bl	8001080 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff feda 	bl	8000f0c <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e099      	b.n	8001298 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2202      	movs	r2, #2
 8001168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001184:	e00f      	b.n	80011a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001186:	f7ff fec1 	bl	8000f0c <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b05      	cmp	r3, #5
 8001192:	d908      	bls.n	80011a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2220      	movs	r2, #32
 8001198:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2203      	movs	r2, #3
 800119e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e078      	b.n	8001298 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e8      	bne.n	8001186 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HAL_DMA_Init+0x158>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d107      	bne.n	8001210 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4313      	orrs	r3, r2
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4313      	orrs	r3, r2
 800120e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f023 0307 	bic.w	r3, r3, #7
 8001226:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4313      	orrs	r3, r2
 8001230:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	2b04      	cmp	r3, #4
 8001238:	d117      	bne.n	800126a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4313      	orrs	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00e      	beq.n	800126a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fb01 	bl	8001854 <DMA_CheckFifoParam>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001266:	2301      	movs	r3, #1
 8001268:	e016      	b.n	8001298 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fab8 	bl	80017e8 <DMA_CalcBaseAndBitshift>
 8001278:	4603      	mov	r3, r0
 800127a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	223f      	movs	r2, #63	; 0x3f
 8001282:	409a      	lsls	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	f010803f 	.word	0xf010803f

080012a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_DMA_Start_IT+0x26>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e040      	b.n	800134c <HAL_DMA_Start_IT+0xa8>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d12f      	bne.n	800133e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2202      	movs	r2, #2
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f000 fa4a 	bl	800178c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	223f      	movs	r2, #63	; 0x3f
 80012fe:	409a      	lsls	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0216 	orr.w	r2, r2, #22
 8001312:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	2b00      	cmp	r3, #0
 800131a:	d007      	beq.n	800132c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0208 	orr.w	r2, r2, #8
 800132a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e005      	b.n	800134a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001346:	2302      	movs	r3, #2
 8001348:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800134a:	7dfb      	ldrb	r3, [r7, #23]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001362:	f7ff fdd3 	bl	8000f0c <HAL_GetTick>
 8001366:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d008      	beq.n	8001386 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e052      	b.n	800142c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0216 	bic.w	r2, r2, #22
 8001394:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d103      	bne.n	80013b6 <HAL_DMA_Abort+0x62>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0208 	bic.w	r2, r2, #8
 80013c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0201 	bic.w	r2, r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d6:	e013      	b.n	8001400 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013d8:	f7ff fd98 	bl	8000f0c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	d90c      	bls.n	8001400 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2220      	movs	r2, #32
 80013ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2203      	movs	r2, #3
 80013f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e015      	b.n	800142c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1e4      	bne.n	80013d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001412:	223f      	movs	r2, #63	; 0x3f
 8001414:	409a      	lsls	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d004      	beq.n	8001452 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00c      	b.n	800146c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2205      	movs	r2, #5
 8001456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001484:	4b8e      	ldr	r3, [pc, #568]	; (80016c0 <HAL_DMA_IRQHandler+0x248>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a8e      	ldr	r2, [pc, #568]	; (80016c4 <HAL_DMA_IRQHandler+0x24c>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	0a9b      	lsrs	r3, r3, #10
 8001490:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a2:	2208      	movs	r2, #8
 80014a4:	409a      	lsls	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d01a      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0204 	bic.w	r2, r2, #4
 80014ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	2208      	movs	r2, #8
 80014d2:	409a      	lsls	r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e8:	2201      	movs	r2, #1
 80014ea:	409a      	lsls	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d012      	beq.n	800151a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001506:	2201      	movs	r2, #1
 8001508:	409a      	lsls	r2, r3
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001512:	f043 0202 	orr.w	r2, r3, #2
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151e:	2204      	movs	r2, #4
 8001520:	409a      	lsls	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d012      	beq.n	8001550 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00b      	beq.n	8001550 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	2204      	movs	r2, #4
 800153e:	409a      	lsls	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001548:	f043 0204 	orr.w	r2, r3, #4
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	2210      	movs	r2, #16
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d043      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d03c      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	2210      	movs	r2, #16
 8001574:	409a      	lsls	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d018      	beq.n	80015ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d108      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	2b00      	cmp	r3, #0
 800159c:	d024      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
 80015a6:	e01f      	b.n	80015e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d01b      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	4798      	blx	r3
 80015b8:	e016      	b.n	80015e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d107      	bne.n	80015d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0208 	bic.w	r2, r2, #8
 80015d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	2220      	movs	r2, #32
 80015ee:	409a      	lsls	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 808f 	beq.w	8001718 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8087 	beq.w	8001718 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	2220      	movs	r2, #32
 8001610:	409a      	lsls	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b05      	cmp	r3, #5
 8001620:	d136      	bne.n	8001690 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0216 	bic.w	r2, r2, #22
 8001630:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001640:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <HAL_DMA_IRQHandler+0x1da>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0208 	bic.w	r2, r2, #8
 8001660:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	223f      	movs	r2, #63	; 0x3f
 8001668:	409a      	lsls	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001682:	2b00      	cmp	r3, #0
 8001684:	d07e      	beq.n	8001784 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	4798      	blx	r3
        }
        return;
 800168e:	e079      	b.n	8001784 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d01d      	beq.n	80016da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10d      	bne.n	80016c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d031      	beq.n	8001718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
 80016bc:	e02c      	b.n	8001718 <HAL_DMA_IRQHandler+0x2a0>
 80016be:	bf00      	nop
 80016c0:	20000000 	.word	0x20000000
 80016c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d023      	beq.n	8001718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
 80016d8:	e01e      	b.n	8001718 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10f      	bne.n	8001708 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0210 	bic.w	r2, r2, #16
 80016f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171c:	2b00      	cmp	r3, #0
 800171e:	d032      	beq.n	8001786 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d022      	beq.n	8001772 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2205      	movs	r2, #5
 8001730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0201 	bic.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	3301      	adds	r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	429a      	cmp	r2, r3
 800174e:	d307      	bcc.n	8001760 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f2      	bne.n	8001744 <HAL_DMA_IRQHandler+0x2cc>
 800175e:	e000      	b.n	8001762 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001760:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	4798      	blx	r3
 8001782:	e000      	b.n	8001786 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001784:	bf00      	nop
    }
  }
}
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b40      	cmp	r3, #64	; 0x40
 80017b8:	d108      	bne.n	80017cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017ca:	e007      	b.n	80017dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	60da      	str	r2, [r3, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	3b10      	subs	r3, #16
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <DMA_CalcBaseAndBitshift+0x64>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001802:	4a13      	ldr	r2, [pc, #76]	; (8001850 <DMA_CalcBaseAndBitshift+0x68>)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d909      	bls.n	800182a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800181e:	f023 0303 	bic.w	r3, r3, #3
 8001822:	1d1a      	adds	r2, r3, #4
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	659a      	str	r2, [r3, #88]	; 0x58
 8001828:	e007      	b.n	800183a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	aaaaaaab 	.word	0xaaaaaaab
 8001850:	08006d44 	.word	0x08006d44

08001854 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d11f      	bne.n	80018ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d856      	bhi.n	8001922 <DMA_CheckFifoParam+0xce>
 8001874:	a201      	add	r2, pc, #4	; (adr r2, 800187c <DMA_CheckFifoParam+0x28>)
 8001876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187a:	bf00      	nop
 800187c:	0800188d 	.word	0x0800188d
 8001880:	0800189f 	.word	0x0800189f
 8001884:	0800188d 	.word	0x0800188d
 8001888:	08001923 	.word	0x08001923
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d046      	beq.n	8001926 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800189c:	e043      	b.n	8001926 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018a6:	d140      	bne.n	800192a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ac:	e03d      	b.n	800192a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018b6:	d121      	bne.n	80018fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d837      	bhi.n	800192e <DMA_CheckFifoParam+0xda>
 80018be:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <DMA_CheckFifoParam+0x70>)
 80018c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c4:	080018d5 	.word	0x080018d5
 80018c8:	080018db 	.word	0x080018db
 80018cc:	080018d5 	.word	0x080018d5
 80018d0:	080018ed 	.word	0x080018ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
      break;
 80018d8:	e030      	b.n	800193c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d025      	beq.n	8001932 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ea:	e022      	b.n	8001932 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018f4:	d11f      	bne.n	8001936 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018fa:	e01c      	b.n	8001936 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d903      	bls.n	800190a <DMA_CheckFifoParam+0xb6>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d003      	beq.n	8001910 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001908:	e018      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
      break;
 800190e:	e015      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00e      	beq.n	800193a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
      break;
 8001920:	e00b      	b.n	800193a <DMA_CheckFifoParam+0xe6>
      break;
 8001922:	bf00      	nop
 8001924:	e00a      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      break;
 8001926:	bf00      	nop
 8001928:	e008      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      break;
 800192a:	bf00      	nop
 800192c:	e006      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      break;
 800192e:	bf00      	nop
 8001930:	e004      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      break;
 8001932:	bf00      	nop
 8001934:	e002      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      break;   
 8001936:	bf00      	nop
 8001938:	e000      	b.n	800193c <DMA_CheckFifoParam+0xe8>
      break;
 800193a:	bf00      	nop
    }
  } 
  
  return status; 
 800193c:	7bfb      	ldrb	r3, [r7, #15]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e159      	b.n	8001c1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001968:	2201      	movs	r2, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	429a      	cmp	r2, r3
 8001982:	f040 8148 	bne.w	8001c16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d005      	beq.n	800199e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199a:	2b02      	cmp	r3, #2
 800199c:	d130      	bne.n	8001a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 0201 	and.w	r2, r3, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d017      	beq.n	8001a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d123      	bne.n	8001a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	220f      	movs	r2, #15
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	691a      	ldr	r2, [r3, #16]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	08da      	lsrs	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3208      	adds	r2, #8
 8001a8a:	69b9      	ldr	r1, [r7, #24]
 8001a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0203 	and.w	r2, r3, #3
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a2 	beq.w	8001c16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a56      	ldr	r2, [pc, #344]	; (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae2:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aee:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_GPIO_Init+0x2ec>)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a49      	ldr	r2, [pc, #292]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x202>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a48      	ldr	r2, [pc, #288]	; (8001c40 <HAL_GPIO_Init+0x2f4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x1fe>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a47      	ldr	r2, [pc, #284]	; (8001c44 <HAL_GPIO_Init+0x2f8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x1fa>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a46      	ldr	r2, [pc, #280]	; (8001c48 <HAL_GPIO_Init+0x2fc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x1f6>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a45      	ldr	r2, [pc, #276]	; (8001c4c <HAL_GPIO_Init+0x300>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x1f2>
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	e008      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b3e:	2307      	movs	r3, #7
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e004      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e002      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	f002 0203 	and.w	r2, r2, #3
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b60:	4935      	ldr	r1, [pc, #212]	; (8001c38 <HAL_GPIO_Init+0x2ec>)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b6e:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b92:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bbc:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001be6:	4a1a      	ldr	r2, [pc, #104]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c10:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b0f      	cmp	r3, #15
 8001c20:	f67f aea2 	bls.w	8001968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40013800 	.word	0x40013800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40013c00 	.word	0x40013c00

08001c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e001      	b.n	8001c76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
 8001c90:	4613      	mov	r3, r2
 8001c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c94:	787b      	ldrb	r3, [r7, #1]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ca0:	e003      	b.n	8001caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	041a      	lsls	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	619a      	str	r2, [r3, #24]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cc8:	887a      	ldrh	r2, [r7, #2]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	041a      	lsls	r2, r3, #16
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	619a      	str	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e267      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d075      	beq.n	8001df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0a:	4b88      	ldr	r3, [pc, #544]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d00c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d16:	4b85      	ldr	r3, [pc, #532]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d112      	bne.n	8001d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d22:	4b82      	ldr	r3, [pc, #520]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d2e:	d10b      	bne.n	8001d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	4b7e      	ldr	r3, [pc, #504]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d05b      	beq.n	8001df4 <HAL_RCC_OscConfig+0x108>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d157      	bne.n	8001df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e242      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d106      	bne.n	8001d60 <HAL_RCC_OscConfig+0x74>
 8001d52:	4b76      	ldr	r3, [pc, #472]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a75      	ldr	r2, [pc, #468]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xb0>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x98>
 8001d6a:	4b70      	ldr	r3, [pc, #448]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a6f      	ldr	r2, [pc, #444]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b6d      	ldr	r3, [pc, #436]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a6c      	ldr	r2, [pc, #432]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xb0>
 8001d84:	4b69      	ldr	r3, [pc, #420]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a68      	ldr	r2, [pc, #416]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b66      	ldr	r3, [pc, #408]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a65      	ldr	r2, [pc, #404]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff f8b2 	bl	8000f0c <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff f8ae 	bl	8000f0c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e207      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b5b      	ldr	r3, [pc, #364]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xc0>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f89e 	bl	8000f0c <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f89a 	bl	8000f0c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e1f3      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xe8>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d063      	beq.n	8001eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e02:	4b4a      	ldr	r3, [pc, #296]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d11c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1a:	4b44      	ldr	r3, [pc, #272]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	4b41      	ldr	r3, [pc, #260]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_RCC_OscConfig+0x152>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1c7      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4937      	ldr	r1, [pc, #220]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	e03a      	b.n	8001eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5c:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <HAL_RCC_OscConfig+0x244>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7ff f853 	bl	8000f0c <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff f84f 	bl	8000f0c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1a8      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4925      	ldr	r1, [pc, #148]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_RCC_OscConfig+0x244>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f832 	bl	8000f0c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eac:	f7ff f82e 	bl	8000f0c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e187      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d036      	beq.n	8001f44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d016      	beq.n	8001f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_RCC_OscConfig+0x248>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f812 	bl	8000f0c <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff f80e 	bl	8000f0c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e167      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_OscConfig+0x240>)
 8001f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x200>
 8001f0a:	e01b      	b.n	8001f44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_OscConfig+0x248>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7fe fffb 	bl	8000f0c <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	e00e      	b.n	8001f38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7fe fff7 	bl	8000f0c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d907      	bls.n	8001f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e150      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	42470000 	.word	0x42470000
 8001f34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f38:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ea      	bne.n	8001f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 8097 	beq.w	8002080 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f56:	4b81      	ldr	r3, [pc, #516]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10f      	bne.n	8001f82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	4b7d      	ldr	r3, [pc, #500]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a7c      	ldr	r2, [pc, #496]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b7a      	ldr	r3, [pc, #488]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b77      	ldr	r3, [pc, #476]	; (8002160 <HAL_RCC_OscConfig+0x474>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d118      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8e:	4b74      	ldr	r3, [pc, #464]	; (8002160 <HAL_RCC_OscConfig+0x474>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a73      	ldr	r2, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x474>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe ffb7 	bl	8000f0c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7fe ffb3 	bl	8000f0c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e10c      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x474>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2ea>
 8001fc8:	4b64      	ldr	r3, [pc, #400]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4a63      	ldr	r2, [pc, #396]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd4:	e01c      	b.n	8002010 <HAL_RCC_OscConfig+0x324>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x30c>
 8001fde:	4b5f      	ldr	r3, [pc, #380]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	4a5e      	ldr	r2, [pc, #376]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fea:	4b5c      	ldr	r3, [pc, #368]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a5b      	ldr	r2, [pc, #364]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0x324>
 8001ff8:	4b58      	ldr	r3, [pc, #352]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	4a57      	ldr	r2, [pc, #348]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	4b55      	ldr	r3, [pc, #340]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	4a54      	ldr	r2, [pc, #336]	; (800215c <HAL_RCC_OscConfig+0x470>)
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d015      	beq.n	8002044 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7fe ff78 	bl	8000f0c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201e:	e00a      	b.n	8002036 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7fe ff74 	bl	8000f0c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e0cb      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002036:	4b49      	ldr	r3, [pc, #292]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0ee      	beq.n	8002020 <HAL_RCC_OscConfig+0x334>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7fe ff62 	bl	8000f0c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7fe ff5e 	bl	8000f0c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e0b5      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002062:	4b3e      	ldr	r3, [pc, #248]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ee      	bne.n	800204c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800206e:	7dfb      	ldrb	r3, [r7, #23]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002074:	4b39      	ldr	r3, [pc, #228]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	4a38      	ldr	r2, [pc, #224]	; (800215c <HAL_RCC_OscConfig+0x470>)
 800207a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80a1 	beq.w	80021cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800208a:	4b34      	ldr	r3, [pc, #208]	; (800215c <HAL_RCC_OscConfig+0x470>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b08      	cmp	r3, #8
 8002094:	d05c      	beq.n	8002150 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d141      	bne.n	8002122 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209e:	4b31      	ldr	r3, [pc, #196]	; (8002164 <HAL_RCC_OscConfig+0x478>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7fe ff32 	bl	8000f0c <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ac:	f7fe ff2e 	bl	8000f0c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e087      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_RCC_OscConfig+0x470>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	019b      	lsls	r3, r3, #6
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	085b      	lsrs	r3, r3, #1
 80020e2:	3b01      	subs	r3, #1
 80020e4:	041b      	lsls	r3, r3, #16
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	061b      	lsls	r3, r3, #24
 80020ee:	491b      	ldr	r1, [pc, #108]	; (800215c <HAL_RCC_OscConfig+0x470>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_RCC_OscConfig+0x478>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7fe ff07 	bl	8000f0c <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002102:	f7fe ff03 	bl	8000f0c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e05c      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x416>
 8002120:	e054      	b.n	80021cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_RCC_OscConfig+0x478>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7fe fef0 	bl	8000f0c <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002130:	f7fe feec 	bl	8000f0c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e045      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_OscConfig+0x470>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x444>
 800214e:	e03d      	b.n	80021cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d107      	bne.n	8002168 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e038      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
 800215c:	40023800 	.word	0x40023800
 8002160:	40007000 	.word	0x40007000
 8002164:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_RCC_OscConfig+0x4ec>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d028      	beq.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002180:	429a      	cmp	r2, r3
 8002182:	d121      	bne.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d11a      	bne.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800219e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d111      	bne.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	085b      	lsrs	r3, r3, #1
 80021b0:	3b01      	subs	r3, #1
 80021b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800

080021dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0cc      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f0:	4b68      	ldr	r3, [pc, #416]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d90c      	bls.n	8002218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b65      	ldr	r3, [pc, #404]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b63      	ldr	r3, [pc, #396]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0b8      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002230:	4b59      	ldr	r3, [pc, #356]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a58      	ldr	r2, [pc, #352]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800223a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	494d      	ldr	r1, [pc, #308]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d044      	beq.n	80022fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d119      	bne.n	80022ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e07f      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d003      	beq.n	800229a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002296:	2b03      	cmp	r3, #3
 8002298:	d107      	bne.n	80022aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229a:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e06f      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022aa:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e067      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ba:	4b37      	ldr	r3, [pc, #220]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f023 0203 	bic.w	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4934      	ldr	r1, [pc, #208]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022cc:	f7fe fe1e 	bl	8000f0c <HAL_GetTick>
 80022d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d2:	e00a      	b.n	80022ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d4:	f7fe fe1a 	bl	8000f0c <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e04f      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 020c 	and.w	r2, r3, #12
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d1eb      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d20c      	bcs.n	8002324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b22      	ldr	r3, [pc, #136]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e032      	b.n	800238a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4916      	ldr	r1, [pc, #88]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	490e      	ldr	r1, [pc, #56]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002362:	f000 f821 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8002366:	4602      	mov	r2, r0
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	490a      	ldr	r1, [pc, #40]	; (800239c <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	5ccb      	ldrb	r3, [r1, r3]
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fd7e 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023c00 	.word	0x40023c00
 8002398:	40023800 	.word	0x40023800
 800239c:	08006d2c 	.word	0x08006d2c
 80023a0:	20000000 	.word	0x20000000
 80023a4:	20000004 	.word	0x20000004

080023a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ac:	b090      	sub	sp, #64	; 0x40
 80023ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
 80023b4:	2300      	movs	r3, #0
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b8:	2300      	movs	r3, #0
 80023ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c0:	4b59      	ldr	r3, [pc, #356]	; (8002528 <HAL_RCC_GetSysClockFreq+0x180>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d00d      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x40>
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	f200 80a1 	bhi.w	8002514 <HAL_RCC_GetSysClockFreq+0x16c>
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x34>
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d003      	beq.n	80023e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023da:	e09b      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_GetSysClockFreq+0x184>)
 80023de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023e0:	e09b      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023e2:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_GetSysClockFreq+0x188>)
 80023e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023e6:	e098      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e8:	4b4f      	ldr	r3, [pc, #316]	; (8002528 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023f2:	4b4d      	ldr	r3, [pc, #308]	; (8002528 <HAL_RCC_GetSysClockFreq+0x180>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d028      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fe:	4b4a      	ldr	r3, [pc, #296]	; (8002528 <HAL_RCC_GetSysClockFreq+0x180>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	099b      	lsrs	r3, r3, #6
 8002404:	2200      	movs	r2, #0
 8002406:	623b      	str	r3, [r7, #32]
 8002408:	627a      	str	r2, [r7, #36]	; 0x24
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002410:	2100      	movs	r1, #0
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_GetSysClockFreq+0x188>)
 8002414:	fb03 f201 	mul.w	r2, r3, r1
 8002418:	2300      	movs	r3, #0
 800241a:	fb00 f303 	mul.w	r3, r0, r3
 800241e:	4413      	add	r3, r2
 8002420:	4a43      	ldr	r2, [pc, #268]	; (8002530 <HAL_RCC_GetSysClockFreq+0x188>)
 8002422:	fba0 1202 	umull	r1, r2, r0, r2
 8002426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002428:	460a      	mov	r2, r1
 800242a:	62ba      	str	r2, [r7, #40]	; 0x28
 800242c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800242e:	4413      	add	r3, r2
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002434:	2200      	movs	r2, #0
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	61fa      	str	r2, [r7, #28]
 800243a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800243e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002442:	f7fd fed7 	bl	80001f4 <__aeabi_uldivmod>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4613      	mov	r3, r2
 800244c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800244e:	e053      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002450:	4b35      	ldr	r3, [pc, #212]	; (8002528 <HAL_RCC_GetSysClockFreq+0x180>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	2200      	movs	r2, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	617a      	str	r2, [r7, #20]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002462:	f04f 0b00 	mov.w	fp, #0
 8002466:	4652      	mov	r2, sl
 8002468:	465b      	mov	r3, fp
 800246a:	f04f 0000 	mov.w	r0, #0
 800246e:	f04f 0100 	mov.w	r1, #0
 8002472:	0159      	lsls	r1, r3, #5
 8002474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002478:	0150      	lsls	r0, r2, #5
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	ebb2 080a 	subs.w	r8, r2, sl
 8002482:	eb63 090b 	sbc.w	r9, r3, fp
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002492:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002496:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800249a:	ebb2 0408 	subs.w	r4, r2, r8
 800249e:	eb63 0509 	sbc.w	r5, r3, r9
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	00eb      	lsls	r3, r5, #3
 80024ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024b0:	00e2      	lsls	r2, r4, #3
 80024b2:	4614      	mov	r4, r2
 80024b4:	461d      	mov	r5, r3
 80024b6:	eb14 030a 	adds.w	r3, r4, sl
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	eb45 030b 	adc.w	r3, r5, fp
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ce:	4629      	mov	r1, r5
 80024d0:	028b      	lsls	r3, r1, #10
 80024d2:	4621      	mov	r1, r4
 80024d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024d8:	4621      	mov	r1, r4
 80024da:	028a      	lsls	r2, r1, #10
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e2:	2200      	movs	r2, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	60fa      	str	r2, [r7, #12]
 80024e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ec:	f7fd fe82 	bl	80001f4 <__aeabi_uldivmod>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4613      	mov	r3, r2
 80024f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_GetSysClockFreq+0x180>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	3301      	adds	r3, #1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002512:	e002      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetSysClockFreq+0x184>)
 8002516:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800251c:	4618      	mov	r0, r3
 800251e:	3740      	adds	r7, #64	; 0x40
 8002520:	46bd      	mov	sp, r7
 8002522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	00f42400 	.word	0x00f42400
 8002530:	017d7840 	.word	0x017d7840

08002534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_RCC_GetHCLKFreq+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20000000 	.word	0x20000000

0800254c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002550:	f7ff fff0 	bl	8002534 <HAL_RCC_GetHCLKFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	0a9b      	lsrs	r3, r3, #10
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4903      	ldr	r1, [pc, #12]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40023800 	.word	0x40023800
 8002570:	08006d3c 	.word	0x08006d3c

08002574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002578:	f7ff ffdc 	bl	8002534 <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0b5b      	lsrs	r3, r3, #13
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4903      	ldr	r1, [pc, #12]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40023800 	.word	0x40023800
 8002598:	08006d3c 	.word	0x08006d3c

0800259c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e041      	b.n	8002632 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fb0c 	bl	8000be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3304      	adds	r3, #4
 80025d8:	4619      	mov	r1, r3
 80025da:	4610      	mov	r0, r2
 80025dc:	f000 fa92 	bl	8002b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d001      	beq.n	8002654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e044      	b.n	80026de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1e      	ldr	r2, [pc, #120]	; (80026ec <HAL_TIM_Base_Start_IT+0xb0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d018      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267e:	d013      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1a      	ldr	r2, [pc, #104]	; (80026f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00e      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x6c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a19      	ldr	r2, [pc, #100]	; (80026f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d009      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x6c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a17      	ldr	r2, [pc, #92]	; (80026f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d004      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x6c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a16      	ldr	r2, [pc, #88]	; (80026fc <HAL_TIM_Base_Start_IT+0xc0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d111      	bne.n	80026cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d010      	beq.n	80026dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0201 	orr.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ca:	e007      	b.n	80026dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40010000 	.word	0x40010000
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40000800 	.word	0x40000800
 80026f8:	40000c00 	.word	0x40000c00
 80026fc:	40014000 	.word	0x40014000

08002700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d122      	bne.n	800275c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b02      	cmp	r3, #2
 8002722:	d11b      	bne.n	800275c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0202 	mvn.w	r2, #2
 800272c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f9bf 	bl	8002ac6 <HAL_TIM_IC_CaptureCallback>
 8002748:	e005      	b.n	8002756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f9b1 	bl	8002ab2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f9c2 	bl	8002ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b04      	cmp	r3, #4
 8002768:	d122      	bne.n	80027b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b04      	cmp	r3, #4
 8002776:	d11b      	bne.n	80027b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0204 	mvn.w	r2, #4
 8002780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2202      	movs	r2, #2
 8002786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f995 	bl	8002ac6 <HAL_TIM_IC_CaptureCallback>
 800279c:	e005      	b.n	80027aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f987 	bl	8002ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f998 	bl	8002ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d122      	bne.n	8002804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d11b      	bne.n	8002804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0208 	mvn.w	r2, #8
 80027d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2204      	movs	r2, #4
 80027da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f96b 	bl	8002ac6 <HAL_TIM_IC_CaptureCallback>
 80027f0:	e005      	b.n	80027fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f95d 	bl	8002ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f96e 	bl	8002ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b10      	cmp	r3, #16
 8002810:	d122      	bne.n	8002858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b10      	cmp	r3, #16
 800281e:	d11b      	bne.n	8002858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0210 	mvn.w	r2, #16
 8002828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2208      	movs	r2, #8
 800282e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f941 	bl	8002ac6 <HAL_TIM_IC_CaptureCallback>
 8002844:	e005      	b.n	8002852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f933 	bl	8002ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f944 	bl	8002ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d10e      	bne.n	8002884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d107      	bne.n	8002884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0201 	mvn.w	r2, #1
 800287c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f90d 	bl	8002a9e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	2b80      	cmp	r3, #128	; 0x80
 8002890:	d10e      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289c:	2b80      	cmp	r3, #128	; 0x80
 800289e:	d107      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fabc 	bl	8002e28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d107      	bne.n	80028dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f909 	bl	8002aee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d107      	bne.n	8002908 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0220 	mvn.w	r2, #32
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fa86 	bl	8002e14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_TIM_ConfigClockSource+0x1c>
 8002928:	2302      	movs	r3, #2
 800292a:	e0b4      	b.n	8002a96 <HAL_TIM_ConfigClockSource+0x186>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800294a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002964:	d03e      	beq.n	80029e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296a:	f200 8087 	bhi.w	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002972:	f000 8086 	beq.w	8002a82 <HAL_TIM_ConfigClockSource+0x172>
 8002976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297a:	d87f      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b70      	cmp	r3, #112	; 0x70
 800297e:	d01a      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002980:	2b70      	cmp	r3, #112	; 0x70
 8002982:	d87b      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 8002984:	2b60      	cmp	r3, #96	; 0x60
 8002986:	d050      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x11a>
 8002988:	2b60      	cmp	r3, #96	; 0x60
 800298a:	d877      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 800298c:	2b50      	cmp	r3, #80	; 0x50
 800298e:	d03c      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0xfa>
 8002990:	2b50      	cmp	r3, #80	; 0x50
 8002992:	d873      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d058      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x13a>
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d86f      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 800299c:	2b30      	cmp	r3, #48	; 0x30
 800299e:	d064      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x15a>
 80029a0:	2b30      	cmp	r3, #48	; 0x30
 80029a2:	d86b      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d060      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x15a>
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d867      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d05c      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x15a>
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d05a      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x15a>
 80029b4:	e062      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6899      	ldr	r1, [r3, #8]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f000 f997 	bl	8002cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	609a      	str	r2, [r3, #8]
      break;
 80029e2:	e04f      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	6899      	ldr	r1, [r3, #8]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f000 f980 	bl	8002cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a06:	609a      	str	r2, [r3, #8]
      break;
 8002a08:	e03c      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f000 f8f4 	bl	8002c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2150      	movs	r1, #80	; 0x50
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f94d 	bl	8002cc2 <TIM_ITRx_SetConfig>
      break;
 8002a28:	e02c      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f000 f913 	bl	8002c62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2160      	movs	r1, #96	; 0x60
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f93d 	bl	8002cc2 <TIM_ITRx_SetConfig>
      break;
 8002a48:	e01c      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f000 f8d4 	bl	8002c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2140      	movs	r1, #64	; 0x40
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f92d 	bl	8002cc2 <TIM_ITRx_SetConfig>
      break;
 8002a68:	e00c      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4619      	mov	r1, r3
 8002a74:	4610      	mov	r0, r2
 8002a76:	f000 f924 	bl	8002cc2 <TIM_ITRx_SetConfig>
      break;
 8002a7a:	e003      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a80:	e000      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a34      	ldr	r2, [pc, #208]	; (8002be8 <TIM_Base_SetConfig+0xe4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d00f      	beq.n	8002b3c <TIM_Base_SetConfig+0x38>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b22:	d00b      	beq.n	8002b3c <TIM_Base_SetConfig+0x38>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a31      	ldr	r2, [pc, #196]	; (8002bec <TIM_Base_SetConfig+0xe8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d007      	beq.n	8002b3c <TIM_Base_SetConfig+0x38>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a30      	ldr	r2, [pc, #192]	; (8002bf0 <TIM_Base_SetConfig+0xec>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d003      	beq.n	8002b3c <TIM_Base_SetConfig+0x38>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a2f      	ldr	r2, [pc, #188]	; (8002bf4 <TIM_Base_SetConfig+0xf0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d108      	bne.n	8002b4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <TIM_Base_SetConfig+0xe4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01b      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d017      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a22      	ldr	r2, [pc, #136]	; (8002bec <TIM_Base_SetConfig+0xe8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <TIM_Base_SetConfig+0xec>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00f      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a20      	ldr	r2, [pc, #128]	; (8002bf4 <TIM_Base_SetConfig+0xf0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00b      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1f      	ldr	r2, [pc, #124]	; (8002bf8 <TIM_Base_SetConfig+0xf4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1e      	ldr	r2, [pc, #120]	; (8002bfc <TIM_Base_SetConfig+0xf8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d003      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <TIM_Base_SetConfig+0xfc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d108      	bne.n	8002ba0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a08      	ldr	r2, [pc, #32]	; (8002be8 <TIM_Base_SetConfig+0xe4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d103      	bne.n	8002bd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	615a      	str	r2, [r3, #20]
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40010000 	.word	0x40010000
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40000c00 	.word	0x40000c00
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	40014400 	.word	0x40014400
 8002c00:	40014800 	.word	0x40014800

08002c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f023 0201 	bic.w	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f023 030a 	bic.w	r3, r3, #10
 8002c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b087      	sub	sp, #28
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f023 0210 	bic.w	r2, r3, #16
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	031b      	lsls	r3, r3, #12
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f043 0307 	orr.w	r3, r3, #7
 8002ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	609a      	str	r2, [r3, #8]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	021a      	lsls	r2, r3, #8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	609a      	str	r2, [r3, #8]
}
 8002d2c:	bf00      	nop
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e050      	b.n	8002df2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d018      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9c:	d013      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a16      	ldr	r2, [pc, #88]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10c      	bne.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40010000 	.word	0x40010000
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40000800 	.word	0x40000800
 8002e0c:	40000c00 	.word	0x40000c00
 8002e10:	40014000 	.word	0x40014000

08002e14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e03f      	b.n	8002ece <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fd fee4 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2224      	movs	r2, #36	; 0x24
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fe2b 	bl	8003adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ea4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d11d      	bne.n	8002f2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_UART_Receive_IT+0x26>
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e016      	b.n	8002f2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Receive_IT+0x38>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e00f      	b.n	8002f2e <HAL_UART_Receive_IT+0x58>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fbd9 	bl	80036da <UART_Start_Receive_IT>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	e000      	b.n	8002f2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002f2c:	2302      	movs	r3, #2
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08c      	sub	sp, #48	; 0x30
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	4613      	mov	r3, r2
 8002f44:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d165      	bne.n	800301e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_UART_Transmit_DMA+0x26>
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e05e      	b.n	8003020 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_UART_Transmit_DMA+0x38>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e057      	b.n	8003020 <HAL_UART_Transmit_DMA+0xe8>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	88fa      	ldrh	r2, [r7, #6]
 8002f82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2221      	movs	r2, #33	; 0x21
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9c:	4a22      	ldr	r2, [pc, #136]	; (8003028 <HAL_UART_Transmit_DMA+0xf0>)
 8002f9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa4:	4a21      	ldr	r2, [pc, #132]	; (800302c <HAL_UART_Transmit_DMA+0xf4>)
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fac:	4a20      	ldr	r2, [pc, #128]	; (8003030 <HAL_UART_Transmit_DMA+0xf8>)
 8002fae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002fb8:	f107 0308 	add.w	r3, r7, #8
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	461a      	mov	r2, r3
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	f7fe f968 	bl	80012a4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fdc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3314      	adds	r3, #20
 8002fec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003006:	627a      	str	r2, [r7, #36]	; 0x24
 8003008:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	6a39      	ldr	r1, [r7, #32]
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	e841 2300 	strex	r3, r2, [r1]
 8003012:	61fb      	str	r3, [r7, #28]
   return(result);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e5      	bne.n	8002fe6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3730      	adds	r7, #48	; 0x30
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	08003591 	.word	0x08003591
 800302c:	0800362b 	.word	0x0800362b
 8003030:	08003647 	.word	0x08003647

08003034 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b0ba      	sub	sp, #232	; 0xe8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003060:	2300      	movs	r3, #0
 8003062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10f      	bne.n	800309a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800307a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_UART_IRQHandler+0x66>
 8003086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fc66 	bl	8003964 <UART_Receive_IT>
      return;
 8003098:	e256      	b.n	8003548 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800309a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80de 	beq.w	8003260 <HAL_UART_IRQHandler+0x22c>
 80030a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80d1 	beq.w	8003260 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00b      	beq.n	80030e2 <HAL_UART_IRQHandler+0xae>
 80030ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00b      	beq.n	8003106 <HAL_UART_IRQHandler+0xd2>
 80030ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f043 0202 	orr.w	r2, r3, #2
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_UART_IRQHandler+0xf6>
 8003112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d005      	beq.n	800312a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f043 0204 	orr.w	r2, r3, #4
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d011      	beq.n	800315a <HAL_UART_IRQHandler+0x126>
 8003136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d105      	bne.n	800314e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f043 0208 	orr.w	r2, r3, #8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 81ed 	beq.w	800353e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_UART_IRQHandler+0x14e>
 8003170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fbf1 	bl	8003964 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b40      	cmp	r3, #64	; 0x40
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d103      	bne.n	80031ae <HAL_UART_IRQHandler+0x17a>
 80031a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d04f      	beq.n	800324e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 faf9 	bl	80037a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d141      	bne.n	8003246 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3314      	adds	r3, #20
 80031ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031fe:	e841 2300 	strex	r3, r2, [r1]
 8003202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1d9      	bne.n	80031c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	2b00      	cmp	r3, #0
 8003214:	d013      	beq.n	800323e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	4a7d      	ldr	r2, [pc, #500]	; (8003410 <HAL_UART_IRQHandler+0x3dc>)
 800321c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe f906 	bl	8001434 <HAL_DMA_Abort_IT>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d016      	beq.n	800325c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003238:	4610      	mov	r0, r2
 800323a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323c:	e00e      	b.n	800325c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f990 	bl	8003564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	e00a      	b.n	800325c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f98c 	bl	8003564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	e006      	b.n	800325c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f988 	bl	8003564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800325a:	e170      	b.n	800353e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	bf00      	nop
    return;
 800325e:	e16e      	b.n	800353e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	2b01      	cmp	r3, #1
 8003266:	f040 814a 	bne.w	80034fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8143 	beq.w	80034fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 813c 	beq.w	80034fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003286:	2300      	movs	r3, #0
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b40      	cmp	r3, #64	; 0x40
 80032a8:	f040 80b4 	bne.w	8003414 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8140 	beq.w	8003542 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032ca:	429a      	cmp	r2, r3
 80032cc:	f080 8139 	bcs.w	8003542 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e2:	f000 8088 	beq.w	80033f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	330c      	adds	r3, #12
 80032ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003312:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800331e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003322:	e841 2300 	strex	r3, r2, [r1]
 8003326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800332a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1d9      	bne.n	80032e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3314      	adds	r3, #20
 8003338:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3314      	adds	r3, #20
 8003352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003356:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800335a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800335e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e1      	bne.n	8003332 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3314      	adds	r3, #20
 8003374:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003378:	e853 3f00 	ldrex	r3, [r3]
 800337c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800337e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3314      	adds	r3, #20
 800338e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003392:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003394:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003396:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003398:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e3      	bne.n	800336e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c6:	f023 0310 	bic.w	r3, r3, #16
 80033ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80033da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e3      	bne.n	80033b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd ffaf 	bl	8001354 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033fe:	b29b      	uxth	r3, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	b29b      	uxth	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f8b6 	bl	8003578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800340c:	e099      	b.n	8003542 <HAL_UART_IRQHandler+0x50e>
 800340e:	bf00      	nop
 8003410:	0800386d 	.word	0x0800386d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800341c:	b29b      	uxth	r3, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 808b 	beq.w	8003546 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8086 	beq.w	8003546 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800344a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003450:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	330c      	adds	r3, #12
 800345a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800345e:	647a      	str	r2, [r7, #68]	; 0x44
 8003460:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800346c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e3      	bne.n	800343a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3314      	adds	r3, #20
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	623b      	str	r3, [r7, #32]
   return(result);
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3314      	adds	r3, #20
 8003492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003496:	633a      	str	r2, [r7, #48]	; 0x30
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800349c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e3      	bne.n	8003472 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0310 	bic.w	r3, r3, #16
 80034ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034dc:	61fa      	str	r2, [r7, #28]
 80034de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	69b9      	ldr	r1, [r7, #24]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	e841 2300 	strex	r3, r2, [r1]
 80034e8:	617b      	str	r3, [r7, #20]
   return(result);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e3      	bne.n	80034b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f83e 	bl	8003578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034fc:	e023      	b.n	8003546 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_UART_IRQHandler+0x4ea>
 800350a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f9bc 	bl	8003894 <UART_Transmit_IT>
    return;
 800351c:	e014      	b.n	8003548 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00e      	beq.n	8003548 <HAL_UART_IRQHandler+0x514>
 800352a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9fc 	bl	8003934 <UART_EndTransmit_IT>
    return;
 800353c:	e004      	b.n	8003548 <HAL_UART_IRQHandler+0x514>
    return;
 800353e:	bf00      	nop
 8003540:	e002      	b.n	8003548 <HAL_UART_IRQHandler+0x514>
      return;
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <HAL_UART_IRQHandler+0x514>
      return;
 8003546:	bf00      	nop
  }
}
 8003548:	37e8      	adds	r7, #232	; 0xe8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop

08003550 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b090      	sub	sp, #64	; 0x40
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d137      	bne.n	800361c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80035ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ae:	2200      	movs	r2, #0
 80035b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3314      	adds	r3, #20
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	623b      	str	r3, [r7, #32]
   return(result);
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3314      	adds	r3, #20
 80035d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035d2:	633a      	str	r2, [r7, #48]	; 0x30
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e5      	bne.n	80035b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	330c      	adds	r3, #12
 80035ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035fc:	637b      	str	r3, [r7, #52]	; 0x34
 80035fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003606:	61fa      	str	r2, [r7, #28]
 8003608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	69b9      	ldr	r1, [r7, #24]
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	617b      	str	r3, [r7, #20]
   return(result);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e5      	bne.n	80035e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800361a:	e002      	b.n	8003622 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800361c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800361e:	f7fd fa8f 	bl	8000b40 <HAL_UART_TxCpltCallback>
}
 8003622:	bf00      	nop
 8003624:	3740      	adds	r7, #64	; 0x40
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff ff89 	bl	8003550 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	2b80      	cmp	r3, #128	; 0x80
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b21      	cmp	r3, #33	; 0x21
 8003678:	d108      	bne.n	800368c <UART_DMAError+0x46>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2200      	movs	r2, #0
 8003684:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003686:	68b8      	ldr	r0, [r7, #8]
 8003688:	f000 f865 	bl	8003756 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	bf0c      	ite	eq
 800369a:	2301      	moveq	r3, #1
 800369c:	2300      	movne	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b22      	cmp	r3, #34	; 0x22
 80036ac:	d108      	bne.n	80036c0 <UART_DMAError+0x7a>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2200      	movs	r2, #0
 80036b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80036ba:	68b8      	ldr	r0, [r7, #8]
 80036bc:	f000 f873 	bl	80037a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f043 0210 	orr.w	r2, r3, #16
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036cc:	68b8      	ldr	r0, [r7, #8]
 80036ce:	f7ff ff49 	bl	8003564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	4613      	mov	r3, r2
 80036e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2222      	movs	r2, #34	; 0x22
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003726:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695a      	ldr	r2, [r3, #20]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0220 	orr.w	r2, r2, #32
 8003746:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003756:	b480      	push	{r7}
 8003758:	b089      	sub	sp, #36	; 0x24
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	330c      	adds	r3, #12
 8003764:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	60bb      	str	r3, [r7, #8]
   return(result);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	61ba      	str	r2, [r7, #24]
 8003780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	6979      	ldr	r1, [r7, #20]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	613b      	str	r3, [r7, #16]
   return(result);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e5      	bne.n	800375e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800379a:	bf00      	nop
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b095      	sub	sp, #84	; 0x54
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	330c      	adds	r3, #12
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ce:	643a      	str	r2, [r7, #64]	; 0x40
 80037d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e5      	bne.n	80037ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3314      	adds	r3, #20
 80037e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3314      	adds	r3, #20
 8003800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003802:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e5      	bne.n	80037e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	2b01      	cmp	r3, #1
 800381c:	d119      	bne.n	8003852 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	330c      	adds	r3, #12
 8003824:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	60bb      	str	r3, [r7, #8]
   return(result);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f023 0310 	bic.w	r3, r3, #16
 8003834:	647b      	str	r3, [r7, #68]	; 0x44
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800383e:	61ba      	str	r2, [r7, #24]
 8003840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	6979      	ldr	r1, [r7, #20]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	e841 2300 	strex	r3, r2, [r1]
 800384a:	613b      	str	r3, [r7, #16]
   return(result);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1e5      	bne.n	800381e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003860:	bf00      	nop
 8003862:	3754      	adds	r7, #84	; 0x54
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f7ff fe6c 	bl	8003564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b21      	cmp	r3, #33	; 0x21
 80038a6:	d13e      	bne.n	8003926 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b0:	d114      	bne.n	80038dc <UART_Transmit_IT+0x48>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d110      	bne.n	80038dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	1c9a      	adds	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	621a      	str	r2, [r3, #32]
 80038da:	e008      	b.n	80038ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	1c59      	adds	r1, r3, #1
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6211      	str	r1, [r2, #32]
 80038e6:	781a      	ldrb	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	4619      	mov	r1, r3
 80038fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003910:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003920:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	e000      	b.n	8003928 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003926:	2302      	movs	r3, #2
  }
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fd f8f3 	bl	8000b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08c      	sub	sp, #48	; 0x30
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b22      	cmp	r3, #34	; 0x22
 8003976:	f040 80ab 	bne.w	8003ad0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003982:	d117      	bne.n	80039b4 <UART_Receive_IT+0x50>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d113      	bne.n	80039b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800398c:	2300      	movs	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	1c9a      	adds	r2, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	629a      	str	r2, [r3, #40]	; 0x28
 80039b2:	e026      	b.n	8003a02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c6:	d007      	beq.n	80039d8 <UART_Receive_IT+0x74>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <UART_Receive_IT+0x82>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e008      	b.n	80039f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d15a      	bne.n	8003acc <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0220 	bic.w	r2, r2, #32
 8003a24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d135      	bne.n	8003ac2 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f023 0310 	bic.w	r3, r3, #16
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7c:	623a      	str	r2, [r7, #32]
 8003a7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	69f9      	ldr	r1, [r7, #28]
 8003a82:	6a3a      	ldr	r2, [r7, #32]
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e5      	bne.n	8003a5c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d10a      	bne.n	8003ab4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fd5c 	bl	8003578 <HAL_UARTEx_RxEventCallback>
 8003ac0:	e002      	b.n	8003ac8 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fc ffec 	bl	8000aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e002      	b.n	8003ad2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e000      	b.n	8003ad2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3730      	adds	r7, #48	; 0x30
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae0:	b0c0      	sub	sp, #256	; 0x100
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	68d9      	ldr	r1, [r3, #12]
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	ea40 0301 	orr.w	r3, r0, r1
 8003b04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b34:	f021 010c 	bic.w	r1, r1, #12
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b42:	430b      	orrs	r3, r1
 8003b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b56:	6999      	ldr	r1, [r3, #24]
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	ea40 0301 	orr.w	r3, r0, r1
 8003b62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b8f      	ldr	r3, [pc, #572]	; (8003da8 <UART_SetConfig+0x2cc>)
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d005      	beq.n	8003b7c <UART_SetConfig+0xa0>
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b8d      	ldr	r3, [pc, #564]	; (8003dac <UART_SetConfig+0x2d0>)
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d104      	bne.n	8003b86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b7c:	f7fe fcfa 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 8003b80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b84:	e003      	b.n	8003b8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b86:	f7fe fce1 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 8003b8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b98:	f040 810c 	bne.w	8003db4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ba6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003baa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bae:	4622      	mov	r2, r4
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	1891      	adds	r1, r2, r2
 8003bb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bb6:	415b      	adcs	r3, r3
 8003bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	eb12 0801 	adds.w	r8, r2, r1
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	eb43 0901 	adc.w	r9, r3, r1
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bde:	4690      	mov	r8, r2
 8003be0:	4699      	mov	r9, r3
 8003be2:	4623      	mov	r3, r4
 8003be4:	eb18 0303 	adds.w	r3, r8, r3
 8003be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bec:	462b      	mov	r3, r5
 8003bee:	eb49 0303 	adc.w	r3, r9, r3
 8003bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	18db      	adds	r3, r3, r3
 8003c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c10:	4613      	mov	r3, r2
 8003c12:	eb42 0303 	adc.w	r3, r2, r3
 8003c16:	657b      	str	r3, [r7, #84]	; 0x54
 8003c18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c20:	f7fc fae8 	bl	80001f4 <__aeabi_uldivmod>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <UART_SetConfig+0x2d4>)
 8003c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	011c      	lsls	r4, r3, #4
 8003c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c44:	4642      	mov	r2, r8
 8003c46:	464b      	mov	r3, r9
 8003c48:	1891      	adds	r1, r2, r2
 8003c4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c4c:	415b      	adcs	r3, r3
 8003c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c54:	4641      	mov	r1, r8
 8003c56:	eb12 0a01 	adds.w	sl, r2, r1
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c74:	4692      	mov	sl, r2
 8003c76:	469b      	mov	fp, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c82:	464b      	mov	r3, r9
 8003c84:	eb4b 0303 	adc.w	r3, fp, r3
 8003c88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	18db      	adds	r3, r3, r3
 8003ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	eb42 0303 	adc.w	r3, r2, r3
 8003cac:	647b      	str	r3, [r7, #68]	; 0x44
 8003cae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cb6:	f7fc fa9d 	bl	80001f4 <__aeabi_uldivmod>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <UART_SetConfig+0x2d4>)
 8003cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2264      	movs	r2, #100	; 0x64
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	1acb      	subs	r3, r1, r3
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cd6:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <UART_SetConfig+0x2d4>)
 8003cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ce4:	441c      	add	r4, r3
 8003ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	1891      	adds	r1, r2, r2
 8003cfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d00:	415b      	adcs	r3, r3
 8003d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d08:	4641      	mov	r1, r8
 8003d0a:	1851      	adds	r1, r2, r1
 8003d0c:	6339      	str	r1, [r7, #48]	; 0x30
 8003d0e:	4649      	mov	r1, r9
 8003d10:	414b      	adcs	r3, r1
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d20:	4659      	mov	r1, fp
 8003d22:	00cb      	lsls	r3, r1, #3
 8003d24:	4651      	mov	r1, sl
 8003d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	00ca      	lsls	r2, r1, #3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	4642      	mov	r2, r8
 8003d36:	189b      	adds	r3, r3, r2
 8003d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	460a      	mov	r2, r1
 8003d40:	eb42 0303 	adc.w	r3, r2, r3
 8003d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	18db      	adds	r3, r3, r3
 8003d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d62:	4613      	mov	r3, r2
 8003d64:	eb42 0303 	adc.w	r3, r2, r3
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d72:	f7fc fa3f 	bl	80001f4 <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <UART_SetConfig+0x2d4>)
 8003d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	2164      	movs	r1, #100	; 0x64
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	3332      	adds	r3, #50	; 0x32
 8003d8e:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <UART_SetConfig+0x2d4>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	f003 0207 	and.w	r2, r3, #7
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4422      	add	r2, r4
 8003da2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003da4:	e105      	b.n	8003fb2 <UART_SetConfig+0x4d6>
 8003da6:	bf00      	nop
 8003da8:	40011000 	.word	0x40011000
 8003dac:	40011400 	.word	0x40011400
 8003db0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003dc6:	4642      	mov	r2, r8
 8003dc8:	464b      	mov	r3, r9
 8003dca:	1891      	adds	r1, r2, r2
 8003dcc:	6239      	str	r1, [r7, #32]
 8003dce:	415b      	adcs	r3, r3
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	1854      	adds	r4, r2, r1
 8003dda:	4649      	mov	r1, r9
 8003ddc:	eb43 0501 	adc.w	r5, r3, r1
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	00eb      	lsls	r3, r5, #3
 8003dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dee:	00e2      	lsls	r2, r4, #3
 8003df0:	4614      	mov	r4, r2
 8003df2:	461d      	mov	r5, r3
 8003df4:	4643      	mov	r3, r8
 8003df6:	18e3      	adds	r3, r4, r3
 8003df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	eb45 0303 	adc.w	r3, r5, r3
 8003e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e22:	4629      	mov	r1, r5
 8003e24:	008b      	lsls	r3, r1, #2
 8003e26:	4621      	mov	r1, r4
 8003e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	008a      	lsls	r2, r1, #2
 8003e30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e34:	f7fc f9de 	bl	80001f4 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4b60      	ldr	r3, [pc, #384]	; (8003fc0 <UART_SetConfig+0x4e4>)
 8003e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	011c      	lsls	r4, r3, #4
 8003e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	1891      	adds	r1, r2, r2
 8003e5e:	61b9      	str	r1, [r7, #24]
 8003e60:	415b      	adcs	r3, r3
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e68:	4641      	mov	r1, r8
 8003e6a:	1851      	adds	r1, r2, r1
 8003e6c:	6139      	str	r1, [r7, #16]
 8003e6e:	4649      	mov	r1, r9
 8003e70:	414b      	adcs	r3, r1
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e80:	4659      	mov	r1, fp
 8003e82:	00cb      	lsls	r3, r1, #3
 8003e84:	4651      	mov	r1, sl
 8003e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e8a:	4651      	mov	r1, sl
 8003e8c:	00ca      	lsls	r2, r1, #3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	4642      	mov	r2, r8
 8003e96:	189b      	adds	r3, r3, r2
 8003e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	460a      	mov	r2, r1
 8003ea0:	eb42 0303 	adc.w	r3, r2, r3
 8003ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	008b      	lsls	r3, r1, #2
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eca:	4641      	mov	r1, r8
 8003ecc:	008a      	lsls	r2, r1, #2
 8003ece:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ed2:	f7fc f98f 	bl	80001f4 <__aeabi_uldivmod>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <UART_SetConfig+0x4e4>)
 8003edc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	2164      	movs	r1, #100	; 0x64
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	3332      	adds	r3, #50	; 0x32
 8003eee:	4a34      	ldr	r2, [pc, #208]	; (8003fc0 <UART_SetConfig+0x4e4>)
 8003ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003efa:	441c      	add	r4, r3
 8003efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f00:	2200      	movs	r2, #0
 8003f02:	673b      	str	r3, [r7, #112]	; 0x70
 8003f04:	677a      	str	r2, [r7, #116]	; 0x74
 8003f06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f0a:	4642      	mov	r2, r8
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	1891      	adds	r1, r2, r2
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	415b      	adcs	r3, r3
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	1851      	adds	r1, r2, r1
 8003f1e:	6039      	str	r1, [r7, #0]
 8003f20:	4649      	mov	r1, r9
 8003f22:	414b      	adcs	r3, r1
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f32:	4659      	mov	r1, fp
 8003f34:	00cb      	lsls	r3, r1, #3
 8003f36:	4651      	mov	r1, sl
 8003f38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f3c:	4651      	mov	r1, sl
 8003f3e:	00ca      	lsls	r2, r1, #3
 8003f40:	4610      	mov	r0, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	4603      	mov	r3, r0
 8003f46:	4642      	mov	r2, r8
 8003f48:	189b      	adds	r3, r3, r2
 8003f4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f4c:	464b      	mov	r3, r9
 8003f4e:	460a      	mov	r2, r1
 8003f50:	eb42 0303 	adc.w	r3, r2, r3
 8003f54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f60:	667a      	str	r2, [r7, #100]	; 0x64
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f6e:	4649      	mov	r1, r9
 8003f70:	008b      	lsls	r3, r1, #2
 8003f72:	4641      	mov	r1, r8
 8003f74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f78:	4641      	mov	r1, r8
 8003f7a:	008a      	lsls	r2, r1, #2
 8003f7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f80:	f7fc f938 	bl	80001f4 <__aeabi_uldivmod>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <UART_SetConfig+0x4e4>)
 8003f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	2164      	movs	r1, #100	; 0x64
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	3332      	adds	r3, #50	; 0x32
 8003f9c:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <UART_SetConfig+0x4e4>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	f003 020f 	and.w	r2, r3, #15
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4422      	add	r2, r4
 8003fb0:	609a      	str	r2, [r3, #8]
}
 8003fb2:	bf00      	nop
 8003fb4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fbe:	bf00      	nop
 8003fc0:	51eb851f 	.word	0x51eb851f

08003fc4 <__NVIC_SetPriority>:
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	6039      	str	r1, [r7, #0]
 8003fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	db0a      	blt.n	8003fee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	490c      	ldr	r1, [pc, #48]	; (8004010 <__NVIC_SetPriority+0x4c>)
 8003fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe2:	0112      	lsls	r2, r2, #4
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fec:	e00a      	b.n	8004004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4908      	ldr	r1, [pc, #32]	; (8004014 <__NVIC_SetPriority+0x50>)
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	3b04      	subs	r3, #4
 8003ffc:	0112      	lsls	r2, r2, #4
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	440b      	add	r3, r1
 8004002:	761a      	strb	r2, [r3, #24]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	e000e100 	.word	0xe000e100
 8004014:	e000ed00 	.word	0xe000ed00

08004018 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800401c:	2100      	movs	r1, #0
 800401e:	f06f 0004 	mvn.w	r0, #4
 8004022:	f7ff ffcf 	bl	8003fc4 <__NVIC_SetPriority>
#endif
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004032:	f3ef 8305 	mrs	r3, IPSR
 8004036:	603b      	str	r3, [r7, #0]
  return(result);
 8004038:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800403e:	f06f 0305 	mvn.w	r3, #5
 8004042:	607b      	str	r3, [r7, #4]
 8004044:	e00c      	b.n	8004060 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <osKernelInitialize+0x44>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d105      	bne.n	800405a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <osKernelInitialize+0x44>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004054:	2300      	movs	r3, #0
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	e002      	b.n	8004060 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295
 800405e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004060:	687b      	ldr	r3, [r7, #4]
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	2000014c 	.word	0x2000014c

08004074 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800407a:	f3ef 8305 	mrs	r3, IPSR
 800407e:	603b      	str	r3, [r7, #0]
  return(result);
 8004080:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004086:	f06f 0305 	mvn.w	r3, #5
 800408a:	607b      	str	r3, [r7, #4]
 800408c:	e010      	b.n	80040b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800408e:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <osKernelStart+0x48>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d109      	bne.n	80040aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004096:	f7ff ffbf 	bl	8004018 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <osKernelStart+0x48>)
 800409c:	2202      	movs	r2, #2
 800409e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80040a0:	f001 f8a6 	bl	80051f0 <vTaskStartScheduler>
      stat = osOK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	e002      	b.n	80040b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80040aa:	f04f 33ff 	mov.w	r3, #4294967295
 80040ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040b0:	687b      	ldr	r3, [r7, #4]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	2000014c 	.word	0x2000014c

080040c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08e      	sub	sp, #56	; 0x38
 80040c4:	af04      	add	r7, sp, #16
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040d0:	f3ef 8305 	mrs	r3, IPSR
 80040d4:	617b      	str	r3, [r7, #20]
  return(result);
 80040d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d17e      	bne.n	80041da <osThreadNew+0x11a>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d07b      	beq.n	80041da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80040e6:	2318      	movs	r3, #24
 80040e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295
 80040f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d045      	beq.n	8004186 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <osThreadNew+0x48>
        name = attr->name;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <osThreadNew+0x6e>
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b38      	cmp	r3, #56	; 0x38
 8004120:	d805      	bhi.n	800412e <osThreadNew+0x6e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <osThreadNew+0x72>
        return (NULL);
 800412e:	2300      	movs	r3, #0
 8004130:	e054      	b.n	80041dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00e      	beq.n	8004168 <osThreadNew+0xa8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b63      	cmp	r3, #99	; 0x63
 8004150:	d90a      	bls.n	8004168 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004156:	2b00      	cmp	r3, #0
 8004158:	d006      	beq.n	8004168 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <osThreadNew+0xa8>
        mem = 1;
 8004162:	2301      	movs	r3, #1
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e010      	b.n	800418a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10c      	bne.n	800418a <osThreadNew+0xca>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d108      	bne.n	800418a <osThreadNew+0xca>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <osThreadNew+0xca>
          mem = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	e001      	b.n	800418a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d110      	bne.n	80041b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004198:	9202      	str	r2, [sp, #8]
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	6a3a      	ldr	r2, [r7, #32]
 80041a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fe46 	bl	8004e38 <xTaskCreateStatic>
 80041ac:	4603      	mov	r3, r0
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	e013      	b.n	80041da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d110      	bne.n	80041da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fe91 	bl	8004ef2 <xTaskCreate>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d001      	beq.n	80041da <osThreadNew+0x11a>
            hTask = NULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041da:	693b      	ldr	r3, [r7, #16]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3728      	adds	r7, #40	; 0x28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ec:	f3ef 8305 	mrs	r3, IPSR
 80041f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80041f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <osDelay+0x1c>
    stat = osErrorISR;
 80041f8:	f06f 0305 	mvn.w	r3, #5
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	e007      	b.n	8004210 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <osDelay+0x2c>
      vTaskDelay(ticks);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 ffbc 	bl	8005188 <vTaskDelay>
    }
  }

  return (stat);
 8004210:	68fb      	ldr	r3, [r7, #12]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a07      	ldr	r2, [pc, #28]	; (8004248 <vApplicationGetIdleTaskMemory+0x2c>)
 800422c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4a06      	ldr	r2, [pc, #24]	; (800424c <vApplicationGetIdleTaskMemory+0x30>)
 8004232:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2280      	movs	r2, #128	; 0x80
 8004238:	601a      	str	r2, [r3, #0]
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000150 	.word	0x20000150
 800424c:	200001b4 	.word	0x200001b4

08004250 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a07      	ldr	r2, [pc, #28]	; (800427c <vApplicationGetTimerTaskMemory+0x2c>)
 8004260:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4a06      	ldr	r2, [pc, #24]	; (8004280 <vApplicationGetTimerTaskMemory+0x30>)
 8004266:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800426e:	601a      	str	r2, [r3, #0]
}
 8004270:	bf00      	nop
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	200003b4 	.word	0x200003b4
 8004280:	20000418 	.word	0x20000418

08004284 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f103 0208 	add.w	r2, r3, #8
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f04f 32ff 	mov.w	r2, #4294967295
 800429c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f103 0208 	add.w	r2, r3, #8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f103 0208 	add.w	r2, r3, #8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
}
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d103      	bne.n	8004346 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e00c      	b.n	8004360 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3308      	adds	r3, #8
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	e002      	b.n	8004354 <vListInsert+0x2e>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	429a      	cmp	r2, r3
 800435e:	d2f6      	bcs.n	800434e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	601a      	str	r2, [r3, #0]
}
 800438c:	bf00      	nop
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6892      	ldr	r2, [r2, #8]
 80043ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6852      	ldr	r2, [r2, #4]
 80043b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d103      	bne.n	80043cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	1e5a      	subs	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004416:	f002 f8ad 	bl	8006574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	68f9      	ldr	r1, [r7, #12]
 8004424:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	441a      	add	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	3b01      	subs	r3, #1
 8004448:	68f9      	ldr	r1, [r7, #12]
 800444a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	441a      	add	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	22ff      	movs	r2, #255	; 0xff
 800445a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	22ff      	movs	r2, #255	; 0xff
 8004462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d114      	bne.n	8004496 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01a      	beq.n	80044aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3310      	adds	r3, #16
 8004478:	4618      	mov	r0, r3
 800447a:	f001 f95f 	bl	800573c <xTaskRemoveFromEventList>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d012      	beq.n	80044aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <xQueueGenericReset+0xcc>)
 8004486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	e009      	b.n	80044aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3310      	adds	r3, #16
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fef2 	bl	8004284 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3324      	adds	r3, #36	; 0x24
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff feed 	bl	8004284 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044aa:	f002 f893 	bl	80065d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044ae:	2301      	movs	r3, #1
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08e      	sub	sp, #56	; 0x38
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044e2:	bf00      	nop
 80044e4:	e7fe      	b.n	80044e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044fe:	bf00      	nop
 8004500:	e7fe      	b.n	8004500 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <xQueueGenericCreateStatic+0x52>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <xQueueGenericCreateStatic+0x56>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <xQueueGenericCreateStatic+0x58>
 8004512:	2300      	movs	r3, #0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	623b      	str	r3, [r7, #32]
}
 800452a:	bf00      	nop
 800452c:	e7fe      	b.n	800452c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d102      	bne.n	800453a <xQueueGenericCreateStatic+0x7e>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <xQueueGenericCreateStatic+0x82>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <xQueueGenericCreateStatic+0x84>
 800453e:	2300      	movs	r3, #0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	61fb      	str	r3, [r7, #28]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800455a:	2350      	movs	r3, #80	; 0x50
 800455c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b50      	cmp	r3, #80	; 0x50
 8004562:	d00a      	beq.n	800457a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	61bb      	str	r3, [r7, #24]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800457a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00d      	beq.n	80045a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800458e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	4613      	mov	r3, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f83f 	bl	8004620 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3730      	adds	r7, #48	; 0x30
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	613b      	str	r3, [r7, #16]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	3350      	adds	r3, #80	; 0x50
 80045e4:	4618      	mov	r0, r3
 80045e6:	f002 f8e7 	bl	80067b8 <pvPortMalloc>
 80045ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d011      	beq.n	8004616 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	3350      	adds	r3, #80	; 0x50
 80045fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004604:	79fa      	ldrb	r2, [r7, #7]
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f805 	bl	8004620 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004616:	69bb      	ldr	r3, [r7, #24]
	}
 8004618:	4618      	mov	r0, r3
 800461a:	3720      	adds	r7, #32
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d103      	bne.n	800463c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e002      	b.n	8004642 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800464e:	2101      	movs	r1, #1
 8004650:	69b8      	ldr	r0, [r7, #24]
 8004652:	f7ff fecb 	bl	80043ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08e      	sub	sp, #56	; 0x38
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004676:	2300      	movs	r3, #0
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xQueueGenericSend+0x32>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <xQueueGenericSend+0x40>
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <xQueueGenericSend+0x44>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <xQueueGenericSend+0x46>
 80046ac:	2300      	movs	r3, #0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <xQueueGenericSend+0x60>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d103      	bne.n	80046d6 <xQueueGenericSend+0x6e>
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <xQueueGenericSend+0x72>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <xQueueGenericSend+0x74>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	623b      	str	r3, [r7, #32]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046f6:	f001 f9df 	bl	8005ab8 <xTaskGetSchedulerState>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <xQueueGenericSend+0x9e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <xQueueGenericSend+0xa2>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <xQueueGenericSend+0xa4>
 800470a:	2300      	movs	r3, #0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <xQueueGenericSend+0xbe>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	61fb      	str	r3, [r7, #28]
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004726:	f001 ff25 	bl	8006574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	429a      	cmp	r2, r3
 8004734:	d302      	bcc.n	800473c <xQueueGenericSend+0xd4>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d129      	bne.n	8004790 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004742:	f000 fa0b 	bl	8004b5c <prvCopyDataToQueue>
 8004746:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	2b00      	cmp	r3, #0
 800474e:	d010      	beq.n	8004772 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	3324      	adds	r3, #36	; 0x24
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fff1 	bl	800573c <xTaskRemoveFromEventList>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d013      	beq.n	8004788 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004760:	4b3f      	ldr	r3, [pc, #252]	; (8004860 <xQueueGenericSend+0x1f8>)
 8004762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	e00a      	b.n	8004788 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004778:	4b39      	ldr	r3, [pc, #228]	; (8004860 <xQueueGenericSend+0x1f8>)
 800477a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004788:	f001 ff24 	bl	80065d4 <vPortExitCritical>
				return pdPASS;
 800478c:	2301      	movs	r3, #1
 800478e:	e063      	b.n	8004858 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004796:	f001 ff1d 	bl	80065d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800479a:	2300      	movs	r3, #0
 800479c:	e05c      	b.n	8004858 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800479e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047a4:	f107 0314 	add.w	r3, r7, #20
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 f82b 	bl	8005804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047ae:	2301      	movs	r3, #1
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047b2:	f001 ff0f 	bl	80065d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047b6:	f000 fd83 	bl	80052c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047ba:	f001 fedb 	bl	8006574 <vPortEnterCritical>
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047c4:	b25b      	sxtb	r3, r3
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d103      	bne.n	80047d4 <xQueueGenericSend+0x16c>
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047da:	b25b      	sxtb	r3, r3
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d103      	bne.n	80047ea <xQueueGenericSend+0x182>
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ea:	f001 fef3 	bl	80065d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047ee:	1d3a      	adds	r2, r7, #4
 80047f0:	f107 0314 	add.w	r3, r7, #20
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 f81a 	bl	8005830 <xTaskCheckForTimeOut>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d124      	bne.n	800484c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004804:	f000 faa2 	bl	8004d4c <prvIsQueueFull>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d018      	beq.n	8004840 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	3310      	adds	r3, #16
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	4611      	mov	r1, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f000 ff40 	bl	800569c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800481c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800481e:	f000 fa2d 	bl	8004c7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004822:	f000 fd5b 	bl	80052dc <xTaskResumeAll>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	f47f af7c 	bne.w	8004726 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800482e:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <xQueueGenericSend+0x1f8>)
 8004830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	e772      	b.n	8004726 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004842:	f000 fa1b 	bl	8004c7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004846:	f000 fd49 	bl	80052dc <xTaskResumeAll>
 800484a:	e76c      	b.n	8004726 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800484c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800484e:	f000 fa15 	bl	8004c7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004852:	f000 fd43 	bl	80052dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004856:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004858:	4618      	mov	r0, r3
 800485a:	3738      	adds	r7, #56	; 0x38
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	e000ed04 	.word	0xe000ed04

08004864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b090      	sub	sp, #64	; 0x40
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d103      	bne.n	80048a0 <xQueueGenericSendFromISR+0x3c>
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <xQueueGenericSendFromISR+0x40>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <xQueueGenericSendFromISR+0x42>
 80048a4:	2300      	movs	r3, #0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048bc:	bf00      	nop
 80048be:	e7fe      	b.n	80048be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d103      	bne.n	80048ce <xQueueGenericSendFromISR+0x6a>
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <xQueueGenericSendFromISR+0x6e>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <xQueueGenericSendFromISR+0x70>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	623b      	str	r3, [r7, #32]
}
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048ee:	f001 ff23 	bl	8006738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048f2:	f3ef 8211 	mrs	r2, BASEPRI
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	61fa      	str	r2, [r7, #28]
 8004908:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800490a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800490c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	429a      	cmp	r2, r3
 8004918:	d302      	bcc.n	8004920 <xQueueGenericSendFromISR+0xbc>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d12f      	bne.n	8004980 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004936:	f000 f911 	bl	8004b5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800493a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004942:	d112      	bne.n	800496a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	2b00      	cmp	r3, #0
 800494a:	d016      	beq.n	800497a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	3324      	adds	r3, #36	; 0x24
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fef3 	bl	800573c <xTaskRemoveFromEventList>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00e      	beq.n	800497a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00b      	beq.n	800497a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e007      	b.n	800497a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800496a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800496e:	3301      	adds	r3, #1
 8004970:	b2db      	uxtb	r3, r3
 8004972:	b25a      	sxtb	r2, r3
 8004974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800497a:	2301      	movs	r3, #1
 800497c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800497e:	e001      	b.n	8004984 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004980:	2300      	movs	r3, #0
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800498e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004992:	4618      	mov	r0, r3
 8004994:	3740      	adds	r7, #64	; 0x40
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08c      	sub	sp, #48	; 0x30
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <xQueueReceive+0x30>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	623b      	str	r3, [r7, #32]
}
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <xQueueReceive+0x3e>
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <xQueueReceive+0x42>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <xQueueReceive+0x44>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <xQueueReceive+0x5e>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	61fb      	str	r3, [r7, #28]
}
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049fa:	f001 f85d 	bl	8005ab8 <xTaskGetSchedulerState>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <xQueueReceive+0x6e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <xQueueReceive+0x72>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <xQueueReceive+0x74>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <xQueueReceive+0x8e>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	61bb      	str	r3, [r7, #24]
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a2a:	f001 fda3 	bl	8006574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d01f      	beq.n	8004a7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3e:	f000 f8f7 	bl	8004c30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	1e5a      	subs	r2, r3, #1
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00f      	beq.n	8004a72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	3310      	adds	r3, #16
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fe70 	bl	800573c <xTaskRemoveFromEventList>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a62:	4b3d      	ldr	r3, [pc, #244]	; (8004b58 <xQueueReceive+0x1bc>)
 8004a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a72:	f001 fdaf 	bl	80065d4 <vPortExitCritical>
				return pdPASS;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e069      	b.n	8004b4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a80:	f001 fda8 	bl	80065d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e062      	b.n	8004b4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a8e:	f107 0310 	add.w	r3, r7, #16
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 feb6 	bl	8005804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a9c:	f001 fd9a 	bl	80065d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004aa0:	f000 fc0e 	bl	80052c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004aa4:	f001 fd66 	bl	8006574 <vPortEnterCritical>
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aae:	b25b      	sxtb	r3, r3
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d103      	bne.n	8004abe <xQueueReceive+0x122>
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ac4:	b25b      	sxtb	r3, r3
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d103      	bne.n	8004ad4 <xQueueReceive+0x138>
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad4:	f001 fd7e 	bl	80065d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ad8:	1d3a      	adds	r2, r7, #4
 8004ada:	f107 0310 	add.w	r3, r7, #16
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fea5 	bl	8005830 <xTaskCheckForTimeOut>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d123      	bne.n	8004b34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aee:	f000 f917 	bl	8004d20 <prvIsQueueEmpty>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d017      	beq.n	8004b28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	3324      	adds	r3, #36	; 0x24
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fdcb 	bl	800569c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b08:	f000 f8b8 	bl	8004c7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b0c:	f000 fbe6 	bl	80052dc <xTaskResumeAll>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d189      	bne.n	8004a2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <xQueueReceive+0x1bc>)
 8004b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	e780      	b.n	8004a2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b2a:	f000 f8a7 	bl	8004c7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b2e:	f000 fbd5 	bl	80052dc <xTaskResumeAll>
 8004b32:	e77a      	b.n	8004a2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b36:	f000 f8a1 	bl	8004c7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b3a:	f000 fbcf 	bl	80052dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b40:	f000 f8ee 	bl	8004d20 <prvIsQueueEmpty>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f43f af6f 	beq.w	8004a2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3730      	adds	r7, #48	; 0x30
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10d      	bne.n	8004b96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d14d      	bne.n	8004c1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 ffb4 	bl	8005af4 <xTaskPriorityDisinherit>
 8004b8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	e043      	b.n	8004c1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d119      	bne.n	8004bd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6858      	ldr	r0, [r3, #4]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	f002 f814 	bl	8006bd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	441a      	add	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d32b      	bcc.n	8004c1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	e026      	b.n	8004c1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68d8      	ldr	r0, [r3, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	f001 fffa 	bl	8006bd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	425b      	negs	r3, r3
 8004bea:	441a      	add	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d207      	bcs.n	8004c0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	425b      	negs	r3, r3
 8004c06:	441a      	add	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d105      	bne.n	8004c1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c26:	697b      	ldr	r3, [r7, #20]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d018      	beq.n	8004c74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	441a      	add	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d303      	bcc.n	8004c64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68d9      	ldr	r1, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6838      	ldr	r0, [r7, #0]
 8004c70:	f001 ffb0 	bl	8006bd4 <memcpy>
	}
}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c84:	f001 fc76 	bl	8006574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c90:	e011      	b.n	8004cb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d012      	beq.n	8004cc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3324      	adds	r3, #36	; 0x24
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fd4c 	bl	800573c <xTaskRemoveFromEventList>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004caa:	f000 fe23 	bl	80058f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	dce9      	bgt.n	8004c92 <prvUnlockQueue+0x16>
 8004cbe:	e000      	b.n	8004cc2 <prvUnlockQueue+0x46>
					break;
 8004cc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	22ff      	movs	r2, #255	; 0xff
 8004cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004cca:	f001 fc83 	bl	80065d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cce:	f001 fc51 	bl	8006574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cda:	e011      	b.n	8004d00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d012      	beq.n	8004d0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3310      	adds	r3, #16
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fd27 	bl	800573c <xTaskRemoveFromEventList>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cf4:	f000 fdfe 	bl	80058f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cf8:	7bbb      	ldrb	r3, [r7, #14]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	dce9      	bgt.n	8004cdc <prvUnlockQueue+0x60>
 8004d08:	e000      	b.n	8004d0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	22ff      	movs	r2, #255	; 0xff
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d14:	f001 fc5e 	bl	80065d4 <vPortExitCritical>
}
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d28:	f001 fc24 	bl	8006574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e001      	b.n	8004d3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d3e:	f001 fc49 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 8004d42:	68fb      	ldr	r3, [r7, #12]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d54:	f001 fc0e 	bl	8006574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d102      	bne.n	8004d6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e001      	b.n	8004d6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d6e:	f001 fc31 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e014      	b.n	8004db6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d8c:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <vQueueAddToRegistry+0x50>)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10b      	bne.n	8004db0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d98:	490c      	ldr	r1, [pc, #48]	; (8004dcc <vQueueAddToRegistry+0x50>)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004da2:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <vQueueAddToRegistry+0x50>)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004dae:	e006      	b.n	8004dbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3301      	adds	r3, #1
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b07      	cmp	r3, #7
 8004dba:	d9e7      	bls.n	8004d8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000818 	.word	0x20000818

08004dd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004de0:	f001 fbc8 	bl	8006574 <vPortEnterCritical>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dea:	b25b      	sxtb	r3, r3
 8004dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df0:	d103      	bne.n	8004dfa <vQueueWaitForMessageRestricted+0x2a>
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e00:	b25b      	sxtb	r3, r3
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d103      	bne.n	8004e10 <vQueueWaitForMessageRestricted+0x40>
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e10:	f001 fbe0 	bl	80065d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d106      	bne.n	8004e2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	3324      	adds	r3, #36	; 0x24
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fc5d 	bl	80056e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e2a:	6978      	ldr	r0, [r7, #20]
 8004e2c:	f7ff ff26 	bl	8004c7c <prvUnlockQueue>
	}
 8004e30:	bf00      	nop
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08e      	sub	sp, #56	; 0x38
 8004e3c:	af04      	add	r7, sp, #16
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	623b      	str	r3, [r7, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <xTaskCreateStatic+0x46>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	61fb      	str	r3, [r7, #28]
}
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e7e:	2364      	movs	r3, #100	; 0x64
 8004e80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b64      	cmp	r3, #100	; 0x64
 8004e86:	d00a      	beq.n	8004e9e <xTaskCreateStatic+0x66>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	61bb      	str	r3, [r7, #24]
}
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01e      	beq.n	8004ee4 <xTaskCreateStatic+0xac>
 8004ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01b      	beq.n	8004ee4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	9303      	str	r3, [sp, #12]
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	9302      	str	r3, [sp, #8]
 8004ec6:	f107 0314 	add.w	r3, r7, #20
 8004eca:	9301      	str	r3, [sp, #4]
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f850 	bl	8004f7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ede:	f000 f8e3 	bl	80050a8 <prvAddNewTaskToReadyList>
 8004ee2:	e001      	b.n	8004ee8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ee8:	697b      	ldr	r3, [r7, #20]
	}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3728      	adds	r7, #40	; 0x28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b08c      	sub	sp, #48	; 0x30
 8004ef6:	af04      	add	r7, sp, #16
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	4613      	mov	r3, r2
 8004f00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f001 fc56 	bl	80067b8 <pvPortMalloc>
 8004f0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00e      	beq.n	8004f32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f14:	2064      	movs	r0, #100	; 0x64
 8004f16:	f001 fc4f 	bl	80067b8 <pvPortMalloc>
 8004f1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
 8004f28:	e005      	b.n	8004f36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f2a:	6978      	ldr	r0, [r7, #20]
 8004f2c:	f001 fd10 	bl	8006950 <vPortFree>
 8004f30:	e001      	b.n	8004f36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d017      	beq.n	8004f6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f44:	88fa      	ldrh	r2, [r7, #6]
 8004f46:	2300      	movs	r3, #0
 8004f48:	9303      	str	r3, [sp, #12]
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	9302      	str	r3, [sp, #8]
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f80e 	bl	8004f7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f60:	69f8      	ldr	r0, [r7, #28]
 8004f62:	f000 f8a1 	bl	80050a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f66:	2301      	movs	r3, #1
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	e002      	b.n	8004f72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f72:	69bb      	ldr	r3, [r7, #24]
	}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	461a      	mov	r2, r3
 8004f94:	21a5      	movs	r1, #165	; 0xa5
 8004f96:	f001 fe2b 	bl	8006bf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f023 0307 	bic.w	r3, r3, #7
 8004fb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	617b      	str	r3, [r7, #20]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01f      	beq.n	8005020 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61fb      	str	r3, [r7, #28]
 8004fe4:	e012      	b.n	800500c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	7819      	ldrb	r1, [r3, #0]
 8004fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3334      	adds	r3, #52	; 0x34
 8004ff6:	460a      	mov	r2, r1
 8004ff8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	4413      	add	r3, r2
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d006      	beq.n	8005014 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3301      	adds	r3, #1
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b0f      	cmp	r3, #15
 8005010:	d9e9      	bls.n	8004fe6 <prvInitialiseNewTask+0x6a>
 8005012:	e000      	b.n	8005016 <prvInitialiseNewTask+0x9a>
			{
				break;
 8005014:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800501e:	e003      	b.n	8005028 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	2b37      	cmp	r3, #55	; 0x37
 800502c:	d901      	bls.n	8005032 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800502e:	2337      	movs	r3, #55	; 0x37
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005036:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800503c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	2200      	movs	r2, #0
 8005042:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	3304      	adds	r3, #4
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff f93b 	bl	80042c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	3318      	adds	r3, #24
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff f936 	bl	80042c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	2200      	movs	r2, #0
 8005072:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	2200      	movs	r2, #0
 8005078:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	68f9      	ldr	r1, [r7, #12]
 8005086:	69b8      	ldr	r0, [r7, #24]
 8005088:	f001 f944 	bl	8006314 <pxPortInitialiseStack>
 800508c:	4602      	mov	r2, r0
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800509e:	bf00      	nop
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050b0:	f001 fa60 	bl	8006574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050b4:	4b2d      	ldr	r3, [pc, #180]	; (800516c <prvAddNewTaskToReadyList+0xc4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	4a2c      	ldr	r2, [pc, #176]	; (800516c <prvAddNewTaskToReadyList+0xc4>)
 80050bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050be:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <prvAddNewTaskToReadyList+0xc8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050c6:	4a2a      	ldr	r2, [pc, #168]	; (8005170 <prvAddNewTaskToReadyList+0xc8>)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050cc:	4b27      	ldr	r3, [pc, #156]	; (800516c <prvAddNewTaskToReadyList+0xc4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d110      	bne.n	80050f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050d4:	f000 fc32 	bl	800593c <prvInitialiseTaskLists>
 80050d8:	e00d      	b.n	80050f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050da:	4b26      	ldr	r3, [pc, #152]	; (8005174 <prvAddNewTaskToReadyList+0xcc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050e2:	4b23      	ldr	r3, [pc, #140]	; (8005170 <prvAddNewTaskToReadyList+0xc8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d802      	bhi.n	80050f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050f0:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <prvAddNewTaskToReadyList+0xc8>)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050f6:	4b20      	ldr	r3, [pc, #128]	; (8005178 <prvAddNewTaskToReadyList+0xd0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3301      	adds	r3, #1
 80050fc:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <prvAddNewTaskToReadyList+0xd0>)
 80050fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005100:	4b1d      	ldr	r3, [pc, #116]	; (8005178 <prvAddNewTaskToReadyList+0xd0>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510c:	4b1b      	ldr	r3, [pc, #108]	; (800517c <prvAddNewTaskToReadyList+0xd4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d903      	bls.n	800511c <prvAddNewTaskToReadyList+0x74>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	4a18      	ldr	r2, [pc, #96]	; (800517c <prvAddNewTaskToReadyList+0xd4>)
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4a15      	ldr	r2, [pc, #84]	; (8005180 <prvAddNewTaskToReadyList+0xd8>)
 800512a:	441a      	add	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f7ff f8d3 	bl	80042de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005138:	f001 fa4c 	bl	80065d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <prvAddNewTaskToReadyList+0xcc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00e      	beq.n	8005162 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005144:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <prvAddNewTaskToReadyList+0xc8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514e:	429a      	cmp	r2, r3
 8005150:	d207      	bcs.n	8005162 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005152:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <prvAddNewTaskToReadyList+0xdc>)
 8005154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20000d2c 	.word	0x20000d2c
 8005170:	20000858 	.word	0x20000858
 8005174:	20000d38 	.word	0x20000d38
 8005178:	20000d48 	.word	0x20000d48
 800517c:	20000d34 	.word	0x20000d34
 8005180:	2000085c 	.word	0x2000085c
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d017      	beq.n	80051ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800519a:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <vTaskDelay+0x60>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <vTaskDelay+0x30>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	60bb      	str	r3, [r7, #8]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051b8:	f000 f882 	bl	80052c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051bc:	2100      	movs	r1, #0
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fd06 	bl	8005bd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051c4:	f000 f88a 	bl	80052dc <xTaskResumeAll>
 80051c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d107      	bne.n	80051e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <vTaskDelay+0x64>)
 80051d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000d54 	.word	0x20000d54
 80051ec:	e000ed04 	.word	0xe000ed04

080051f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	; 0x28
 80051f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051fe:	463a      	mov	r2, r7
 8005200:	1d39      	adds	r1, r7, #4
 8005202:	f107 0308 	add.w	r3, r7, #8
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff f808 	bl	800421c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800520c:	6839      	ldr	r1, [r7, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	9202      	str	r2, [sp, #8]
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	2300      	movs	r3, #0
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	2300      	movs	r3, #0
 800521c:	460a      	mov	r2, r1
 800521e:	4922      	ldr	r1, [pc, #136]	; (80052a8 <vTaskStartScheduler+0xb8>)
 8005220:	4822      	ldr	r0, [pc, #136]	; (80052ac <vTaskStartScheduler+0xbc>)
 8005222:	f7ff fe09 	bl	8004e38 <xTaskCreateStatic>
 8005226:	4603      	mov	r3, r0
 8005228:	4a21      	ldr	r2, [pc, #132]	; (80052b0 <vTaskStartScheduler+0xc0>)
 800522a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800522c:	4b20      	ldr	r3, [pc, #128]	; (80052b0 <vTaskStartScheduler+0xc0>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005234:	2301      	movs	r3, #1
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e001      	b.n	800523e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d102      	bne.n	800524a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005244:	f000 fd18 	bl	8005c78 <xTimerCreateTimerTask>
 8005248:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d118      	bne.n	8005282 <vTaskStartScheduler+0x92>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	613b      	str	r3, [r7, #16]
}
 8005262:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005264:	4b13      	ldr	r3, [pc, #76]	; (80052b4 <vTaskStartScheduler+0xc4>)
 8005266:	f04f 32ff 	mov.w	r2, #4294967295
 800526a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800526c:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <vTaskStartScheduler+0xc8>)
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005272:	4b12      	ldr	r3, [pc, #72]	; (80052bc <vTaskStartScheduler+0xcc>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005278:	f7fb f93e 	bl	80004f8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800527c:	f001 f8d8 	bl	8006430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005280:	e00e      	b.n	80052a0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d10a      	bne.n	80052a0 <vTaskStartScheduler+0xb0>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	60fb      	str	r3, [r7, #12]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <vTaskStartScheduler+0xae>
}
 80052a0:	bf00      	nop
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	08006c84 	.word	0x08006c84
 80052ac:	0800590d 	.word	0x0800590d
 80052b0:	20000d50 	.word	0x20000d50
 80052b4:	20000d4c 	.word	0x20000d4c
 80052b8:	20000d38 	.word	0x20000d38
 80052bc:	20000d30 	.word	0x20000d30

080052c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <vTaskSuspendAll+0x18>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3301      	adds	r3, #1
 80052ca:	4a03      	ldr	r2, [pc, #12]	; (80052d8 <vTaskSuspendAll+0x18>)
 80052cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052ce:	bf00      	nop
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	20000d54 	.word	0x20000d54

080052dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052ea:	4b42      	ldr	r3, [pc, #264]	; (80053f4 <xTaskResumeAll+0x118>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <xTaskResumeAll+0x2c>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	603b      	str	r3, [r7, #0]
}
 8005304:	bf00      	nop
 8005306:	e7fe      	b.n	8005306 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005308:	f001 f934 	bl	8006574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800530c:	4b39      	ldr	r3, [pc, #228]	; (80053f4 <xTaskResumeAll+0x118>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3b01      	subs	r3, #1
 8005312:	4a38      	ldr	r2, [pc, #224]	; (80053f4 <xTaskResumeAll+0x118>)
 8005314:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005316:	4b37      	ldr	r3, [pc, #220]	; (80053f4 <xTaskResumeAll+0x118>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d162      	bne.n	80053e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800531e:	4b36      	ldr	r3, [pc, #216]	; (80053f8 <xTaskResumeAll+0x11c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d05e      	beq.n	80053e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005326:	e02f      	b.n	8005388 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005328:	4b34      	ldr	r3, [pc, #208]	; (80053fc <xTaskResumeAll+0x120>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3318      	adds	r3, #24
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff f82f 	bl	8004398 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3304      	adds	r3, #4
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff f82a 	bl	8004398 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005348:	4b2d      	ldr	r3, [pc, #180]	; (8005400 <xTaskResumeAll+0x124>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d903      	bls.n	8005358 <xTaskResumeAll+0x7c>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	4a2a      	ldr	r2, [pc, #168]	; (8005400 <xTaskResumeAll+0x124>)
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4a27      	ldr	r2, [pc, #156]	; (8005404 <xTaskResumeAll+0x128>)
 8005366:	441a      	add	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3304      	adds	r3, #4
 800536c:	4619      	mov	r1, r3
 800536e:	4610      	mov	r0, r2
 8005370:	f7fe ffb5 	bl	80042de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005378:	4b23      	ldr	r3, [pc, #140]	; (8005408 <xTaskResumeAll+0x12c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005382:	4b22      	ldr	r3, [pc, #136]	; (800540c <xTaskResumeAll+0x130>)
 8005384:	2201      	movs	r2, #1
 8005386:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005388:	4b1c      	ldr	r3, [pc, #112]	; (80053fc <xTaskResumeAll+0x120>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1cb      	bne.n	8005328 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005396:	f000 fb6f 	bl	8005a78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800539a:	4b1d      	ldr	r3, [pc, #116]	; (8005410 <xTaskResumeAll+0x134>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d010      	beq.n	80053c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053a6:	f000 f847 	bl	8005438 <xTaskIncrementTick>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80053b0:	4b16      	ldr	r3, [pc, #88]	; (800540c <xTaskResumeAll+0x130>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f1      	bne.n	80053a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80053c2:	4b13      	ldr	r3, [pc, #76]	; (8005410 <xTaskResumeAll+0x134>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053c8:	4b10      	ldr	r3, [pc, #64]	; (800540c <xTaskResumeAll+0x130>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d009      	beq.n	80053e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053d0:	2301      	movs	r3, #1
 80053d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053d4:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <xTaskResumeAll+0x138>)
 80053d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053e4:	f001 f8f6 	bl	80065d4 <vPortExitCritical>

	return xAlreadyYielded;
 80053e8:	68bb      	ldr	r3, [r7, #8]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20000d54 	.word	0x20000d54
 80053f8:	20000d2c 	.word	0x20000d2c
 80053fc:	20000cec 	.word	0x20000cec
 8005400:	20000d34 	.word	0x20000d34
 8005404:	2000085c 	.word	0x2000085c
 8005408:	20000858 	.word	0x20000858
 800540c:	20000d40 	.word	0x20000d40
 8005410:	20000d3c 	.word	0x20000d3c
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <xTaskGetTickCount+0x1c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005424:	687b      	ldr	r3, [r7, #4]
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20000d30 	.word	0x20000d30

08005438 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800543e:	2300      	movs	r3, #0
 8005440:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005442:	4b4f      	ldr	r3, [pc, #316]	; (8005580 <xTaskIncrementTick+0x148>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 808f 	bne.w	800556a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800544c:	4b4d      	ldr	r3, [pc, #308]	; (8005584 <xTaskIncrementTick+0x14c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005454:	4a4b      	ldr	r2, [pc, #300]	; (8005584 <xTaskIncrementTick+0x14c>)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d120      	bne.n	80054a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005460:	4b49      	ldr	r3, [pc, #292]	; (8005588 <xTaskIncrementTick+0x150>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <xTaskIncrementTick+0x48>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	603b      	str	r3, [r7, #0]
}
 800547c:	bf00      	nop
 800547e:	e7fe      	b.n	800547e <xTaskIncrementTick+0x46>
 8005480:	4b41      	ldr	r3, [pc, #260]	; (8005588 <xTaskIncrementTick+0x150>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	4b41      	ldr	r3, [pc, #260]	; (800558c <xTaskIncrementTick+0x154>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a3f      	ldr	r2, [pc, #252]	; (8005588 <xTaskIncrementTick+0x150>)
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	4a3f      	ldr	r2, [pc, #252]	; (800558c <xTaskIncrementTick+0x154>)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4b3e      	ldr	r3, [pc, #248]	; (8005590 <xTaskIncrementTick+0x158>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3301      	adds	r3, #1
 800549a:	4a3d      	ldr	r2, [pc, #244]	; (8005590 <xTaskIncrementTick+0x158>)
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	f000 faeb 	bl	8005a78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054a2:	4b3c      	ldr	r3, [pc, #240]	; (8005594 <xTaskIncrementTick+0x15c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d349      	bcc.n	8005540 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054ac:	4b36      	ldr	r3, [pc, #216]	; (8005588 <xTaskIncrementTick+0x150>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054b6:	4b37      	ldr	r3, [pc, #220]	; (8005594 <xTaskIncrementTick+0x15c>)
 80054b8:	f04f 32ff 	mov.w	r2, #4294967295
 80054bc:	601a      	str	r2, [r3, #0]
					break;
 80054be:	e03f      	b.n	8005540 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c0:	4b31      	ldr	r3, [pc, #196]	; (8005588 <xTaskIncrementTick+0x150>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d203      	bcs.n	80054e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054d8:	4a2e      	ldr	r2, [pc, #184]	; (8005594 <xTaskIncrementTick+0x15c>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054de:	e02f      	b.n	8005540 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe ff57 	bl	8004398 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d004      	beq.n	80054fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	3318      	adds	r3, #24
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe ff4e 	bl	8004398 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	4b25      	ldr	r3, [pc, #148]	; (8005598 <xTaskIncrementTick+0x160>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d903      	bls.n	8005510 <xTaskIncrementTick+0xd8>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	4a22      	ldr	r2, [pc, #136]	; (8005598 <xTaskIncrementTick+0x160>)
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4a1f      	ldr	r2, [pc, #124]	; (800559c <xTaskIncrementTick+0x164>)
 800551e:	441a      	add	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	3304      	adds	r3, #4
 8005524:	4619      	mov	r1, r3
 8005526:	4610      	mov	r0, r2
 8005528:	f7fe fed9 	bl	80042de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005530:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <xTaskIncrementTick+0x168>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	429a      	cmp	r2, r3
 8005538:	d3b8      	bcc.n	80054ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800553a:	2301      	movs	r3, #1
 800553c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800553e:	e7b5      	b.n	80054ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005540:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <xTaskIncrementTick+0x168>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005546:	4915      	ldr	r1, [pc, #84]	; (800559c <xTaskIncrementTick+0x164>)
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d901      	bls.n	800555c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005558:	2301      	movs	r3, #1
 800555a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800555c:	4b11      	ldr	r3, [pc, #68]	; (80055a4 <xTaskIncrementTick+0x16c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005564:	2301      	movs	r3, #1
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	e004      	b.n	8005574 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800556a:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <xTaskIncrementTick+0x170>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3301      	adds	r3, #1
 8005570:	4a0d      	ldr	r2, [pc, #52]	; (80055a8 <xTaskIncrementTick+0x170>)
 8005572:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005574:	697b      	ldr	r3, [r7, #20]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000d54 	.word	0x20000d54
 8005584:	20000d30 	.word	0x20000d30
 8005588:	20000ce4 	.word	0x20000ce4
 800558c:	20000ce8 	.word	0x20000ce8
 8005590:	20000d44 	.word	0x20000d44
 8005594:	20000d4c 	.word	0x20000d4c
 8005598:	20000d34 	.word	0x20000d34
 800559c:	2000085c 	.word	0x2000085c
 80055a0:	20000858 	.word	0x20000858
 80055a4:	20000d40 	.word	0x20000d40
 80055a8:	20000d3c 	.word	0x20000d3c

080055ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055b2:	4b33      	ldr	r3, [pc, #204]	; (8005680 <vTaskSwitchContext+0xd4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055ba:	4b32      	ldr	r3, [pc, #200]	; (8005684 <vTaskSwitchContext+0xd8>)
 80055bc:	2201      	movs	r2, #1
 80055be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055c0:	e05a      	b.n	8005678 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 80055c2:	4b30      	ldr	r3, [pc, #192]	; (8005684 <vTaskSwitchContext+0xd8>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80055c8:	f7fa ff9d 	bl	8000506 <getRunTimeCounterValue>
 80055cc:	4603      	mov	r3, r0
 80055ce:	4a2e      	ldr	r2, [pc, #184]	; (8005688 <vTaskSwitchContext+0xdc>)
 80055d0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80055d2:	4b2d      	ldr	r3, [pc, #180]	; (8005688 <vTaskSwitchContext+0xdc>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4b2d      	ldr	r3, [pc, #180]	; (800568c <vTaskSwitchContext+0xe0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d909      	bls.n	80055f2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80055de:	4b2c      	ldr	r3, [pc, #176]	; (8005690 <vTaskSwitchContext+0xe4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80055e4:	4a28      	ldr	r2, [pc, #160]	; (8005688 <vTaskSwitchContext+0xdc>)
 80055e6:	6810      	ldr	r0, [r2, #0]
 80055e8:	4a28      	ldr	r2, [pc, #160]	; (800568c <vTaskSwitchContext+0xe0>)
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	1a82      	subs	r2, r0, r2
 80055ee:	440a      	add	r2, r1
 80055f0:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 80055f2:	4b25      	ldr	r3, [pc, #148]	; (8005688 <vTaskSwitchContext+0xdc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a25      	ldr	r2, [pc, #148]	; (800568c <vTaskSwitchContext+0xe0>)
 80055f8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055fa:	4b26      	ldr	r3, [pc, #152]	; (8005694 <vTaskSwitchContext+0xe8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e010      	b.n	8005624 <vTaskSwitchContext+0x78>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <vTaskSwitchContext+0x72>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	607b      	str	r3, [r7, #4]
}
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <vTaskSwitchContext+0x70>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3b01      	subs	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	491c      	ldr	r1, [pc, #112]	; (8005698 <vTaskSwitchContext+0xec>)
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0e4      	beq.n	8005602 <vTaskSwitchContext+0x56>
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <vTaskSwitchContext+0xec>)
 8005644:	4413      	add	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	3308      	adds	r3, #8
 800565a:	429a      	cmp	r2, r3
 800565c:	d104      	bne.n	8005668 <vTaskSwitchContext+0xbc>
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	4a08      	ldr	r2, [pc, #32]	; (8005690 <vTaskSwitchContext+0xe4>)
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	4a08      	ldr	r2, [pc, #32]	; (8005694 <vTaskSwitchContext+0xe8>)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6013      	str	r3, [r2, #0]
}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000d54 	.word	0x20000d54
 8005684:	20000d40 	.word	0x20000d40
 8005688:	20000d5c 	.word	0x20000d5c
 800568c:	20000d58 	.word	0x20000d58
 8005690:	20000858 	.word	0x20000858
 8005694:	20000d34 	.word	0x20000d34
 8005698:	2000085c 	.word	0x2000085c

0800569c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60fb      	str	r3, [r7, #12]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056c2:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <vTaskPlaceOnEventList+0x44>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3318      	adds	r3, #24
 80056c8:	4619      	mov	r1, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fe fe2b 	bl	8004326 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056d0:	2101      	movs	r1, #1
 80056d2:	6838      	ldr	r0, [r7, #0]
 80056d4:	f000 fa7c 	bl	8005bd0 <prvAddCurrentTaskToDelayedList>
}
 80056d8:	bf00      	nop
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20000858 	.word	0x20000858

080056e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10a      	bne.n	800570c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	617b      	str	r3, [r7, #20]
}
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <vTaskPlaceOnEventListRestricted+0x54>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3318      	adds	r3, #24
 8005712:	4619      	mov	r1, r3
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7fe fde2 	bl	80042de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005720:	f04f 33ff 	mov.w	r3, #4294967295
 8005724:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	68b8      	ldr	r0, [r7, #8]
 800572a:	f000 fa51 	bl	8005bd0 <prvAddCurrentTaskToDelayedList>
	}
 800572e:	bf00      	nop
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000858 	.word	0x20000858

0800573c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10a      	bne.n	8005768 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60fb      	str	r3, [r7, #12]
}
 8005764:	bf00      	nop
 8005766:	e7fe      	b.n	8005766 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	3318      	adds	r3, #24
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe fe13 	bl	8004398 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005772:	4b1e      	ldr	r3, [pc, #120]	; (80057ec <xTaskRemoveFromEventList+0xb0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d11d      	bne.n	80057b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	3304      	adds	r3, #4
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe fe0a 	bl	8004398 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005788:	4b19      	ldr	r3, [pc, #100]	; (80057f0 <xTaskRemoveFromEventList+0xb4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d903      	bls.n	8005798 <xTaskRemoveFromEventList+0x5c>
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	4a16      	ldr	r2, [pc, #88]	; (80057f0 <xTaskRemoveFromEventList+0xb4>)
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <xTaskRemoveFromEventList+0xb8>)
 80057a6:	441a      	add	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f7fe fd95 	bl	80042de <vListInsertEnd>
 80057b4:	e005      	b.n	80057c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	3318      	adds	r3, #24
 80057ba:	4619      	mov	r1, r3
 80057bc:	480e      	ldr	r0, [pc, #56]	; (80057f8 <xTaskRemoveFromEventList+0xbc>)
 80057be:	f7fe fd8e 	bl	80042de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <xTaskRemoveFromEventList+0xc0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d905      	bls.n	80057dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057d0:	2301      	movs	r3, #1
 80057d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057d4:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <xTaskRemoveFromEventList+0xc4>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	e001      	b.n	80057e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057e0:	697b      	ldr	r3, [r7, #20]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20000d54 	.word	0x20000d54
 80057f0:	20000d34 	.word	0x20000d34
 80057f4:	2000085c 	.word	0x2000085c
 80057f8:	20000cec 	.word	0x20000cec
 80057fc:	20000858 	.word	0x20000858
 8005800:	20000d40 	.word	0x20000d40

08005804 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <vTaskInternalSetTimeOutState+0x24>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <vTaskInternalSetTimeOutState+0x28>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	605a      	str	r2, [r3, #4]
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	20000d44 	.word	0x20000d44
 800582c:	20000d30 	.word	0x20000d30

08005830 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	613b      	str	r3, [r7, #16]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	60fb      	str	r3, [r7, #12]
}
 800586e:	bf00      	nop
 8005870:	e7fe      	b.n	8005870 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005872:	f000 fe7f 	bl	8006574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005876:	4b1d      	ldr	r3, [pc, #116]	; (80058ec <xTaskCheckForTimeOut+0xbc>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588e:	d102      	bne.n	8005896 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e023      	b.n	80058de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <xTaskCheckForTimeOut+0xc0>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d007      	beq.n	80058b2 <xTaskCheckForTimeOut+0x82>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d302      	bcc.n	80058b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	e015      	b.n	80058de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d20b      	bcs.n	80058d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	1ad2      	subs	r2, r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff ff9b 	bl	8005804 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	e004      	b.n	80058de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058da:	2301      	movs	r3, #1
 80058dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058de:	f000 fe79 	bl	80065d4 <vPortExitCritical>

	return xReturn;
 80058e2:	69fb      	ldr	r3, [r7, #28]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20000d30 	.word	0x20000d30
 80058f0:	20000d44 	.word	0x20000d44

080058f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058f8:	4b03      	ldr	r3, [pc, #12]	; (8005908 <vTaskMissedYield+0x14>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	bf00      	nop
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	20000d40 	.word	0x20000d40

0800590c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005914:	f000 f852 	bl	80059bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <prvIdleTask+0x28>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d9f9      	bls.n	8005914 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005920:	4b05      	ldr	r3, [pc, #20]	; (8005938 <prvIdleTask+0x2c>)
 8005922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005930:	e7f0      	b.n	8005914 <prvIdleTask+0x8>
 8005932:	bf00      	nop
 8005934:	2000085c 	.word	0x2000085c
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005942:	2300      	movs	r3, #0
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	e00c      	b.n	8005962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4a12      	ldr	r2, [pc, #72]	; (800599c <prvInitialiseTaskLists+0x60>)
 8005954:	4413      	add	r3, r2
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fc94 	bl	8004284 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3301      	adds	r3, #1
 8005960:	607b      	str	r3, [r7, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b37      	cmp	r3, #55	; 0x37
 8005966:	d9ef      	bls.n	8005948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005968:	480d      	ldr	r0, [pc, #52]	; (80059a0 <prvInitialiseTaskLists+0x64>)
 800596a:	f7fe fc8b 	bl	8004284 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800596e:	480d      	ldr	r0, [pc, #52]	; (80059a4 <prvInitialiseTaskLists+0x68>)
 8005970:	f7fe fc88 	bl	8004284 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005974:	480c      	ldr	r0, [pc, #48]	; (80059a8 <prvInitialiseTaskLists+0x6c>)
 8005976:	f7fe fc85 	bl	8004284 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800597a:	480c      	ldr	r0, [pc, #48]	; (80059ac <prvInitialiseTaskLists+0x70>)
 800597c:	f7fe fc82 	bl	8004284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005980:	480b      	ldr	r0, [pc, #44]	; (80059b0 <prvInitialiseTaskLists+0x74>)
 8005982:	f7fe fc7f 	bl	8004284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <prvInitialiseTaskLists+0x78>)
 8005988:	4a05      	ldr	r2, [pc, #20]	; (80059a0 <prvInitialiseTaskLists+0x64>)
 800598a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <prvInitialiseTaskLists+0x7c>)
 800598e:	4a05      	ldr	r2, [pc, #20]	; (80059a4 <prvInitialiseTaskLists+0x68>)
 8005990:	601a      	str	r2, [r3, #0]
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	2000085c 	.word	0x2000085c
 80059a0:	20000cbc 	.word	0x20000cbc
 80059a4:	20000cd0 	.word	0x20000cd0
 80059a8:	20000cec 	.word	0x20000cec
 80059ac:	20000d00 	.word	0x20000d00
 80059b0:	20000d18 	.word	0x20000d18
 80059b4:	20000ce4 	.word	0x20000ce4
 80059b8:	20000ce8 	.word	0x20000ce8

080059bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059c2:	e019      	b.n	80059f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059c4:	f000 fdd6 	bl	8006574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c8:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <prvCheckTasksWaitingTermination+0x50>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fcdf 	bl	8004398 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059da:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <prvCheckTasksWaitingTermination+0x54>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3b01      	subs	r3, #1
 80059e0:	4a0b      	ldr	r2, [pc, #44]	; (8005a10 <prvCheckTasksWaitingTermination+0x54>)
 80059e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <prvCheckTasksWaitingTermination+0x58>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <prvCheckTasksWaitingTermination+0x58>)
 80059ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059ee:	f000 fdf1 	bl	80065d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f810 	bl	8005a18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f8:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <prvCheckTasksWaitingTermination+0x58>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e1      	bne.n	80059c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000d00 	.word	0x20000d00
 8005a10:	20000d2c 	.word	0x20000d2c
 8005a14:	20000d14 	.word	0x20000d14

08005a18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d108      	bne.n	8005a3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 ff8e 	bl	8006950 <vPortFree>
				vPortFree( pxTCB );
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 ff8b 	bl	8006950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a3a:	e018      	b.n	8005a6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d103      	bne.n	8005a4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 ff82 	bl	8006950 <vPortFree>
	}
 8005a4c:	e00f      	b.n	8005a6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d00a      	beq.n	8005a6e <prvDeleteTCB+0x56>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	60fb      	str	r3, [r7, #12]
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <prvDeleteTCB+0x54>
	}
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7e:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <prvResetNextTaskUnblockTime+0x38>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a88:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a90:	e008      	b.n	8005aa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a92:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <prvResetNextTaskUnblockTime+0x38>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a04      	ldr	r2, [pc, #16]	; (8005ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8005aa2:	6013      	str	r3, [r2, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	20000ce4 	.word	0x20000ce4
 8005ab4:	20000d4c 	.word	0x20000d4c

08005ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <xTaskGetSchedulerState+0x34>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d102      	bne.n	8005acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	e008      	b.n	8005ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005acc:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <xTaskGetSchedulerState+0x38>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	607b      	str	r3, [r7, #4]
 8005ad8:	e001      	b.n	8005ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ade:	687b      	ldr	r3, [r7, #4]
	}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20000d38 	.word	0x20000d38
 8005af0:	20000d54 	.word	0x20000d54

08005af4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d056      	beq.n	8005bb8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b0a:	4b2e      	ldr	r3, [pc, #184]	; (8005bc4 <xTaskPriorityDisinherit+0xd0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d00a      	beq.n	8005b2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	60fb      	str	r3, [r7, #12]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	60bb      	str	r3, [r7, #8]
}
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4c:	1e5a      	subs	r2, r3, #1
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d02c      	beq.n	8005bb8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d128      	bne.n	8005bb8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fc14 	bl	8004398 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b88:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <xTaskPriorityDisinherit+0xd4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d903      	bls.n	8005b98 <xTaskPriorityDisinherit+0xa4>
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <xTaskPriorityDisinherit+0xd4>)
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <xTaskPriorityDisinherit+0xd8>)
 8005ba6:	441a      	add	r2, r3
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f7fe fb95 	bl	80042de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bb8:	697b      	ldr	r3, [r7, #20]
	}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000858 	.word	0x20000858
 8005bc8:	20000d34 	.word	0x20000d34
 8005bcc:	2000085c 	.word	0x2000085c

08005bd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bda:	4b21      	ldr	r3, [pc, #132]	; (8005c60 <prvAddCurrentTaskToDelayedList+0x90>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be0:	4b20      	ldr	r3, [pc, #128]	; (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe fbd6 	bl	8004398 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf2:	d10a      	bne.n	8005c0a <prvAddCurrentTaskToDelayedList+0x3a>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4819      	ldr	r0, [pc, #100]	; (8005c68 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c04:	f7fe fb6b 	bl	80042de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c08:	e026      	b.n	8005c58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4413      	add	r3, r2
 8005c10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c12:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d209      	bcs.n	8005c36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c22:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f7fe fb79 	bl	8004326 <vListInsert>
}
 8005c34:	e010      	b.n	8005c58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c36:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f7fe fb6f 	bl	8004326 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c48:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d202      	bcs.n	8005c58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c52:	4a08      	ldr	r2, [pc, #32]	; (8005c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6013      	str	r3, [r2, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000d30 	.word	0x20000d30
 8005c64:	20000858 	.word	0x20000858
 8005c68:	20000d18 	.word	0x20000d18
 8005c6c:	20000ce8 	.word	0x20000ce8
 8005c70:	20000ce4 	.word	0x20000ce4
 8005c74:	20000d4c 	.word	0x20000d4c

08005c78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	; 0x28
 8005c7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c82:	f000 fb07 	bl	8006294 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c86:	4b1c      	ldr	r3, [pc, #112]	; (8005cf8 <xTimerCreateTimerTask+0x80>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d021      	beq.n	8005cd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c96:	1d3a      	adds	r2, r7, #4
 8005c98:	f107 0108 	add.w	r1, r7, #8
 8005c9c:	f107 030c 	add.w	r3, r7, #12
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fe fad5 	bl	8004250 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	9202      	str	r2, [sp, #8]
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	460a      	mov	r2, r1
 8005cb8:	4910      	ldr	r1, [pc, #64]	; (8005cfc <xTimerCreateTimerTask+0x84>)
 8005cba:	4811      	ldr	r0, [pc, #68]	; (8005d00 <xTimerCreateTimerTask+0x88>)
 8005cbc:	f7ff f8bc 	bl	8004e38 <xTaskCreateStatic>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4a10      	ldr	r2, [pc, #64]	; (8005d04 <xTimerCreateTimerTask+0x8c>)
 8005cc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <xTimerCreateTimerTask+0x8c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	613b      	str	r3, [r7, #16]
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005cee:	697b      	ldr	r3, [r7, #20]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000d90 	.word	0x20000d90
 8005cfc:	08006c8c 	.word	0x08006c8c
 8005d00:	08005e3d 	.word	0x08005e3d
 8005d04:	20000d94 	.word	0x20000d94

08005d08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08a      	sub	sp, #40	; 0x28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	623b      	str	r3, [r7, #32]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d36:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <xTimerGenericCommand+0x98>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d02a      	beq.n	8005d94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b05      	cmp	r3, #5
 8005d4e:	dc18      	bgt.n	8005d82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d50:	f7ff feb2 	bl	8005ab8 <xTaskGetSchedulerState>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d109      	bne.n	8005d6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <xTimerGenericCommand+0x98>)
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	f107 0110 	add.w	r1, r7, #16
 8005d62:	2300      	movs	r3, #0
 8005d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d66:	f7fe fc7f 	bl	8004668 <xQueueGenericSend>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d6c:	e012      	b.n	8005d94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <xTimerGenericCommand+0x98>)
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	f107 0110 	add.w	r1, r7, #16
 8005d76:	2300      	movs	r3, #0
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f7fe fc75 	bl	8004668 <xQueueGenericSend>
 8005d7e:	6278      	str	r0, [r7, #36]	; 0x24
 8005d80:	e008      	b.n	8005d94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d82:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <xTimerGenericCommand+0x98>)
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f107 0110 	add.w	r1, r7, #16
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	f7fe fd69 	bl	8004864 <xQueueGenericSendFromISR>
 8005d92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3728      	adds	r7, #40	; 0x28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000d90 	.word	0x20000d90

08005da4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dae:	4b22      	ldr	r3, [pc, #136]	; (8005e38 <prvProcessExpiredTimer+0x94>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fe faeb 	bl	8004398 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d022      	beq.n	8005e16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	699a      	ldr	r2, [r3, #24]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	18d1      	adds	r1, r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	6978      	ldr	r0, [r7, #20]
 8005dde:	f000 f8d1 	bl	8005f84 <prvInsertTimerInActiveList>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01f      	beq.n	8005e28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005de8:	2300      	movs	r3, #0
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	2300      	movs	r3, #0
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	2100      	movs	r1, #0
 8005df2:	6978      	ldr	r0, [r7, #20]
 8005df4:	f7ff ff88 	bl	8005d08 <xTimerGenericCommand>
 8005df8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d113      	bne.n	8005e28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60fb      	str	r3, [r7, #12]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e1c:	f023 0301 	bic.w	r3, r3, #1
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	6978      	ldr	r0, [r7, #20]
 8005e2e:	4798      	blx	r3
}
 8005e30:	bf00      	nop
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000d88 	.word	0x20000d88

08005e3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e44:	f107 0308 	add.w	r3, r7, #8
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 f857 	bl	8005efc <prvGetNextExpireTime>
 8005e4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4619      	mov	r1, r3
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f803 	bl	8005e60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e5a:	f000 f8d5 	bl	8006008 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e5e:	e7f1      	b.n	8005e44 <prvTimerTask+0x8>

08005e60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e6a:	f7ff fa29 	bl	80052c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e6e:	f107 0308 	add.w	r3, r7, #8
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f866 	bl	8005f44 <prvSampleTimeNow>
 8005e78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d130      	bne.n	8005ee2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <prvProcessTimerOrBlockTask+0x3c>
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d806      	bhi.n	8005e9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e8e:	f7ff fa25 	bl	80052dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff ff85 	bl	8005da4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e9a:	e024      	b.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d008      	beq.n	8005eb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <prvProcessTimerOrBlockTask+0x90>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <prvProcessTimerOrBlockTask+0x50>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <prvProcessTimerOrBlockTask+0x52>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <prvProcessTimerOrBlockTask+0x94>)
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f7fe ff85 	bl	8004dd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ec6:	f7ff fa09 	bl	80052dc <xTaskResumeAll>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ed0:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <prvProcessTimerOrBlockTask+0x98>)
 8005ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
}
 8005ee0:	e001      	b.n	8005ee6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ee2:	f7ff f9fb 	bl	80052dc <xTaskResumeAll>
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000d8c 	.word	0x20000d8c
 8005ef4:	20000d90 	.word	0x20000d90
 8005ef8:	e000ed04 	.word	0xe000ed04

08005efc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f04:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <prvGetNextExpireTime+0x44>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <prvGetNextExpireTime+0x16>
 8005f0e:	2201      	movs	r2, #1
 8005f10:	e000      	b.n	8005f14 <prvGetNextExpireTime+0x18>
 8005f12:	2200      	movs	r2, #0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d105      	bne.n	8005f2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <prvGetNextExpireTime+0x44>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e001      	b.n	8005f30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f30:	68fb      	ldr	r3, [r7, #12]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	20000d88 	.word	0x20000d88

08005f44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f4c:	f7ff fa64 	bl	8005418 <xTaskGetTickCount>
 8005f50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <prvSampleTimeNow+0x3c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d205      	bcs.n	8005f68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f5c:	f000 f936 	bl	80061cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f6e:	4a04      	ldr	r2, [pc, #16]	; (8005f80 <prvSampleTimeNow+0x3c>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f74:	68fb      	ldr	r3, [r7, #12]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000d98 	.word	0x20000d98

08005f84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d812      	bhi.n	8005fd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d302      	bcc.n	8005fbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e01b      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fbe:	4b10      	ldr	r3, [pc, #64]	; (8006000 <prvInsertTimerInActiveList+0x7c>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f7fe f9ac 	bl	8004326 <vListInsert>
 8005fce:	e012      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d206      	bcs.n	8005fe6 <prvInsertTimerInActiveList+0x62>
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d302      	bcc.n	8005fe6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e007      	b.n	8005ff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <prvInsertTimerInActiveList+0x80>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f7fe f998 	bl	8004326 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ff6:	697b      	ldr	r3, [r7, #20]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000d8c 	.word	0x20000d8c
 8006004:	20000d88 	.word	0x20000d88

08006008 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	; 0x38
 800600c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800600e:	e0ca      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	da18      	bge.n	8006048 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006016:	1d3b      	adds	r3, r7, #4
 8006018:	3304      	adds	r3, #4
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	61fb      	str	r3, [r7, #28]
}
 8006034:	bf00      	nop
 8006036:	e7fe      	b.n	8006036 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800603e:	6850      	ldr	r0, [r2, #4]
 8006040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006042:	6892      	ldr	r2, [r2, #8]
 8006044:	4611      	mov	r1, r2
 8006046:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f2c0 80aa 	blt.w	80061a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	3304      	adds	r3, #4
 8006060:	4618      	mov	r0, r3
 8006062:	f7fe f999 	bl	8004398 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006066:	463b      	mov	r3, r7
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff ff6b 	bl	8005f44 <prvSampleTimeNow>
 800606e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b09      	cmp	r3, #9
 8006074:	f200 8097 	bhi.w	80061a6 <prvProcessReceivedCommands+0x19e>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <prvProcessReceivedCommands+0x78>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060a9 	.word	0x080060a9
 800608c:	0800611d 	.word	0x0800611d
 8006090:	08006131 	.word	0x08006131
 8006094:	0800617b 	.word	0x0800617b
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060a9 	.word	0x080060a9
 80060a0:	0800611d 	.word	0x0800611d
 80060a4:	08006131 	.word	0x08006131
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	18d1      	adds	r1, r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c8:	f7ff ff5c 	bl	8005f84 <prvInsertTimerInActiveList>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d069      	beq.n	80061a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d05e      	beq.n	80061a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	441a      	add	r2, r3
 80060f0:	2300      	movs	r3, #0
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	2300      	movs	r3, #0
 80060f6:	2100      	movs	r1, #0
 80060f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060fa:	f7ff fe05 	bl	8005d08 <xTimerGenericCommand>
 80060fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d14f      	bne.n	80061a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	61bb      	str	r3, [r7, #24]
}
 8006118:	bf00      	nop
 800611a:	e7fe      	b.n	800611a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	b2da      	uxtb	r2, r3
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800612e:	e03a      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	b2da      	uxtb	r2, r3
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	617b      	str	r3, [r7, #20]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	18d1      	adds	r1, r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006174:	f7ff ff06 	bl	8005f84 <prvInsertTimerInActiveList>
					break;
 8006178:	e015      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d103      	bne.n	8006190 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800618a:	f000 fbe1 	bl	8006950 <vPortFree>
 800618e:	e00a      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006196:	f023 0301 	bic.w	r3, r3, #1
 800619a:	b2da      	uxtb	r2, r3
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061a2:	e000      	b.n	80061a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061a6:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <prvProcessReceivedCommands+0x1c0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	1d39      	adds	r1, r7, #4
 80061ac:	2200      	movs	r2, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fbf4 	bl	800499c <xQueueReceive>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f47f af2a 	bne.w	8006010 <prvProcessReceivedCommands+0x8>
	}
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	3730      	adds	r7, #48	; 0x30
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000d90 	.word	0x20000d90

080061cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061d2:	e048      	b.n	8006266 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061d4:	4b2d      	ldr	r3, [pc, #180]	; (800628c <prvSwitchTimerLists+0xc0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061de:	4b2b      	ldr	r3, [pc, #172]	; (800628c <prvSwitchTimerLists+0xc0>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe f8d3 	bl	8004398 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d02e      	beq.n	8006266 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4413      	add	r3, r2
 8006210:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	429a      	cmp	r2, r3
 8006218:	d90e      	bls.n	8006238 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006226:	4b19      	ldr	r3, [pc, #100]	; (800628c <prvSwitchTimerLists+0xc0>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3304      	adds	r3, #4
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f7fe f878 	bl	8004326 <vListInsert>
 8006236:	e016      	b.n	8006266 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006238:	2300      	movs	r3, #0
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	2300      	movs	r3, #0
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	2100      	movs	r1, #0
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff fd60 	bl	8005d08 <xTimerGenericCommand>
 8006248:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	603b      	str	r3, [r7, #0]
}
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006266:	4b09      	ldr	r3, [pc, #36]	; (800628c <prvSwitchTimerLists+0xc0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1b1      	bne.n	80061d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006270:	4b06      	ldr	r3, [pc, #24]	; (800628c <prvSwitchTimerLists+0xc0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006276:	4b06      	ldr	r3, [pc, #24]	; (8006290 <prvSwitchTimerLists+0xc4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a04      	ldr	r2, [pc, #16]	; (800628c <prvSwitchTimerLists+0xc0>)
 800627c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800627e:	4a04      	ldr	r2, [pc, #16]	; (8006290 <prvSwitchTimerLists+0xc4>)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	6013      	str	r3, [r2, #0]
}
 8006284:	bf00      	nop
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20000d88 	.word	0x20000d88
 8006290:	20000d8c 	.word	0x20000d8c

08006294 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800629a:	f000 f96b 	bl	8006574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800629e:	4b15      	ldr	r3, [pc, #84]	; (80062f4 <prvCheckForValidListAndQueue+0x60>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d120      	bne.n	80062e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062a6:	4814      	ldr	r0, [pc, #80]	; (80062f8 <prvCheckForValidListAndQueue+0x64>)
 80062a8:	f7fd ffec 	bl	8004284 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062ac:	4813      	ldr	r0, [pc, #76]	; (80062fc <prvCheckForValidListAndQueue+0x68>)
 80062ae:	f7fd ffe9 	bl	8004284 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <prvCheckForValidListAndQueue+0x6c>)
 80062b4:	4a10      	ldr	r2, [pc, #64]	; (80062f8 <prvCheckForValidListAndQueue+0x64>)
 80062b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062b8:	4b12      	ldr	r3, [pc, #72]	; (8006304 <prvCheckForValidListAndQueue+0x70>)
 80062ba:	4a10      	ldr	r2, [pc, #64]	; (80062fc <prvCheckForValidListAndQueue+0x68>)
 80062bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062be:	2300      	movs	r3, #0
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	4b11      	ldr	r3, [pc, #68]	; (8006308 <prvCheckForValidListAndQueue+0x74>)
 80062c4:	4a11      	ldr	r2, [pc, #68]	; (800630c <prvCheckForValidListAndQueue+0x78>)
 80062c6:	2110      	movs	r1, #16
 80062c8:	200a      	movs	r0, #10
 80062ca:	f7fe f8f7 	bl	80044bc <xQueueGenericCreateStatic>
 80062ce:	4603      	mov	r3, r0
 80062d0:	4a08      	ldr	r2, [pc, #32]	; (80062f4 <prvCheckForValidListAndQueue+0x60>)
 80062d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062d4:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <prvCheckForValidListAndQueue+0x60>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <prvCheckForValidListAndQueue+0x60>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	490b      	ldr	r1, [pc, #44]	; (8006310 <prvCheckForValidListAndQueue+0x7c>)
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe fd4a 	bl	8004d7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062e8:	f000 f974 	bl	80065d4 <vPortExitCritical>
}
 80062ec:	bf00      	nop
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000d90 	.word	0x20000d90
 80062f8:	20000d60 	.word	0x20000d60
 80062fc:	20000d74 	.word	0x20000d74
 8006300:	20000d88 	.word	0x20000d88
 8006304:	20000d8c 	.word	0x20000d8c
 8006308:	20000e3c 	.word	0x20000e3c
 800630c:	20000d9c 	.word	0x20000d9c
 8006310:	08006c94 	.word	0x08006c94

08006314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3b04      	subs	r3, #4
 8006324:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800632c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3b04      	subs	r3, #4
 8006332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f023 0201 	bic.w	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3b04      	subs	r3, #4
 8006342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006344:	4a0c      	ldr	r2, [pc, #48]	; (8006378 <pxPortInitialiseStack+0x64>)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3b14      	subs	r3, #20
 800634e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3b04      	subs	r3, #4
 800635a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f06f 0202 	mvn.w	r2, #2
 8006362:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b20      	subs	r3, #32
 8006368:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800636a:	68fb      	ldr	r3, [r7, #12]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	0800637d 	.word	0x0800637d

0800637c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006386:	4b12      	ldr	r3, [pc, #72]	; (80063d0 <prvTaskExitError+0x54>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	d00a      	beq.n	80063a6 <prvTaskExitError+0x2a>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	60fb      	str	r3, [r7, #12]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <prvTaskExitError+0x28>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	60bb      	str	r3, [r7, #8]
}
 80063b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063ba:	bf00      	nop
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0fc      	beq.n	80063bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063c2:	bf00      	nop
 80063c4:	bf00      	nop
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	2000000c 	.word	0x2000000c
	...

080063e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <pxCurrentTCBConst2>)
 80063e2:	6819      	ldr	r1, [r3, #0]
 80063e4:	6808      	ldr	r0, [r1, #0]
 80063e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ea:	f380 8809 	msr	PSP, r0
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f04f 0000 	mov.w	r0, #0
 80063f6:	f380 8811 	msr	BASEPRI, r0
 80063fa:	4770      	bx	lr
 80063fc:	f3af 8000 	nop.w

08006400 <pxCurrentTCBConst2>:
 8006400:	20000858 	.word	0x20000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop

08006408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006408:	4808      	ldr	r0, [pc, #32]	; (800642c <prvPortStartFirstTask+0x24>)
 800640a:	6800      	ldr	r0, [r0, #0]
 800640c:	6800      	ldr	r0, [r0, #0]
 800640e:	f380 8808 	msr	MSP, r0
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f380 8814 	msr	CONTROL, r0
 800641a:	b662      	cpsie	i
 800641c:	b661      	cpsie	f
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	df00      	svc	0
 8006428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800642a:	bf00      	nop
 800642c:	e000ed08 	.word	0xe000ed08

08006430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006436:	4b46      	ldr	r3, [pc, #280]	; (8006550 <xPortStartScheduler+0x120>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a46      	ldr	r2, [pc, #280]	; (8006554 <xPortStartScheduler+0x124>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d10a      	bne.n	8006456 <xPortStartScheduler+0x26>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	613b      	str	r3, [r7, #16]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006456:	4b3e      	ldr	r3, [pc, #248]	; (8006550 <xPortStartScheduler+0x120>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a3f      	ldr	r2, [pc, #252]	; (8006558 <xPortStartScheduler+0x128>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10a      	bne.n	8006476 <xPortStartScheduler+0x46>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	60fb      	str	r3, [r7, #12]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006476:	4b39      	ldr	r3, [pc, #228]	; (800655c <xPortStartScheduler+0x12c>)
 8006478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	22ff      	movs	r2, #255	; 0xff
 8006486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006498:	b2da      	uxtb	r2, r3
 800649a:	4b31      	ldr	r3, [pc, #196]	; (8006560 <xPortStartScheduler+0x130>)
 800649c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800649e:	4b31      	ldr	r3, [pc, #196]	; (8006564 <xPortStartScheduler+0x134>)
 80064a0:	2207      	movs	r2, #7
 80064a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064a4:	e009      	b.n	80064ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064a6:	4b2f      	ldr	r3, [pc, #188]	; (8006564 <xPortStartScheduler+0x134>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	4a2d      	ldr	r2, [pc, #180]	; (8006564 <xPortStartScheduler+0x134>)
 80064ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	2b80      	cmp	r3, #128	; 0x80
 80064c4:	d0ef      	beq.n	80064a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064c6:	4b27      	ldr	r3, [pc, #156]	; (8006564 <xPortStartScheduler+0x134>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f1c3 0307 	rsb	r3, r3, #7
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d00a      	beq.n	80064e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	60bb      	str	r3, [r7, #8]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064e8:	4b1e      	ldr	r3, [pc, #120]	; (8006564 <xPortStartScheduler+0x134>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <xPortStartScheduler+0x134>)
 80064f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064f2:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <xPortStartScheduler+0x134>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064fa:	4a1a      	ldr	r2, [pc, #104]	; (8006564 <xPortStartScheduler+0x134>)
 80064fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006506:	4b18      	ldr	r3, [pc, #96]	; (8006568 <xPortStartScheduler+0x138>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a17      	ldr	r2, [pc, #92]	; (8006568 <xPortStartScheduler+0x138>)
 800650c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <xPortStartScheduler+0x138>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a14      	ldr	r2, [pc, #80]	; (8006568 <xPortStartScheduler+0x138>)
 8006518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800651c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800651e:	f000 f8dd 	bl	80066dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <xPortStartScheduler+0x13c>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006528:	f000 f8fc 	bl	8006724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800652c:	4b10      	ldr	r3, [pc, #64]	; (8006570 <xPortStartScheduler+0x140>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a0f      	ldr	r2, [pc, #60]	; (8006570 <xPortStartScheduler+0x140>)
 8006532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006538:	f7ff ff66 	bl	8006408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800653c:	f7ff f836 	bl	80055ac <vTaskSwitchContext>
	prvTaskExitError();
 8006540:	f7ff ff1c 	bl	800637c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	e000ed00 	.word	0xe000ed00
 8006554:	410fc271 	.word	0x410fc271
 8006558:	410fc270 	.word	0x410fc270
 800655c:	e000e400 	.word	0xe000e400
 8006560:	20000e8c 	.word	0x20000e8c
 8006564:	20000e90 	.word	0x20000e90
 8006568:	e000ed20 	.word	0xe000ed20
 800656c:	2000000c 	.word	0x2000000c
 8006570:	e000ef34 	.word	0xe000ef34

08006574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	607b      	str	r3, [r7, #4]
}
 800658c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800658e:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <vPortEnterCritical+0x58>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	4a0d      	ldr	r2, [pc, #52]	; (80065cc <vPortEnterCritical+0x58>)
 8006596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006598:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <vPortEnterCritical+0x58>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d10f      	bne.n	80065c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <vPortEnterCritical+0x5c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	603b      	str	r3, [r7, #0]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <vPortEnterCritical+0x4a>
	}
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	2000000c 	.word	0x2000000c
 80065d0:	e000ed04 	.word	0xe000ed04

080065d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065da:	4b12      	ldr	r3, [pc, #72]	; (8006624 <vPortExitCritical+0x50>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <vPortExitCritical+0x24>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	607b      	str	r3, [r7, #4]
}
 80065f4:	bf00      	nop
 80065f6:	e7fe      	b.n	80065f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <vPortExitCritical+0x50>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <vPortExitCritical+0x50>)
 8006600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006602:	4b08      	ldr	r3, [pc, #32]	; (8006624 <vPortExitCritical+0x50>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d105      	bne.n	8006616 <vPortExitCritical+0x42>
 800660a:	2300      	movs	r3, #0
 800660c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	f383 8811 	msr	BASEPRI, r3
}
 8006614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	2000000c 	.word	0x2000000c
	...

08006630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006630:	f3ef 8009 	mrs	r0, PSP
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	4b15      	ldr	r3, [pc, #84]	; (8006690 <pxCurrentTCBConst>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	f01e 0f10 	tst.w	lr, #16
 8006640:	bf08      	it	eq
 8006642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664a:	6010      	str	r0, [r2, #0]
 800664c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006654:	f380 8811 	msr	BASEPRI, r0
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f7fe ffa4 	bl	80055ac <vTaskSwitchContext>
 8006664:	f04f 0000 	mov.w	r0, #0
 8006668:	f380 8811 	msr	BASEPRI, r0
 800666c:	bc09      	pop	{r0, r3}
 800666e:	6819      	ldr	r1, [r3, #0]
 8006670:	6808      	ldr	r0, [r1, #0]
 8006672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006676:	f01e 0f10 	tst.w	lr, #16
 800667a:	bf08      	it	eq
 800667c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006680:	f380 8809 	msr	PSP, r0
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	f3af 8000 	nop.w

08006690 <pxCurrentTCBConst>:
 8006690:	20000858 	.word	0x20000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop

08006698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	607b      	str	r3, [r7, #4]
}
 80066b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066b2:	f7fe fec1 	bl	8005438 <xTaskIncrementTick>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <xPortSysTickHandler+0x40>)
 80066be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	2300      	movs	r3, #0
 80066c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	f383 8811 	msr	BASEPRI, r3
}
 80066ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	e000ed04 	.word	0xe000ed04

080066dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <vPortSetupTimerInterrupt+0x34>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <vPortSetupTimerInterrupt+0x38>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <vPortSetupTimerInterrupt+0x3c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a0a      	ldr	r2, [pc, #40]	; (800671c <vPortSetupTimerInterrupt+0x40>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	099b      	lsrs	r3, r3, #6
 80066f8:	4a09      	ldr	r2, [pc, #36]	; (8006720 <vPortSetupTimerInterrupt+0x44>)
 80066fa:	3b01      	subs	r3, #1
 80066fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066fe:	4b04      	ldr	r3, [pc, #16]	; (8006710 <vPortSetupTimerInterrupt+0x34>)
 8006700:	2207      	movs	r2, #7
 8006702:	601a      	str	r2, [r3, #0]
}
 8006704:	bf00      	nop
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	e000e010 	.word	0xe000e010
 8006714:	e000e018 	.word	0xe000e018
 8006718:	20000000 	.word	0x20000000
 800671c:	10624dd3 	.word	0x10624dd3
 8006720:	e000e014 	.word	0xe000e014

08006724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006734 <vPortEnableVFP+0x10>
 8006728:	6801      	ldr	r1, [r0, #0]
 800672a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800672e:	6001      	str	r1, [r0, #0]
 8006730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006732:	bf00      	nop
 8006734:	e000ed88 	.word	0xe000ed88

08006738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800673e:	f3ef 8305 	mrs	r3, IPSR
 8006742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b0f      	cmp	r3, #15
 8006748:	d914      	bls.n	8006774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800674a:	4a17      	ldr	r2, [pc, #92]	; (80067a8 <vPortValidateInterruptPriority+0x70>)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006754:	4b15      	ldr	r3, [pc, #84]	; (80067ac <vPortValidateInterruptPriority+0x74>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	7afa      	ldrb	r2, [r7, #11]
 800675a:	429a      	cmp	r2, r3
 800675c:	d20a      	bcs.n	8006774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	607b      	str	r3, [r7, #4]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006774:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <vPortValidateInterruptPriority+0x78>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800677c:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <vPortValidateInterruptPriority+0x7c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d90a      	bls.n	800679a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	603b      	str	r3, [r7, #0]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <vPortValidateInterruptPriority+0x60>
	}
 800679a:	bf00      	nop
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	e000e3f0 	.word	0xe000e3f0
 80067ac:	20000e8c 	.word	0x20000e8c
 80067b0:	e000ed0c 	.word	0xe000ed0c
 80067b4:	20000e90 	.word	0x20000e90

080067b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08a      	sub	sp, #40	; 0x28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067c4:	f7fe fd7c 	bl	80052c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067c8:	4b5b      	ldr	r3, [pc, #364]	; (8006938 <pvPortMalloc+0x180>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067d0:	f000 f920 	bl	8006a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067d4:	4b59      	ldr	r3, [pc, #356]	; (800693c <pvPortMalloc+0x184>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4013      	ands	r3, r2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f040 8093 	bne.w	8006908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01d      	beq.n	8006824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067e8:	2208      	movs	r2, #8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4413      	add	r3, r2
 80067ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d014      	beq.n	8006824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f023 0307 	bic.w	r3, r3, #7
 8006800:	3308      	adds	r3, #8
 8006802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <pvPortMalloc+0x6c>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	617b      	str	r3, [r7, #20]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d06e      	beq.n	8006908 <pvPortMalloc+0x150>
 800682a:	4b45      	ldr	r3, [pc, #276]	; (8006940 <pvPortMalloc+0x188>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	d869      	bhi.n	8006908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006834:	4b43      	ldr	r3, [pc, #268]	; (8006944 <pvPortMalloc+0x18c>)
 8006836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006838:	4b42      	ldr	r3, [pc, #264]	; (8006944 <pvPortMalloc+0x18c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800683e:	e004      	b.n	800684a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d903      	bls.n	800685c <pvPortMalloc+0xa4>
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f1      	bne.n	8006840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800685c:	4b36      	ldr	r3, [pc, #216]	; (8006938 <pvPortMalloc+0x180>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	429a      	cmp	r2, r3
 8006864:	d050      	beq.n	8006908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2208      	movs	r2, #8
 800686c:	4413      	add	r3, r2
 800686e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	2308      	movs	r3, #8
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	429a      	cmp	r2, r3
 8006886:	d91f      	bls.n	80068c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4413      	add	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <pvPortMalloc+0xf8>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	613b      	str	r3, [r7, #16]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	1ad2      	subs	r2, r2, r3
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068c2:	69b8      	ldr	r0, [r7, #24]
 80068c4:	f000 f908 	bl	8006ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068c8:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <pvPortMalloc+0x188>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <pvPortMalloc+0x188>)
 80068d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068d6:	4b1a      	ldr	r3, [pc, #104]	; (8006940 <pvPortMalloc+0x188>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <pvPortMalloc+0x190>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d203      	bcs.n	80068ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068e2:	4b17      	ldr	r3, [pc, #92]	; (8006940 <pvPortMalloc+0x188>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a18      	ldr	r2, [pc, #96]	; (8006948 <pvPortMalloc+0x190>)
 80068e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	4b13      	ldr	r3, [pc, #76]	; (800693c <pvPortMalloc+0x184>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <pvPortMalloc+0x194>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3301      	adds	r3, #1
 8006904:	4a11      	ldr	r2, [pc, #68]	; (800694c <pvPortMalloc+0x194>)
 8006906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006908:	f7fe fce8 	bl	80052dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <pvPortMalloc+0x174>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60fb      	str	r3, [r7, #12]
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <pvPortMalloc+0x172>
	return pvReturn;
 800692c:	69fb      	ldr	r3, [r7, #28]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3728      	adds	r7, #40	; 0x28
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20004a9c 	.word	0x20004a9c
 800693c:	20004ab0 	.word	0x20004ab0
 8006940:	20004aa0 	.word	0x20004aa0
 8006944:	20004a94 	.word	0x20004a94
 8006948:	20004aa4 	.word	0x20004aa4
 800694c:	20004aa8 	.word	0x20004aa8

08006950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d04d      	beq.n	80069fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006962:	2308      	movs	r3, #8
 8006964:	425b      	negs	r3, r3
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4413      	add	r3, r2
 800696a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	4b24      	ldr	r3, [pc, #144]	; (8006a08 <vPortFree+0xb8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4013      	ands	r3, r2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <vPortFree+0x44>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	60fb      	str	r3, [r7, #12]
}
 8006990:	bf00      	nop
 8006992:	e7fe      	b.n	8006992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <vPortFree+0x62>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	60bb      	str	r3, [r7, #8]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <vPortFree+0xb8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01e      	beq.n	80069fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d11a      	bne.n	80069fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <vPortFree+0xb8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	43db      	mvns	r3, r3
 80069d2:	401a      	ands	r2, r3
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069d8:	f7fe fc72 	bl	80052c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <vPortFree+0xbc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4413      	add	r3, r2
 80069e6:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <vPortFree+0xbc>)
 80069e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f000 f874 	bl	8006ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <vPortFree+0xc0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	4a06      	ldr	r2, [pc, #24]	; (8006a10 <vPortFree+0xc0>)
 80069f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069fa:	f7fe fc6f 	bl	80052dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069fe:	bf00      	nop
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	20004ab0 	.word	0x20004ab0
 8006a0c:	20004aa0 	.word	0x20004aa0
 8006a10:	20004aac 	.word	0x20004aac

08006a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a20:	4b27      	ldr	r3, [pc, #156]	; (8006ac0 <prvHeapInit+0xac>)
 8006a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00c      	beq.n	8006a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3307      	adds	r3, #7
 8006a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0307 	bic.w	r3, r3, #7
 8006a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	4a1f      	ldr	r2, [pc, #124]	; (8006ac0 <prvHeapInit+0xac>)
 8006a44:	4413      	add	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <prvHeapInit+0xb0>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a52:	4b1c      	ldr	r3, [pc, #112]	; (8006ac4 <prvHeapInit+0xb0>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a60:	2208      	movs	r2, #8
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1a9b      	subs	r3, r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0307 	bic.w	r3, r3, #7
 8006a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a76:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a7e:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a94:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <prvHeapInit+0xb4>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <prvHeapInit+0xb8>)
 8006aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <prvHeapInit+0xbc>)
 8006aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <prvHeapInit+0xc0>)
 8006aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	20000e94 	.word	0x20000e94
 8006ac4:	20004a94 	.word	0x20004a94
 8006ac8:	20004a9c 	.word	0x20004a9c
 8006acc:	20004aa4 	.word	0x20004aa4
 8006ad0:	20004aa0 	.word	0x20004aa0
 8006ad4:	20004ab0 	.word	0x20004ab0

08006ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ae0:	4b28      	ldr	r3, [pc, #160]	; (8006b84 <prvInsertBlockIntoFreeList+0xac>)
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e002      	b.n	8006aec <prvInsertBlockIntoFreeList+0x14>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d8f7      	bhi.n	8006ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d108      	bne.n	8006b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	441a      	add	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	441a      	add	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d118      	bne.n	8006b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <prvInsertBlockIntoFreeList+0xb0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d00d      	beq.n	8006b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	441a      	add	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e008      	b.n	8006b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <prvInsertBlockIntoFreeList+0xb0>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e003      	b.n	8006b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d002      	beq.n	8006b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20004a94 	.word	0x20004a94
 8006b88:	20004a9c 	.word	0x20004a9c

08006b8c <__libc_init_array>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4d0d      	ldr	r5, [pc, #52]	; (8006bc4 <__libc_init_array+0x38>)
 8006b90:	4c0d      	ldr	r4, [pc, #52]	; (8006bc8 <__libc_init_array+0x3c>)
 8006b92:	1b64      	subs	r4, r4, r5
 8006b94:	10a4      	asrs	r4, r4, #2
 8006b96:	2600      	movs	r6, #0
 8006b98:	42a6      	cmp	r6, r4
 8006b9a:	d109      	bne.n	8006bb0 <__libc_init_array+0x24>
 8006b9c:	4d0b      	ldr	r5, [pc, #44]	; (8006bcc <__libc_init_array+0x40>)
 8006b9e:	4c0c      	ldr	r4, [pc, #48]	; (8006bd0 <__libc_init_array+0x44>)
 8006ba0:	f000 f82e 	bl	8006c00 <_init>
 8006ba4:	1b64      	subs	r4, r4, r5
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	2600      	movs	r6, #0
 8006baa:	42a6      	cmp	r6, r4
 8006bac:	d105      	bne.n	8006bba <__libc_init_array+0x2e>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb4:	4798      	blx	r3
 8006bb6:	3601      	adds	r6, #1
 8006bb8:	e7ee      	b.n	8006b98 <__libc_init_array+0xc>
 8006bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbe:	4798      	blx	r3
 8006bc0:	3601      	adds	r6, #1
 8006bc2:	e7f2      	b.n	8006baa <__libc_init_array+0x1e>
 8006bc4:	08006d54 	.word	0x08006d54
 8006bc8:	08006d54 	.word	0x08006d54
 8006bcc:	08006d54 	.word	0x08006d54
 8006bd0:	08006d58 	.word	0x08006d58

08006bd4 <memcpy>:
 8006bd4:	440a      	add	r2, r1
 8006bd6:	4291      	cmp	r1, r2
 8006bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bdc:	d100      	bne.n	8006be0 <memcpy+0xc>
 8006bde:	4770      	bx	lr
 8006be0:	b510      	push	{r4, lr}
 8006be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bea:	4291      	cmp	r1, r2
 8006bec:	d1f9      	bne.n	8006be2 <memcpy+0xe>
 8006bee:	bd10      	pop	{r4, pc}

08006bf0 <memset>:
 8006bf0:	4402      	add	r2, r0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d100      	bne.n	8006bfa <memset+0xa>
 8006bf8:	4770      	bx	lr
 8006bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006bfe:	e7f9      	b.n	8006bf4 <memset+0x4>

08006c00 <_init>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	bf00      	nop
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr

08006c0c <_fini>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	bf00      	nop
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr
