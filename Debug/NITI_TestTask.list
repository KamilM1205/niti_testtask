
NITI_TestTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000688c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ab0  08006ab0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006ab0  08006ab0  00016ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ab8  08006ab8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab8  08006ab8  00016ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006abc  08006abc  00016abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a7c  20000010  08006ad0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a8c  08006ad0  00024a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b71  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000349f  00000000  00000000  00038bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003c050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  0003d568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187ef  00000000  00000000  0003e948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017212  00000000  00000000  00057137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f48  00000000  00000000  0006e349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105291  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058dc  00000000  00000000  001052e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a14 	.word	0x08006a14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006a14 	.word	0x08006a14

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
return 0;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fb42 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f83c 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f940 	bl	8000794 <MX_GPIO_Init>
  MX_DMA_Init();
 8000514:	f000 f91e 	bl	8000754 <MX_DMA_Init>
  MX_TIM1_Init();
 8000518:	f000 f8a0 	bl	800065c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800051c:	f000 f8f0 	bl	8000700 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ibus = IBUS_Init(&huart1);
 8000520:	4811      	ldr	r0, [pc, #68]	; (8000568 <main+0x64>)
 8000522:	f003 fa11 	bl	8003948 <IBUS_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	4a10      	ldr	r2, [pc, #64]	; (800056c <main+0x68>)
 800052a:	6013      	str	r3, [r2, #0]

  IBUS_AddCallback(ibus, CH3, RJVert);
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <main+0x68>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <main+0x6c>)
 8000532:	2102      	movs	r1, #2
 8000534:	4618      	mov	r0, r3
 8000536:	f003 fb0d 	bl	8003b54 <IBUS_AddCallback>
  //IBUS_AddCallback(ibus, CH7, SWA);

  HAL_GPIO_WritePin (LED13_GPIO_Port, LED13_Pin, RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <main+0x70>)
 8000542:	f001 f9a9 	bl	8001898 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT (&htim1);
 8000546:	480c      	ldr	r0, [pc, #48]	; (8000578 <main+0x74>)
 8000548:	f001 fe68 	bl	800221c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800054c:	f003 fc9e 	bl	8003e8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000550:	4a0a      	ldr	r2, [pc, #40]	; (800057c <main+0x78>)
 8000552:	2100      	movs	r1, #0
 8000554:	480a      	ldr	r0, [pc, #40]	; (8000580 <main+0x7c>)
 8000556:	f003 fce3 	bl	8003f20 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a09      	ldr	r2, [pc, #36]	; (8000584 <main+0x80>)
 800055e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000560:	f003 fcb8 	bl	8003ed4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000564:	e7fe      	b.n	8000564 <main+0x60>
 8000566:	bf00      	nop
 8000568:	20000074 	.word	0x20000074
 800056c:	2000011c 	.word	0x2000011c
 8000570:	08000855 	.word	0x08000855
 8000574:	40020800 	.word	0x40020800
 8000578:	2000002c 	.word	0x2000002c
 800057c:	08006a6c 	.word	0x08006a6c
 8000580:	080008bd 	.word	0x080008bd
 8000584:	20000118 	.word	0x20000118

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 fa34 	bl	8006a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <SystemClock_Config+0xcc>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b25      	ldr	r3, [pc, #148]	; (8000654 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xd0>)
 80005d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000600:	2354      	movs	r3, #84	; 0x54
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f95b 	bl	80018cc <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800061c:	f000 f95e 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2102      	movs	r1, #2
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fbbd 	bl	8001dbc <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000648:	f000 f948 	bl	80008dc <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000670:	463b      	mov	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_TIM1_Init+0x9c>)
 800067a:	4a20      	ldr	r2, [pc, #128]	; (80006fc <MX_TIM1_Init+0xa0>)
 800067c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 800067e:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_TIM1_Init+0x9c>)
 8000680:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000684:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_TIM1_Init+0x9c>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_TIM1_Init+0x9c>)
 800068e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000692:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_TIM1_Init+0x9c>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_TIM1_Init+0x9c>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_TIM1_Init+0x9c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006a6:	4814      	ldr	r0, [pc, #80]	; (80006f8 <MX_TIM1_Init+0x9c>)
 80006a8:	f001 fd68 	bl	800217c <HAL_TIM_Base_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006b2:	f000 f913 	bl	80008dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_TIM1_Init+0x9c>)
 80006c4:	f001 ff14 	bl	80024f0 <HAL_TIM_ConfigClockSource>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006ce:	f000 f905 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <MX_TIM1_Init+0x9c>)
 80006e0:	f002 f91a 	bl	8002918 <HAL_TIMEx_MasterConfigSynchronization>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80006ea:	f000 f8f7 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000002c 	.word	0x2000002c
 80006fc:	40010000 	.word	0x40010000

08000700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART1_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000738:	f002 f970 	bl	8002a1c <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f8cb 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000074 	.word	0x20000074
 8000750:	40011000 	.word	0x40011000

08000754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_DMA_Init+0x3c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <MX_DMA_Init+0x3c>)
 8000764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_DMA_Init+0x3c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2105      	movs	r1, #5
 800077a:	2046      	movs	r0, #70	; 0x46
 800077c:	f000 fb55 	bl	8000e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000780:	2046      	movs	r0, #70	; 0x46
 8000782:	f000 fb6e 	bl	8000e62 <HAL_NVIC_EnableIRQ>

}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a25      	ldr	r2, [pc, #148]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_GPIO_Init+0xb4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000804:	4811      	ldr	r0, [pc, #68]	; (800084c <MX_GPIO_Init+0xb8>)
 8000806:	f001 f847 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 800080a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	480a      	ldr	r0, [pc, #40]	; (800084c <MX_GPIO_Init+0xb8>)
 8000824:	f000 feb4 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000828:	2301      	movs	r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_GPIO_Init+0xbc>)
 800083c:	f000 fea8 	bl	8001590 <HAL_GPIO_Init>

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40020800 	.word	0x40020800
 8000850:	40020000 	.word	0x40020000

08000854 <RJVert>:
 * @retval None
 */

void
RJVert(void* ibus, uint16_t data)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	807b      	strh	r3, [r7, #2]
  if (data > IBUS_JOY_MAX - 50 && data < IBUS_JOY_MAX)
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	f240 729e 	movw	r2, #1950	; 0x79e
 8000866:	4293      	cmp	r3, r2
 8000868:	d90a      	bls.n	8000880 <RJVert+0x2c>
 800086a:	887b      	ldrh	r3, [r7, #2]
 800086c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000870:	d206      	bcs.n	8000880 <RJVert+0x2c>
    {
      HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000878:	4807      	ldr	r0, [pc, #28]	; (8000898 <RJVert+0x44>)
 800087a:	f001 f80d 	bl	8001898 <HAL_GPIO_WritePin>
 800087e:	e006      	b.n	800088e <RJVert+0x3a>
    }
  else
    {
      HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <RJVert+0x44>)
 8000888:	f001 f806 	bl	8001898 <HAL_GPIO_WritePin>
    }
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40020800 	.word	0x40020800

0800089c <HAL_UART_RxCpltCallback>:
    }
}

void
HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  IBUS_Receive_IT(ibus, huart);
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <HAL_UART_RxCpltCallback+0x1c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 f92e 	bl	8003b0c <IBUS_Receive_IT>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000011c 	.word	0x2000011c

080008bc <StartDefaultTask>:

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
    {
      IBUS_Receive(ibus);
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <StartDefaultTask+0x1c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f003 f8c5 	bl	8003a58 <IBUS_Receive>
      osDelay (10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f003 fbb8 	bl	8004044 <osDelay>
      IBUS_Receive(ibus);
 80008d4:	e7f6      	b.n	80008c4 <StartDefaultTask+0x8>
 80008d6:	bf00      	nop
 80008d8:	2000011c 	.word	0x2000011c

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_MspInit+0x54>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a11      	ldr	r2, [pc, #68]	; (800093c <HAL_MspInit+0x54>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_MspInit+0x54>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_MspInit+0x54>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_MspInit+0x54>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_MspInit+0x54>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	210f      	movs	r1, #15
 800092a:	f06f 0001 	mvn.w	r0, #1
 800092e:	f000 fa7c 	bl	8000e2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_TIM_Base_MspInit+0x48>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d115      	bne.n	800097e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_TIM_Base_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <HAL_TIM_Base_MspInit+0x4c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_TIM_Base_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2105      	movs	r1, #5
 8000972:	2019      	movs	r0, #25
 8000974:	f000 fa59 	bl	8000e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000978:	2019      	movs	r0, #25
 800097a:	f000 fa72 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40010000 	.word	0x40010000
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a34      	ldr	r2, [pc, #208]	; (8000a80 <HAL_UART_MspInit+0xf0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d161      	bne.n	8000a76 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <HAL_UART_MspInit+0xf4>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a32      	ldr	r2, [pc, #200]	; (8000a84 <HAL_UART_MspInit+0xf4>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <HAL_UART_MspInit+0xf4>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <HAL_UART_MspInit+0xf4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a2b      	ldr	r2, [pc, #172]	; (8000a84 <HAL_UART_MspInit+0xf4>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <HAL_UART_MspInit+0xf4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ea:	23c0      	movs	r3, #192	; 0xc0
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009fa:	2307      	movs	r3, #7
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4820      	ldr	r0, [pc, #128]	; (8000a88 <HAL_UART_MspInit+0xf8>)
 8000a06:	f000 fdc3 	bl	8001590 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000a0a:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a0c:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <HAL_UART_MspInit+0x100>)
 8000a0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000a10:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a16:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a1a:	2240      	movs	r2, #64	; 0x40
 8000a1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a4a:	4810      	ldr	r0, [pc, #64]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a4c:	f000 fa24 	bl	8000e98 <HAL_DMA_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000a56:	f7ff ff41 	bl	80008dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_UART_MspInit+0xfc>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2105      	movs	r1, #5
 8000a6a:	2025      	movs	r0, #37	; 0x25
 8000a6c:	f000 f9dd 	bl	8000e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a70:	2025      	movs	r0, #37	; 0x25
 8000a72:	f000 f9f6 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40011000 	.word	0x40011000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	200000b8 	.word	0x200000b8
 8000a90:	400264b8 	.word	0x400264b8

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f8b6 	bl	8000c34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ac8:	f004 feec 	bl	80058a4 <xTaskGetSchedulerState>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d001      	beq.n	8000ad6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ad2:	f005 fcd1 	bl	8006478 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ae2:	f001 fbfd 	bl	80022e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000002c 	.word	0x2000002c

08000af0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USART1_IRQHandler+0x10>)
 8000af6:	f002 f80f 	bl	8002b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000074 	.word	0x20000074

08000b04 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <DMA2_Stream7_IRQHandler+0x10>)
 8000b0a:	f000 fb05 	bl	8001118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000b8 	.word	0x200000b8

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b42:	490e      	ldr	r1, [pc, #56]	; (8000b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b58:	4c0b      	ldr	r4, [pc, #44]	; (8000b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b66:	f7ff ffd7 	bl	8000b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f005 feff 	bl	800696c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fcc9 	bl	8000504 <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b80:	08006ac0 	.word	0x08006ac0
  ldr r2, =_sbss
 8000b84:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b88:	20004a8c 	.word	0x20004a8c

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_Init+0x40>)
 8000b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_Init+0x40>)
 8000ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x40>)
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f92b 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fe90 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f943 	bl	8000e7e <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f90b 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000120 	.word	0x20000120

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000120 	.word	0x20000120

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	; (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f7ff ff8e 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff29 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff3e 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff8e 	bl	8000d68 <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff31 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffa2 	bl	8000dd0 <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff feda 	bl	8000c5c <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e099      	b.n	8000fe8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0201 	bic.w	r2, r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ed4:	e00f      	b.n	8000ef6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ed6:	f7ff fec1 	bl	8000c5c <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b05      	cmp	r3, #5
 8000ee2:	d908      	bls.n	8000ef6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2203      	movs	r2, #3
 8000eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e078      	b.n	8000fe8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1e8      	bne.n	8000ed6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <HAL_DMA_Init+0x158>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d107      	bne.n	8000f60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f023 0307 	bic.w	r3, r3, #7
 8000f76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d117      	bne.n	8000fba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00e      	beq.n	8000fba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 fa7b 	bl	8001498 <DMA_CheckFifoParam>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d008      	beq.n	8000fba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2240      	movs	r2, #64	; 0x40
 8000fac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e016      	b.n	8000fe8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 fa32 	bl	800142c <DMA_CalcBaseAndBitshift>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd0:	223f      	movs	r2, #63	; 0x3f
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	f010803f 	.word	0xf010803f

08000ff4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001000:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001002:	f7ff fe2b 	bl	8000c5c <HAL_GetTick>
 8001006:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d008      	beq.n	8001026 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e052      	b.n	80010cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0216 	bic.w	r2, r2, #22
 8001034:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	695a      	ldr	r2, [r3, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001044:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <HAL_DMA_Abort+0x62>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0208 	bic.w	r2, r2, #8
 8001064:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001076:	e013      	b.n	80010a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001078:	f7ff fdf0 	bl	8000c5c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b05      	cmp	r3, #5
 8001084:	d90c      	bls.n	80010a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2220      	movs	r2, #32
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2203      	movs	r2, #3
 8001090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e015      	b.n	80010cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1e4      	bne.n	8001078 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b2:	223f      	movs	r2, #63	; 0x3f
 80010b4:	409a      	lsls	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d004      	beq.n	80010f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00c      	b.n	800110c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2205      	movs	r2, #5
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0201 	bic.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001124:	4b8e      	ldr	r3, [pc, #568]	; (8001360 <HAL_DMA_IRQHandler+0x248>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a8e      	ldr	r2, [pc, #568]	; (8001364 <HAL_DMA_IRQHandler+0x24c>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	0a9b      	lsrs	r3, r3, #10
 8001130:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001142:	2208      	movs	r2, #8
 8001144:	409a      	lsls	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01a      	beq.n	8001184 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0204 	bic.w	r2, r2, #4
 800116a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001170:	2208      	movs	r2, #8
 8001172:	409a      	lsls	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117c:	f043 0201 	orr.w	r2, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001188:	2201      	movs	r2, #1
 800118a:	409a      	lsls	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d012      	beq.n	80011ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a6:	2201      	movs	r2, #1
 80011a8:	409a      	lsls	r2, r3
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b2:	f043 0202 	orr.w	r2, r3, #2
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011be:	2204      	movs	r2, #4
 80011c0:	409a      	lsls	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d012      	beq.n	80011f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00b      	beq.n	80011f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011dc:	2204      	movs	r2, #4
 80011de:	409a      	lsls	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e8:	f043 0204 	orr.w	r2, r3, #4
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f4:	2210      	movs	r2, #16
 80011f6:	409a      	lsls	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d043      	beq.n	8001288 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d03c      	beq.n	8001288 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001212:	2210      	movs	r2, #16
 8001214:	409a      	lsls	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d018      	beq.n	800125a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d108      	bne.n	8001248 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	2b00      	cmp	r3, #0
 800123c:	d024      	beq.n	8001288 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4798      	blx	r3
 8001246:	e01f      	b.n	8001288 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124c:	2b00      	cmp	r3, #0
 800124e:	d01b      	beq.n	8001288 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	4798      	blx	r3
 8001258:	e016      	b.n	8001288 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d107      	bne.n	8001278 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0208 	bic.w	r2, r2, #8
 8001276:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128c:	2220      	movs	r2, #32
 800128e:	409a      	lsls	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 808f 	beq.w	80013b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 8087 	beq.w	80013b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ae:	2220      	movs	r2, #32
 80012b0:	409a      	lsls	r2, r3
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d136      	bne.n	8001330 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0216 	bic.w	r2, r2, #22
 80012d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <HAL_DMA_IRQHandler+0x1da>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0208 	bic.w	r2, r2, #8
 8001300:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001306:	223f      	movs	r2, #63	; 0x3f
 8001308:	409a      	lsls	r2, r3
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001322:	2b00      	cmp	r3, #0
 8001324:	d07e      	beq.n	8001424 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	4798      	blx	r3
        }
        return;
 800132e:	e079      	b.n	8001424 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d01d      	beq.n	800137a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10d      	bne.n	8001368 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	2b00      	cmp	r3, #0
 8001352:	d031      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	4798      	blx	r3
 800135c:	e02c      	b.n	80013b8 <HAL_DMA_IRQHandler+0x2a0>
 800135e:	bf00      	nop
 8001360:	20000000 	.word	0x20000000
 8001364:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136c:	2b00      	cmp	r3, #0
 800136e:	d023      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	4798      	blx	r3
 8001378:	e01e      	b.n	80013b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10f      	bne.n	80013a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0210 	bic.w	r2, r2, #16
 8001396:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d032      	beq.n	8001426 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d022      	beq.n	8001412 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2205      	movs	r2, #5
 80013d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	3301      	adds	r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d307      	bcc.n	8001400 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f2      	bne.n	80013e4 <HAL_DMA_IRQHandler+0x2cc>
 80013fe:	e000      	b.n	8001402 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001400:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	4798      	blx	r3
 8001422:	e000      	b.n	8001426 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001424:	bf00      	nop
    }
  }
}
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3b10      	subs	r3, #16
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <DMA_CalcBaseAndBitshift+0x64>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <DMA_CalcBaseAndBitshift+0x68>)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d909      	bls.n	800146e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001462:	f023 0303 	bic.w	r3, r3, #3
 8001466:	1d1a      	adds	r2, r3, #4
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	659a      	str	r2, [r3, #88]	; 0x58
 800146c:	e007      	b.n	800147e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	aaaaaaab 	.word	0xaaaaaaab
 8001494:	08006aa8 	.word	0x08006aa8

08001498 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d11f      	bne.n	80014f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d856      	bhi.n	8001566 <DMA_CheckFifoParam+0xce>
 80014b8:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <DMA_CheckFifoParam+0x28>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080014d1 	.word	0x080014d1
 80014c4:	080014e3 	.word	0x080014e3
 80014c8:	080014d1 	.word	0x080014d1
 80014cc:	08001567 	.word	0x08001567
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d046      	beq.n	800156a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014e0:	e043      	b.n	800156a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014ea:	d140      	bne.n	800156e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014f0:	e03d      	b.n	800156e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014fa:	d121      	bne.n	8001540 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d837      	bhi.n	8001572 <DMA_CheckFifoParam+0xda>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <DMA_CheckFifoParam+0x70>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001519 	.word	0x08001519
 800150c:	0800151f 	.word	0x0800151f
 8001510:	08001519 	.word	0x08001519
 8001514:	08001531 	.word	0x08001531
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
      break;
 800151c:	e030      	b.n	8001580 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d025      	beq.n	8001576 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800152e:	e022      	b.n	8001576 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001534:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001538:	d11f      	bne.n	800157a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800153e:	e01c      	b.n	800157a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d903      	bls.n	800154e <DMA_CheckFifoParam+0xb6>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d003      	beq.n	8001554 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800154c:	e018      	b.n	8001580 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
      break;
 8001552:	e015      	b.n	8001580 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00e      	beq.n	800157e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
      break;
 8001564:	e00b      	b.n	800157e <DMA_CheckFifoParam+0xe6>
      break;
 8001566:	bf00      	nop
 8001568:	e00a      	b.n	8001580 <DMA_CheckFifoParam+0xe8>
      break;
 800156a:	bf00      	nop
 800156c:	e008      	b.n	8001580 <DMA_CheckFifoParam+0xe8>
      break;
 800156e:	bf00      	nop
 8001570:	e006      	b.n	8001580 <DMA_CheckFifoParam+0xe8>
      break;
 8001572:	bf00      	nop
 8001574:	e004      	b.n	8001580 <DMA_CheckFifoParam+0xe8>
      break;
 8001576:	bf00      	nop
 8001578:	e002      	b.n	8001580 <DMA_CheckFifoParam+0xe8>
      break;   
 800157a:	bf00      	nop
 800157c:	e000      	b.n	8001580 <DMA_CheckFifoParam+0xe8>
      break;
 800157e:	bf00      	nop
    }
  } 
  
  return status; 
 8001580:	7bfb      	ldrb	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	e159      	b.n	8001860 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f040 8148 	bne.w	800185a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d005      	beq.n	80015e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d130      	bne.n	8001644 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001618:	2201      	movs	r2, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 0201 	and.w	r2, r3, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b03      	cmp	r3, #3
 800164e:	d017      	beq.n	8001680 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d123      	bne.n	80016d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	08da      	lsrs	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3208      	adds	r2, #8
 8001694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	69b9      	ldr	r1, [r7, #24]
 80016d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0203 	and.w	r2, r3, #3
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80a2 	beq.w	800185a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b57      	ldr	r3, [pc, #348]	; (8001878 <HAL_GPIO_Init+0x2e8>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a56      	ldr	r2, [pc, #344]	; (8001878 <HAL_GPIO_Init+0x2e8>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b54      	ldr	r3, [pc, #336]	; (8001878 <HAL_GPIO_Init+0x2e8>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001732:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_GPIO_Init+0x2ec>)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3302      	adds	r3, #2
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	220f      	movs	r2, #15
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a49      	ldr	r2, [pc, #292]	; (8001880 <HAL_GPIO_Init+0x2f0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d019      	beq.n	8001792 <HAL_GPIO_Init+0x202>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a48      	ldr	r2, [pc, #288]	; (8001884 <HAL_GPIO_Init+0x2f4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0x1fe>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a47      	ldr	r2, [pc, #284]	; (8001888 <HAL_GPIO_Init+0x2f8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00d      	beq.n	800178a <HAL_GPIO_Init+0x1fa>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a46      	ldr	r2, [pc, #280]	; (800188c <HAL_GPIO_Init+0x2fc>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x1f6>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a45      	ldr	r2, [pc, #276]	; (8001890 <HAL_GPIO_Init+0x300>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_GPIO_Init+0x1f2>
 800177e:	2304      	movs	r3, #4
 8001780:	e008      	b.n	8001794 <HAL_GPIO_Init+0x204>
 8001782:	2307      	movs	r3, #7
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x204>
 8001786:	2303      	movs	r3, #3
 8001788:	e004      	b.n	8001794 <HAL_GPIO_Init+0x204>
 800178a:	2302      	movs	r3, #2
 800178c:	e002      	b.n	8001794 <HAL_GPIO_Init+0x204>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x204>
 8001792:	2300      	movs	r3, #0
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	f002 0203 	and.w	r2, r2, #3
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	4093      	lsls	r3, r2
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a4:	4935      	ldr	r1, [pc, #212]	; (800187c <HAL_GPIO_Init+0x2ec>)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3302      	adds	r3, #2
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b2:	4b38      	ldr	r3, [pc, #224]	; (8001894 <HAL_GPIO_Init+0x304>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017d6:	4a2f      	ldr	r2, [pc, #188]	; (8001894 <HAL_GPIO_Init+0x304>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017dc:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_GPIO_Init+0x304>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001800:	4a24      	ldr	r2, [pc, #144]	; (8001894 <HAL_GPIO_Init+0x304>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_GPIO_Init+0x304>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800182a:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <HAL_GPIO_Init+0x304>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_GPIO_Init+0x304>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001854:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <HAL_GPIO_Init+0x304>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3301      	adds	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	f67f aea2 	bls.w	80015ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40013800 	.word	0x40013800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00
 8001890:	40021000 	.word	0x40021000
 8001894:	40013c00 	.word	0x40013c00

08001898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
 80018a4:	4613      	mov	r3, r2
 80018a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a8:	787b      	ldrb	r3, [r7, #1]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ae:	887a      	ldrh	r2, [r7, #2]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018b4:	e003      	b.n	80018be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018b6:	887b      	ldrh	r3, [r7, #2]
 80018b8:	041a      	lsls	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	619a      	str	r2, [r3, #24]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e267      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d075      	beq.n	80019d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ea:	4b88      	ldr	r3, [pc, #544]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d00c      	beq.n	8001910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f6:	4b85      	ldr	r3, [pc, #532]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d112      	bne.n	8001928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001902:	4b82      	ldr	r3, [pc, #520]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800190e:	d10b      	bne.n	8001928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	4b7e      	ldr	r3, [pc, #504]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d05b      	beq.n	80019d4 <HAL_RCC_OscConfig+0x108>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d157      	bne.n	80019d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e242      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d106      	bne.n	8001940 <HAL_RCC_OscConfig+0x74>
 8001932:	4b76      	ldr	r3, [pc, #472]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a75      	ldr	r2, [pc, #468]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e01d      	b.n	800197c <HAL_RCC_OscConfig+0xb0>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x98>
 800194a:	4b70      	ldr	r3, [pc, #448]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a6f      	ldr	r2, [pc, #444]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a6c      	ldr	r2, [pc, #432]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0xb0>
 8001964:	4b69      	ldr	r3, [pc, #420]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a68      	ldr	r2, [pc, #416]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a65      	ldr	r2, [pc, #404]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d013      	beq.n	80019ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff f96a 	bl	8000c5c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff f966 	bl	8000c5c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e207      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b5b      	ldr	r3, [pc, #364]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0xc0>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff f956 	bl	8000c5c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff f952 	bl	8000c5c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e1f3      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c6:	4b51      	ldr	r3, [pc, #324]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0xe8>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d063      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019e2:	4b4a      	ldr	r3, [pc, #296]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d11c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fa:	4b44      	ldr	r3, [pc, #272]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d116      	bne.n	8001a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_RCC_OscConfig+0x152>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e1c7      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4937      	ldr	r1, [pc, #220]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	e03a      	b.n	8001aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a3c:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f90b 	bl	8000c5c <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff f907 	bl	8000c5c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e1a8      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a68:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4925      	ldr	r1, [pc, #148]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
 8001a7c:	e015      	b.n	8001aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff f8ea 	bl	8000c5c <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a8c:	f7ff f8e6 	bl	8000c5c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e187      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d036      	beq.n	8001b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d016      	beq.n	8001aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_RCC_OscConfig+0x248>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff f8ca 	bl	8000c5c <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff f8c6 	bl	8000c5c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e167      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_OscConfig+0x240>)
 8001ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x200>
 8001aea:	e01b      	b.n	8001b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_RCC_OscConfig+0x248>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af2:	f7ff f8b3 	bl	8000c5c <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af8:	e00e      	b.n	8001b18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afa:	f7ff f8af 	bl	8000c5c <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d907      	bls.n	8001b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e150      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	42470000 	.word	0x42470000
 8001b14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	4b88      	ldr	r3, [pc, #544]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1ea      	bne.n	8001afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8097 	beq.w	8001c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b36:	4b81      	ldr	r3, [pc, #516]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a7c      	ldr	r2, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b7a      	ldr	r3, [pc, #488]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b62:	4b77      	ldr	r3, [pc, #476]	; (8001d40 <HAL_RCC_OscConfig+0x474>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d118      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6e:	4b74      	ldr	r3, [pc, #464]	; (8001d40 <HAL_RCC_OscConfig+0x474>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a73      	ldr	r2, [pc, #460]	; (8001d40 <HAL_RCC_OscConfig+0x474>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f86f 	bl	8000c5c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b82:	f7ff f86b 	bl	8000c5c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e10c      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	4b6a      	ldr	r3, [pc, #424]	; (8001d40 <HAL_RCC_OscConfig+0x474>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x2ea>
 8001ba8:	4b64      	ldr	r3, [pc, #400]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bac:	4a63      	ldr	r2, [pc, #396]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb4:	e01c      	b.n	8001bf0 <HAL_RCC_OscConfig+0x324>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b05      	cmp	r3, #5
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x30c>
 8001bbe:	4b5f      	ldr	r3, [pc, #380]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	4a5e      	ldr	r2, [pc, #376]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bca:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bce:	4a5b      	ldr	r2, [pc, #364]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd6:	e00b      	b.n	8001bf0 <HAL_RCC_OscConfig+0x324>
 8001bd8:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	4a57      	ldr	r2, [pc, #348]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	6713      	str	r3, [r2, #112]	; 0x70
 8001be4:	4b55      	ldr	r3, [pc, #340]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	4a54      	ldr	r2, [pc, #336]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001bea:	f023 0304 	bic.w	r3, r3, #4
 8001bee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d015      	beq.n	8001c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff f830 	bl	8000c5c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7ff f82c 	bl	8000c5c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e0cb      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c16:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0ee      	beq.n	8001c00 <HAL_RCC_OscConfig+0x334>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7ff f81a 	bl	8000c5c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7ff f816 	bl	8000c5c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e0b5      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ee      	bne.n	8001c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d105      	bne.n	8001c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c54:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	4a38      	ldr	r2, [pc, #224]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80a1 	beq.w	8001dac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c6a:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d05c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d141      	bne.n	8001d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <HAL_RCC_OscConfig+0x478>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7fe ffea 	bl	8000c5c <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe ffe6 	bl	8000c5c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e087      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	019b      	lsls	r3, r3, #6
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	085b      	lsrs	r3, r3, #1
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	061b      	lsls	r3, r3, #24
 8001cce:	491b      	ldr	r1, [pc, #108]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_RCC_OscConfig+0x478>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7fe ffbf 	bl	8000c5c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7fe ffbb 	bl	8000c5c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e05c      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x416>
 8001d00:	e054      	b.n	8001dac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_RCC_OscConfig+0x478>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7fe ffa8 	bl	8000c5c <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d10:	f7fe ffa4 	bl	8000c5c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e045      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_OscConfig+0x470>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x444>
 8001d2e:	e03d      	b.n	8001dac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d107      	bne.n	8001d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e038      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40007000 	.word	0x40007000
 8001d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_RCC_OscConfig+0x4ec>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d028      	beq.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d121      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d11a      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d78:	4013      	ands	r3, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d111      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	3b01      	subs	r3, #1
 8001d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0cc      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b68      	ldr	r3, [pc, #416]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d90c      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b65      	ldr	r3, [pc, #404]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0b8      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e10:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a52      	ldr	r2, [pc, #328]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	494d      	ldr	r1, [pc, #308]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d044      	beq.n	8001edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d119      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e07f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e06f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e067      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9a:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f023 0203 	bic.w	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4934      	ldr	r1, [pc, #208]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eac:	f7fe fed6 	bl	8000c5c <HAL_GetTick>
 8001eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb4:	f7fe fed2 	bl	8000c5c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e04f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 020c 	and.w	r2, r3, #12
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d1eb      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d20c      	bcs.n	8001f04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e032      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4916      	ldr	r1, [pc, #88]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	490e      	ldr	r1, [pc, #56]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f42:	f000 f821 	bl	8001f88 <HAL_RCC_GetSysClockFreq>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	490a      	ldr	r1, [pc, #40]	; (8001f7c <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	5ccb      	ldrb	r3, [r1, r3]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fe36 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023c00 	.word	0x40023c00
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	08006a90 	.word	0x08006a90
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f8c:	b090      	sub	sp, #64	; 0x40
 8001f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
 8001f94:	2300      	movs	r3, #0
 8001f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f98:	2300      	movs	r3, #0
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fa0:	4b59      	ldr	r3, [pc, #356]	; (8002108 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d00d      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	f200 80a1 	bhi.w	80020f4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x34>
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d003      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fba:	e09b      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fbc:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_RCC_GetSysClockFreq+0x184>)
 8001fbe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001fc0:	e09b      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fc2:	4b53      	ldr	r3, [pc, #332]	; (8002110 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fc6:	e098      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc8:	4b4f      	ldr	r3, [pc, #316]	; (8002108 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd2:	4b4d      	ldr	r3, [pc, #308]	; (8002108 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d028      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fde:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	099b      	lsrs	r3, r3, #6
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	623b      	str	r3, [r7, #32]
 8001fe8:	627a      	str	r2, [r7, #36]	; 0x24
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4b47      	ldr	r3, [pc, #284]	; (8002110 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ff4:	fb03 f201 	mul.w	r2, r3, r1
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	fb00 f303 	mul.w	r3, r0, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	4a43      	ldr	r2, [pc, #268]	; (8002110 <HAL_RCC_GetSysClockFreq+0x188>)
 8002002:	fba0 1202 	umull	r1, r2, r0, r2
 8002006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002008:	460a      	mov	r2, r1
 800200a:	62ba      	str	r2, [r7, #40]	; 0x28
 800200c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800200e:	4413      	add	r3, r2
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002014:	2200      	movs	r2, #0
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	61fa      	str	r2, [r7, #28]
 800201a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800201e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002022:	f7fe f8dd 	bl	80001e0 <__aeabi_uldivmod>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4613      	mov	r3, r2
 800202c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202e:	e053      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <HAL_RCC_GetSysClockFreq+0x180>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	099b      	lsrs	r3, r3, #6
 8002036:	2200      	movs	r2, #0
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	617a      	str	r2, [r7, #20]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002042:	f04f 0b00 	mov.w	fp, #0
 8002046:	4652      	mov	r2, sl
 8002048:	465b      	mov	r3, fp
 800204a:	f04f 0000 	mov.w	r0, #0
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	0159      	lsls	r1, r3, #5
 8002054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002058:	0150      	lsls	r0, r2, #5
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	ebb2 080a 	subs.w	r8, r2, sl
 8002062:	eb63 090b 	sbc.w	r9, r3, fp
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002072:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002076:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800207a:	ebb2 0408 	subs.w	r4, r2, r8
 800207e:	eb63 0509 	sbc.w	r5, r3, r9
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	00eb      	lsls	r3, r5, #3
 800208c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002090:	00e2      	lsls	r2, r4, #3
 8002092:	4614      	mov	r4, r2
 8002094:	461d      	mov	r5, r3
 8002096:	eb14 030a 	adds.w	r3, r4, sl
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	eb45 030b 	adc.w	r3, r5, fp
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ae:	4629      	mov	r1, r5
 80020b0:	028b      	lsls	r3, r1, #10
 80020b2:	4621      	mov	r1, r4
 80020b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020b8:	4621      	mov	r1, r4
 80020ba:	028a      	lsls	r2, r1, #10
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c2:	2200      	movs	r2, #0
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	60fa      	str	r2, [r7, #12]
 80020c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020cc:	f7fe f888 	bl	80001e0 <__aeabi_uldivmod>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4613      	mov	r3, r2
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_GetSysClockFreq+0x180>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	3301      	adds	r3, #1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80020e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020f2:	e002      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetSysClockFreq+0x184>)
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3740      	adds	r7, #64	; 0x40
 8002100:	46bd      	mov	sp, r7
 8002102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	00f42400 	.word	0x00f42400
 8002110:	017d7840 	.word	0x017d7840

08002114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <HAL_RCC_GetHCLKFreq+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000000 	.word	0x20000000

0800212c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002130:	f7ff fff0 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0a9b      	lsrs	r3, r3, #10
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4903      	ldr	r1, [pc, #12]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	08006aa0 	.word	0x08006aa0

08002154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002158:	f7ff ffdc 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0b5b      	lsrs	r3, r3, #13
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4903      	ldr	r1, [pc, #12]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	08006aa0 	.word	0x08006aa0

0800217c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e041      	b.n	8002212 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe fbcc 	bl	8000940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3304      	adds	r3, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f000 fa92 	bl	80026e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d001      	beq.n	8002234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e044      	b.n	80022be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <HAL_TIM_Base_Start_IT+0xb0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d018      	beq.n	8002288 <HAL_TIM_Base_Start_IT+0x6c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225e:	d013      	beq.n	8002288 <HAL_TIM_Base_Start_IT+0x6c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00e      	beq.n	8002288 <HAL_TIM_Base_Start_IT+0x6c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d009      	beq.n	8002288 <HAL_TIM_Base_Start_IT+0x6c>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d004      	beq.n	8002288 <HAL_TIM_Base_Start_IT+0x6c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a16      	ldr	r2, [pc, #88]	; (80022dc <HAL_TIM_Base_Start_IT+0xc0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d111      	bne.n	80022ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b06      	cmp	r3, #6
 8002298:	d010      	beq.n	80022bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022aa:	e007      	b.n	80022bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40010000 	.word	0x40010000
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40000800 	.word	0x40000800
 80022d8:	40000c00 	.word	0x40000c00
 80022dc:	40014000 	.word	0x40014000

080022e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d122      	bne.n	800233c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b02      	cmp	r3, #2
 8002302:	d11b      	bne.n	800233c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0202 	mvn.w	r2, #2
 800230c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f9bf 	bl	80026a6 <HAL_TIM_IC_CaptureCallback>
 8002328:	e005      	b.n	8002336 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f9b1 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f9c2 	bl	80026ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b04      	cmp	r3, #4
 8002348:	d122      	bne.n	8002390 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b04      	cmp	r3, #4
 8002356:	d11b      	bne.n	8002390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0204 	mvn.w	r2, #4
 8002360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2202      	movs	r2, #2
 8002366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f995 	bl	80026a6 <HAL_TIM_IC_CaptureCallback>
 800237c:	e005      	b.n	800238a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f987 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f998 	bl	80026ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b08      	cmp	r3, #8
 800239c:	d122      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d11b      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0208 	mvn.w	r2, #8
 80023b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2204      	movs	r2, #4
 80023ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f96b 	bl	80026a6 <HAL_TIM_IC_CaptureCallback>
 80023d0:	e005      	b.n	80023de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f95d 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f96e 	bl	80026ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d122      	bne.n	8002438 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d11b      	bne.n	8002438 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0210 	mvn.w	r2, #16
 8002408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2208      	movs	r2, #8
 800240e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f941 	bl	80026a6 <HAL_TIM_IC_CaptureCallback>
 8002424:	e005      	b.n	8002432 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f933 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f944 	bl	80026ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b01      	cmp	r3, #1
 8002444:	d10e      	bne.n	8002464 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0201 	mvn.w	r2, #1
 800245c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f90d 	bl	800267e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246e:	2b80      	cmp	r3, #128	; 0x80
 8002470:	d10e      	bne.n	8002490 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	2b80      	cmp	r3, #128	; 0x80
 800247e:	d107      	bne.n	8002490 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fabc 	bl	8002a08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b40      	cmp	r3, #64	; 0x40
 800249c:	d10e      	bne.n	80024bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b40      	cmp	r3, #64	; 0x40
 80024aa:	d107      	bne.n	80024bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f909 	bl	80026ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d107      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0220 	mvn.w	r2, #32
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa86 	bl	80029f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_TIM_ConfigClockSource+0x1c>
 8002508:	2302      	movs	r3, #2
 800250a:	e0b4      	b.n	8002676 <HAL_TIM_ConfigClockSource+0x186>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800252a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002544:	d03e      	beq.n	80025c4 <HAL_TIM_ConfigClockSource+0xd4>
 8002546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254a:	f200 8087 	bhi.w	800265c <HAL_TIM_ConfigClockSource+0x16c>
 800254e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002552:	f000 8086 	beq.w	8002662 <HAL_TIM_ConfigClockSource+0x172>
 8002556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255a:	d87f      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 800255c:	2b70      	cmp	r3, #112	; 0x70
 800255e:	d01a      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0xa6>
 8002560:	2b70      	cmp	r3, #112	; 0x70
 8002562:	d87b      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b60      	cmp	r3, #96	; 0x60
 8002566:	d050      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x11a>
 8002568:	2b60      	cmp	r3, #96	; 0x60
 800256a:	d877      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b50      	cmp	r3, #80	; 0x50
 800256e:	d03c      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0xfa>
 8002570:	2b50      	cmp	r3, #80	; 0x50
 8002572:	d873      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b40      	cmp	r3, #64	; 0x40
 8002576:	d058      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x13a>
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d86f      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b30      	cmp	r3, #48	; 0x30
 800257e:	d064      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x15a>
 8002580:	2b30      	cmp	r3, #48	; 0x30
 8002582:	d86b      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 8002584:	2b20      	cmp	r3, #32
 8002586:	d060      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x15a>
 8002588:	2b20      	cmp	r3, #32
 800258a:	d867      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d05c      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x15a>
 8002590:	2b10      	cmp	r3, #16
 8002592:	d05a      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x15a>
 8002594:	e062      	b.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6899      	ldr	r1, [r3, #8]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f000 f997 	bl	80028d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	609a      	str	r2, [r3, #8]
      break;
 80025c2:	e04f      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6899      	ldr	r1, [r3, #8]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f000 f980 	bl	80028d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025e6:	609a      	str	r2, [r3, #8]
      break;
 80025e8:	e03c      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f000 f8f4 	bl	80027e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2150      	movs	r1, #80	; 0x50
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f94d 	bl	80028a2 <TIM_ITRx_SetConfig>
      break;
 8002608:	e02c      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	461a      	mov	r2, r3
 8002618:	f000 f913 	bl	8002842 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2160      	movs	r1, #96	; 0x60
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f93d 	bl	80028a2 <TIM_ITRx_SetConfig>
      break;
 8002628:	e01c      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	461a      	mov	r2, r3
 8002638:	f000 f8d4 	bl	80027e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2140      	movs	r1, #64	; 0x40
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f92d 	bl	80028a2 <TIM_ITRx_SetConfig>
      break;
 8002648:	e00c      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4619      	mov	r1, r3
 8002654:	4610      	mov	r0, r2
 8002656:	f000 f924 	bl	80028a2 <TIM_ITRx_SetConfig>
      break;
 800265a:	e003      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
      break;
 8002660:	e000      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a34      	ldr	r2, [pc, #208]	; (80027c8 <TIM_Base_SetConfig+0xe4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00f      	beq.n	800271c <TIM_Base_SetConfig+0x38>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d00b      	beq.n	800271c <TIM_Base_SetConfig+0x38>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a31      	ldr	r2, [pc, #196]	; (80027cc <TIM_Base_SetConfig+0xe8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d007      	beq.n	800271c <TIM_Base_SetConfig+0x38>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a30      	ldr	r2, [pc, #192]	; (80027d0 <TIM_Base_SetConfig+0xec>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d003      	beq.n	800271c <TIM_Base_SetConfig+0x38>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <TIM_Base_SetConfig+0xf0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d108      	bne.n	800272e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a25      	ldr	r2, [pc, #148]	; (80027c8 <TIM_Base_SetConfig+0xe4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01b      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d017      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a22      	ldr	r2, [pc, #136]	; (80027cc <TIM_Base_SetConfig+0xe8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a21      	ldr	r2, [pc, #132]	; (80027d0 <TIM_Base_SetConfig+0xec>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00f      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <TIM_Base_SetConfig+0xf0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00b      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <TIM_Base_SetConfig+0xf4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <TIM_Base_SetConfig+0xf8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d003      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <TIM_Base_SetConfig+0xfc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <TIM_Base_SetConfig+0xe4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d103      	bne.n	80027b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	615a      	str	r2, [r3, #20]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40010000 	.word	0x40010000
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40000800 	.word	0x40000800
 80027d4:	40000c00 	.word	0x40000c00
 80027d8:	40014000 	.word	0x40014000
 80027dc:	40014400 	.word	0x40014400
 80027e0:	40014800 	.word	0x40014800

080027e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	f023 0201 	bic.w	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800280e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f023 030a 	bic.w	r3, r3, #10
 8002820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	621a      	str	r2, [r3, #32]
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002842:	b480      	push	{r7}
 8002844:	b087      	sub	sp, #28
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f023 0210 	bic.w	r2, r3, #16
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800286c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	031b      	lsls	r3, r3, #12
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800287e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	621a      	str	r2, [r3, #32]
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b085      	sub	sp, #20
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	f043 0307 	orr.w	r3, r3, #7
 80028c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	609a      	str	r2, [r3, #8]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	021a      	lsls	r2, r3, #8
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	609a      	str	r2, [r3, #8]
}
 800290c:	bf00      	nop
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800292c:	2302      	movs	r3, #2
 800292e:	e050      	b.n	80029d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d018      	beq.n	80029a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297c:	d013      	beq.n	80029a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a18      	ldr	r2, [pc, #96]	; (80029e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00e      	beq.n	80029a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d009      	beq.n	80029a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a15      	ldr	r2, [pc, #84]	; (80029ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d10c      	bne.n	80029c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40010000 	.word	0x40010000
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800
 80029ec:	40000c00 	.word	0x40000c00
 80029f0:	40014000 	.word	0x40014000

080029f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e03f      	b.n	8002aae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fd ffa4 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	; 0x24
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fcfd 	bl	8003460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d11d      	bne.n	8002b0c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_UART_Receive_IT+0x26>
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e016      	b.n	8002b0e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_UART_Receive_IT+0x38>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e00f      	b.n	8002b0e <HAL_UART_Receive_IT+0x58>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	461a      	mov	r2, r3
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fad4 	bl	80030b0 <UART_Start_Receive_IT>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	e000      	b.n	8002b0e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0ba      	sub	sp, #232	; 0xe8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_UART_IRQHandler+0x66>
 8002b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fbb7 	bl	80032ea <UART_Receive_IT>
      return;
 8002b7c:	e256      	b.n	800302c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80de 	beq.w	8002d44 <HAL_UART_IRQHandler+0x22c>
 8002b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d106      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80d1 	beq.w	8002d44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_UART_IRQHandler+0xae>
 8002bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_UART_IRQHandler+0xd2>
 8002bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f043 0202 	orr.w	r2, r3, #2
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_UART_IRQHandler+0xf6>
 8002bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f043 0204 	orr.w	r2, r3, #4
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d011      	beq.n	8002c3e <HAL_UART_IRQHandler+0x126>
 8002c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f043 0208 	orr.w	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 81ed 	beq.w	8003022 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_UART_IRQHandler+0x14e>
 8002c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fb42 	bl	80032ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <HAL_UART_IRQHandler+0x17a>
 8002c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d04f      	beq.n	8002d32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa4a 	bl	800312c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d141      	bne.n	8002d2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3314      	adds	r3, #20
 8002cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3314      	adds	r3, #20
 8002cce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1d9      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d013      	beq.n	8002d22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	4a7d      	ldr	r2, [pc, #500]	; (8002ef4 <HAL_UART_IRQHandler+0x3dc>)
 8002d00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe f9e4 	bl	80010d4 <HAL_DMA_Abort_IT>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d016      	beq.n	8002d40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	e00e      	b.n	8002d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f990 	bl	8003048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d28:	e00a      	b.n	8002d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f98c 	bl	8003048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d30:	e006      	b.n	8002d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f988 	bl	8003048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d3e:	e170      	b.n	8003022 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	bf00      	nop
    return;
 8002d42:	e16e      	b.n	8003022 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	f040 814a 	bne.w	8002fe2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8143 	beq.w	8002fe2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 813c 	beq.w	8002fe2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	f040 80b4 	bne.w	8002ef8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8140 	beq.w	8003026 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dae:	429a      	cmp	r2, r3
 8002db0:	f080 8139 	bcs.w	8003026 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc6:	f000 8088 	beq.w	8002eda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	330c      	adds	r3, #12
 8002dd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002df6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e06:	e841 2300 	strex	r3, r2, [r1]
 8002e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1d9      	bne.n	8002dca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3314      	adds	r3, #20
 8002e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e1      	bne.n	8002e16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3314      	adds	r3, #20
 8002e58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3314      	adds	r3, #20
 8002e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e3      	bne.n	8002e52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea2:	e853 3f00 	ldrex	r3, [r3]
 8002ea6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eaa:	f023 0310 	bic.w	r3, r3, #16
 8002eae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ebc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ebe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e3      	bne.n	8002e98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe f88d 	bl	8000ff4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f8b6 	bl	800305c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ef0:	e099      	b.n	8003026 <HAL_UART_IRQHandler+0x50e>
 8002ef2:	bf00      	nop
 8002ef4:	080031f3 	.word	0x080031f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 808b 	beq.w	800302a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8086 	beq.w	800302a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	330c      	adds	r3, #12
 8002f24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f42:	647a      	str	r2, [r7, #68]	; 0x44
 8002f44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e3      	bne.n	8002f1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	623b      	str	r3, [r7, #32]
   return(result);
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3314      	adds	r3, #20
 8002f76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f7a:	633a      	str	r2, [r7, #48]	; 0x30
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e3      	bne.n	8002f56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0310 	bic.w	r3, r3, #16
 8002fb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002fc0:	61fa      	str	r2, [r7, #28]
 8002fc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	69b9      	ldr	r1, [r7, #24]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e3      	bne.n	8002f9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f83e 	bl	800305c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fe0:	e023      	b.n	800302a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_UART_IRQHandler+0x4ea>
 8002fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f90d 	bl	800321a <UART_Transmit_IT>
    return;
 8003000:	e014      	b.n	800302c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00e      	beq.n	800302c <HAL_UART_IRQHandler+0x514>
 800300e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f94d 	bl	80032ba <UART_EndTransmit_IT>
    return;
 8003020:	e004      	b.n	800302c <HAL_UART_IRQHandler+0x514>
    return;
 8003022:	bf00      	nop
 8003024:	e002      	b.n	800302c <HAL_UART_IRQHandler+0x514>
      return;
 8003026:	bf00      	nop
 8003028:	e000      	b.n	800302c <HAL_UART_IRQHandler+0x514>
      return;
 800302a:	bf00      	nop
  }
}
 800302c:	37e8      	adds	r7, #232	; 0xe8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop

08003034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	2300      	movs	r3, #0
 8003082:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003094:	b2db      	uxtb	r3, r3
 8003096:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	4313      	orrs	r3, r2
 80030a2:	b2db      	uxtb	r3, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	88fa      	ldrh	r2, [r7, #6]
 80030ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2222      	movs	r2, #34	; 0x22
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0220 	orr.w	r2, r2, #32
 800311c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800312c:	b480      	push	{r7}
 800312e:	b095      	sub	sp, #84	; 0x54
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800314a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003154:	643a      	str	r2, [r7, #64]	; 0x40
 8003156:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800315a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e5      	bne.n	8003134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3314      	adds	r3, #20
 800316e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	e853 3f00 	ldrex	r3, [r3]
 8003176:	61fb      	str	r3, [r7, #28]
   return(result);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3314      	adds	r3, #20
 8003186:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003188:	62fa      	str	r2, [r7, #44]	; 0x2c
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800318e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003190:	e841 2300 	strex	r3, r2, [r1]
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e5      	bne.n	8003168 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d119      	bne.n	80031d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	330c      	adds	r3, #12
 80031aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f023 0310 	bic.w	r3, r3, #16
 80031ba:	647b      	str	r3, [r7, #68]	; 0x44
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	330c      	adds	r3, #12
 80031c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031c4:	61ba      	str	r2, [r7, #24]
 80031c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6979      	ldr	r1, [r7, #20]
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	613b      	str	r3, [r7, #16]
   return(result);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e5      	bne.n	80031a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031e6:	bf00      	nop
 80031e8:	3754      	adds	r7, #84	; 0x54
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7ff ff1b 	bl	8003048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b21      	cmp	r3, #33	; 0x21
 800322c:	d13e      	bne.n	80032ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003236:	d114      	bne.n	8003262 <UART_Transmit_IT+0x48>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d110      	bne.n	8003262 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003254:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	1c9a      	adds	r2, r3, #2
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	621a      	str	r2, [r3, #32]
 8003260:	e008      	b.n	8003274 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	1c59      	adds	r1, r3, #1
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6211      	str	r1, [r2, #32]
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29b      	uxth	r3, r3
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4619      	mov	r1, r3
 8003282:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10f      	bne.n	80032a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003296:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff feaa 	bl	8003034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b08c      	sub	sp, #48	; 0x30
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b22      	cmp	r3, #34	; 0x22
 80032fc:	f040 80ab 	bne.w	8003456 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003308:	d117      	bne.n	800333a <UART_Receive_IT+0x50>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d113      	bne.n	800333a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003312:	2300      	movs	r3, #0
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	b29b      	uxth	r3, r3
 8003324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003328:	b29a      	uxth	r2, r3
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	1c9a      	adds	r2, r3, #2
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	; 0x28
 8003338:	e026      	b.n	8003388 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003340:	2300      	movs	r3, #0
 8003342:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334c:	d007      	beq.n	800335e <UART_Receive_IT+0x74>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <UART_Receive_IT+0x82>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	e008      	b.n	800337e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003378:	b2da      	uxtb	r2, r3
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29b      	uxth	r3, r3
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4619      	mov	r1, r3
 8003396:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003398:	2b00      	cmp	r3, #0
 800339a:	d15a      	bne.n	8003452 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0220 	bic.w	r2, r2, #32
 80033aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d135      	bne.n	8003448 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	330c      	adds	r3, #12
 80033e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	613b      	str	r3, [r7, #16]
   return(result);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f023 0310 	bic.w	r3, r3, #16
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003402:	623a      	str	r2, [r7, #32]
 8003404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	69f9      	ldr	r1, [r7, #28]
 8003408:	6a3a      	ldr	r2, [r7, #32]
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e5      	bne.n	80033e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b10      	cmp	r3, #16
 8003422:	d10a      	bne.n	800343a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800343e:	4619      	mov	r1, r3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff fe0b 	bl	800305c <HAL_UARTEx_RxEventCallback>
 8003446:	e002      	b.n	800344e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7fd fa27 	bl	800089c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	e002      	b.n	8003458 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e000      	b.n	8003458 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	3730      	adds	r7, #48	; 0x30
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003464:	b0c0      	sub	sp, #256	; 0x100
 8003466:	af00      	add	r7, sp, #0
 8003468:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	68d9      	ldr	r1, [r3, #12]
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	ea40 0301 	orr.w	r3, r0, r1
 8003488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	431a      	orrs	r2, r3
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	431a      	orrs	r2, r3
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034b8:	f021 010c 	bic.w	r1, r1, #12
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034c6:	430b      	orrs	r3, r1
 80034c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034da:	6999      	ldr	r1, [r3, #24]
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	ea40 0301 	orr.w	r3, r0, r1
 80034e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4b8f      	ldr	r3, [pc, #572]	; (800372c <UART_SetConfig+0x2cc>)
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d005      	beq.n	8003500 <UART_SetConfig+0xa0>
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4b8d      	ldr	r3, [pc, #564]	; (8003730 <UART_SetConfig+0x2d0>)
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d104      	bne.n	800350a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003500:	f7fe fe28 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003504:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003508:	e003      	b.n	8003512 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800350a:	f7fe fe0f 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 800350e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351c:	f040 810c 	bne.w	8003738 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003524:	2200      	movs	r2, #0
 8003526:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800352a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800352e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003532:	4622      	mov	r2, r4
 8003534:	462b      	mov	r3, r5
 8003536:	1891      	adds	r1, r2, r2
 8003538:	65b9      	str	r1, [r7, #88]	; 0x58
 800353a:	415b      	adcs	r3, r3
 800353c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800353e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003542:	4621      	mov	r1, r4
 8003544:	eb12 0801 	adds.w	r8, r2, r1
 8003548:	4629      	mov	r1, r5
 800354a:	eb43 0901 	adc.w	r9, r3, r1
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800355a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800355e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003562:	4690      	mov	r8, r2
 8003564:	4699      	mov	r9, r3
 8003566:	4623      	mov	r3, r4
 8003568:	eb18 0303 	adds.w	r3, r8, r3
 800356c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003570:	462b      	mov	r3, r5
 8003572:	eb49 0303 	adc.w	r3, r9, r3
 8003576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003586:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800358a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800358e:	460b      	mov	r3, r1
 8003590:	18db      	adds	r3, r3, r3
 8003592:	653b      	str	r3, [r7, #80]	; 0x50
 8003594:	4613      	mov	r3, r2
 8003596:	eb42 0303 	adc.w	r3, r2, r3
 800359a:	657b      	str	r3, [r7, #84]	; 0x54
 800359c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035a4:	f7fc fe1c 	bl	80001e0 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4b61      	ldr	r3, [pc, #388]	; (8003734 <UART_SetConfig+0x2d4>)
 80035ae:	fba3 2302 	umull	r2, r3, r3, r2
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	011c      	lsls	r4, r3, #4
 80035b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	1891      	adds	r1, r2, r2
 80035ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80035d0:	415b      	adcs	r3, r3
 80035d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035d8:	4641      	mov	r1, r8
 80035da:	eb12 0a01 	adds.w	sl, r2, r1
 80035de:	4649      	mov	r1, r9
 80035e0:	eb43 0b01 	adc.w	fp, r3, r1
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035f8:	4692      	mov	sl, r2
 80035fa:	469b      	mov	fp, r3
 80035fc:	4643      	mov	r3, r8
 80035fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003602:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003606:	464b      	mov	r3, r9
 8003608:	eb4b 0303 	adc.w	r3, fp, r3
 800360c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800361c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003620:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003624:	460b      	mov	r3, r1
 8003626:	18db      	adds	r3, r3, r3
 8003628:	643b      	str	r3, [r7, #64]	; 0x40
 800362a:	4613      	mov	r3, r2
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	647b      	str	r3, [r7, #68]	; 0x44
 8003632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003636:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800363a:	f7fc fdd1 	bl	80001e0 <__aeabi_uldivmod>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4611      	mov	r1, r2
 8003644:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <UART_SetConfig+0x2d4>)
 8003646:	fba3 2301 	umull	r2, r3, r3, r1
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2264      	movs	r2, #100	; 0x64
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	1acb      	subs	r3, r1, r3
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800365a:	4b36      	ldr	r3, [pc, #216]	; (8003734 <UART_SetConfig+0x2d4>)
 800365c:	fba3 2302 	umull	r2, r3, r3, r2
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003668:	441c      	add	r4, r3
 800366a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800366e:	2200      	movs	r2, #0
 8003670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003674:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003678:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800367c:	4642      	mov	r2, r8
 800367e:	464b      	mov	r3, r9
 8003680:	1891      	adds	r1, r2, r2
 8003682:	63b9      	str	r1, [r7, #56]	; 0x38
 8003684:	415b      	adcs	r3, r3
 8003686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800368c:	4641      	mov	r1, r8
 800368e:	1851      	adds	r1, r2, r1
 8003690:	6339      	str	r1, [r7, #48]	; 0x30
 8003692:	4649      	mov	r1, r9
 8003694:	414b      	adcs	r3, r1
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036a4:	4659      	mov	r1, fp
 80036a6:	00cb      	lsls	r3, r1, #3
 80036a8:	4651      	mov	r1, sl
 80036aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ae:	4651      	mov	r1, sl
 80036b0:	00ca      	lsls	r2, r1, #3
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	4642      	mov	r2, r8
 80036ba:	189b      	adds	r3, r3, r2
 80036bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036c0:	464b      	mov	r3, r9
 80036c2:	460a      	mov	r2, r1
 80036c4:	eb42 0303 	adc.w	r3, r2, r3
 80036c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036e0:	460b      	mov	r3, r1
 80036e2:	18db      	adds	r3, r3, r3
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e6:	4613      	mov	r3, r2
 80036e8:	eb42 0303 	adc.w	r3, r2, r3
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036f6:	f7fc fd73 	bl	80001e0 <__aeabi_uldivmod>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <UART_SetConfig+0x2d4>)
 8003700:	fba3 1302 	umull	r1, r3, r3, r2
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	2164      	movs	r1, #100	; 0x64
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	3332      	adds	r3, #50	; 0x32
 8003712:	4a08      	ldr	r2, [pc, #32]	; (8003734 <UART_SetConfig+0x2d4>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	f003 0207 	and.w	r2, r3, #7
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4422      	add	r2, r4
 8003726:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003728:	e105      	b.n	8003936 <UART_SetConfig+0x4d6>
 800372a:	bf00      	nop
 800372c:	40011000 	.word	0x40011000
 8003730:	40011400 	.word	0x40011400
 8003734:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800373c:	2200      	movs	r2, #0
 800373e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003742:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003746:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800374a:	4642      	mov	r2, r8
 800374c:	464b      	mov	r3, r9
 800374e:	1891      	adds	r1, r2, r2
 8003750:	6239      	str	r1, [r7, #32]
 8003752:	415b      	adcs	r3, r3
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
 8003756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800375a:	4641      	mov	r1, r8
 800375c:	1854      	adds	r4, r2, r1
 800375e:	4649      	mov	r1, r9
 8003760:	eb43 0501 	adc.w	r5, r3, r1
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	00eb      	lsls	r3, r5, #3
 800376e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003772:	00e2      	lsls	r2, r4, #3
 8003774:	4614      	mov	r4, r2
 8003776:	461d      	mov	r5, r3
 8003778:	4643      	mov	r3, r8
 800377a:	18e3      	adds	r3, r4, r3
 800377c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003780:	464b      	mov	r3, r9
 8003782:	eb45 0303 	adc.w	r3, r5, r3
 8003786:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003796:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037a6:	4629      	mov	r1, r5
 80037a8:	008b      	lsls	r3, r1, #2
 80037aa:	4621      	mov	r1, r4
 80037ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b0:	4621      	mov	r1, r4
 80037b2:	008a      	lsls	r2, r1, #2
 80037b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037b8:	f7fc fd12 	bl	80001e0 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4b60      	ldr	r3, [pc, #384]	; (8003944 <UART_SetConfig+0x4e4>)
 80037c2:	fba3 2302 	umull	r2, r3, r3, r2
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	011c      	lsls	r4, r3, #4
 80037ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037dc:	4642      	mov	r2, r8
 80037de:	464b      	mov	r3, r9
 80037e0:	1891      	adds	r1, r2, r2
 80037e2:	61b9      	str	r1, [r7, #24]
 80037e4:	415b      	adcs	r3, r3
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ec:	4641      	mov	r1, r8
 80037ee:	1851      	adds	r1, r2, r1
 80037f0:	6139      	str	r1, [r7, #16]
 80037f2:	4649      	mov	r1, r9
 80037f4:	414b      	adcs	r3, r1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003804:	4659      	mov	r1, fp
 8003806:	00cb      	lsls	r3, r1, #3
 8003808:	4651      	mov	r1, sl
 800380a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800380e:	4651      	mov	r1, sl
 8003810:	00ca      	lsls	r2, r1, #3
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	4603      	mov	r3, r0
 8003818:	4642      	mov	r2, r8
 800381a:	189b      	adds	r3, r3, r2
 800381c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003820:	464b      	mov	r3, r9
 8003822:	460a      	mov	r2, r1
 8003824:	eb42 0303 	adc.w	r3, r2, r3
 8003828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	67bb      	str	r3, [r7, #120]	; 0x78
 8003836:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003844:	4649      	mov	r1, r9
 8003846:	008b      	lsls	r3, r1, #2
 8003848:	4641      	mov	r1, r8
 800384a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800384e:	4641      	mov	r1, r8
 8003850:	008a      	lsls	r2, r1, #2
 8003852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003856:	f7fc fcc3 	bl	80001e0 <__aeabi_uldivmod>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4b39      	ldr	r3, [pc, #228]	; (8003944 <UART_SetConfig+0x4e4>)
 8003860:	fba3 1302 	umull	r1, r3, r3, r2
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	2164      	movs	r1, #100	; 0x64
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	3332      	adds	r3, #50	; 0x32
 8003872:	4a34      	ldr	r2, [pc, #208]	; (8003944 <UART_SetConfig+0x4e4>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800387e:	441c      	add	r4, r3
 8003880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003884:	2200      	movs	r2, #0
 8003886:	673b      	str	r3, [r7, #112]	; 0x70
 8003888:	677a      	str	r2, [r7, #116]	; 0x74
 800388a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800388e:	4642      	mov	r2, r8
 8003890:	464b      	mov	r3, r9
 8003892:	1891      	adds	r1, r2, r2
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	415b      	adcs	r3, r3
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800389e:	4641      	mov	r1, r8
 80038a0:	1851      	adds	r1, r2, r1
 80038a2:	6039      	str	r1, [r7, #0]
 80038a4:	4649      	mov	r1, r9
 80038a6:	414b      	adcs	r3, r1
 80038a8:	607b      	str	r3, [r7, #4]
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038b6:	4659      	mov	r1, fp
 80038b8:	00cb      	lsls	r3, r1, #3
 80038ba:	4651      	mov	r1, sl
 80038bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c0:	4651      	mov	r1, sl
 80038c2:	00ca      	lsls	r2, r1, #3
 80038c4:	4610      	mov	r0, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	4603      	mov	r3, r0
 80038ca:	4642      	mov	r2, r8
 80038cc:	189b      	adds	r3, r3, r2
 80038ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80038d0:	464b      	mov	r3, r9
 80038d2:	460a      	mov	r2, r1
 80038d4:	eb42 0303 	adc.w	r3, r2, r3
 80038d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	663b      	str	r3, [r7, #96]	; 0x60
 80038e4:	667a      	str	r2, [r7, #100]	; 0x64
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038f2:	4649      	mov	r1, r9
 80038f4:	008b      	lsls	r3, r1, #2
 80038f6:	4641      	mov	r1, r8
 80038f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038fc:	4641      	mov	r1, r8
 80038fe:	008a      	lsls	r2, r1, #2
 8003900:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003904:	f7fc fc6c 	bl	80001e0 <__aeabi_uldivmod>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <UART_SetConfig+0x4e4>)
 800390e:	fba3 1302 	umull	r1, r3, r3, r2
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2164      	movs	r1, #100	; 0x64
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	3332      	adds	r3, #50	; 0x32
 8003920:	4a08      	ldr	r2, [pc, #32]	; (8003944 <UART_SetConfig+0x4e4>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	f003 020f 	and.w	r2, r3, #15
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4422      	add	r2, r4
 8003934:	609a      	str	r2, [r3, #8]
}
 8003936:	bf00      	nop
 8003938:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800393c:	46bd      	mov	sp, r7
 800393e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003942:	bf00      	nop
 8003944:	51eb851f 	.word	0x51eb851f

08003948 <IBUS_Init>:
    }
}

IBus_t*
IBUS_Init (UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  IBus_t *ibus = (IBus_t*) pvPortMalloc (sizeof(IBus_t));
 8003950:	2040      	movs	r0, #64	; 0x40
 8003952:	f002 fe21 	bl	8006598 <pvPortMalloc>
 8003956:	60f8      	str	r0, [r7, #12]
  memset (ibus, 0, sizeof(IBus_t));
 8003958:	2240      	movs	r2, #64	; 0x40
 800395a:	2100      	movs	r1, #0
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f003 f851 	bl	8006a04 <memset>

  ibus->callbacks = pvPortMalloc (sizeof(IBusCommand_t));
 8003962:	2008      	movs	r0, #8
 8003964:	f002 fe18 	bl	8006598 <pvPortMalloc>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	62da      	str	r2, [r3, #44]	; 0x2c
  ibus->rx_list = MyListInit(IBUS_PACKAGE_LEN);
 800396e:	2020      	movs	r0, #32
 8003970:	f000 f930 	bl	8003bd4 <MyListInit>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	601a      	str	r2, [r3, #0]
  ibus->huart = huart;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	605a      	str	r2, [r3, #4]

  return ibus;
 8003980:	68fb      	ldr	r3, [r7, #12]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <isValidCRC>:

uint8_t
isValidCRC (uint8_t *data)
{
 800398a:	b480      	push	{r7}
 800398c:	b087      	sub	sp, #28
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  uint16_t crc = 0xFFFF;
 8003992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003996:	82fb      	strh	r3, [r7, #22]
  uint16_t big_endian_crc = data[31] << 8 | data[30];
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	331f      	adds	r3, #31
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	b21a      	sxth	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	331e      	adds	r3, #30
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	b21b      	sxth	r3, r3
 80039aa:	4313      	orrs	r3, r2
 80039ac:	b21b      	sxth	r3, r3
 80039ae:	81fb      	strh	r3, [r7, #14]

  for (size_t i = 0; i < IBUS_PACKAGE_LEN-2; i++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	e00a      	b.n	80039cc <isValidCRC+0x42>
    {
      crc -= data[i];
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	8afa      	ldrh	r2, [r7, #22]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	82fb      	strh	r3, [r7, #22]
  for (size_t i = 0; i < IBUS_PACKAGE_LEN-2; i++)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	3301      	adds	r3, #1
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b1d      	cmp	r3, #29
 80039d0:	d9f1      	bls.n	80039b6 <isValidCRC+0x2c>
    }

  return crc == big_endian_crc;
 80039d2:	8afa      	ldrh	r2, [r7, #22]
 80039d4:	89fb      	ldrh	r3, [r7, #14]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <IBUS_FindSignature>:

void
IBUS_FindSignature (IBus_t *up, uint8_t *buff)
{
 80039ec:	b5b0      	push	{r4, r5, r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  if (buff[0] == IBUS_PACKAGE_LEN && buff[1] == 0x40)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d129      	bne.n	8003a52 <IBUS_FindSignature+0x66>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	3301      	adds	r3, #1
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d124      	bne.n	8003a52 <IBUS_FindSignature+0x66>
    {
      if (!isValidCRC(buff))
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f7ff ffbe 	bl	800398a <isValidCRC>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01d      	beq.n	8003a50 <IBUS_FindSignature+0x64>
	{
	  return;
	}

      uint8_t data[IBUS_PACKAGE_LEN];
      memcpy (&data, buff, IBUS_PACKAGE_LEN);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f107 0408 	add.w	r4, r7, #8
 8003a1a:	461d      	mov	r5, r3
 8003a1c:	6828      	ldr	r0, [r5, #0]
 8003a1e:	6869      	ldr	r1, [r5, #4]
 8003a20:	68aa      	ldr	r2, [r5, #8]
 8003a22:	68eb      	ldr	r3, [r5, #12]
 8003a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a26:	6928      	ldr	r0, [r5, #16]
 8003a28:	6969      	ldr	r1, [r5, #20]
 8003a2a:	69aa      	ldr	r2, [r5, #24]
 8003a2c:	69eb      	ldr	r3, [r5, #28]
 8003a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      MyListPushBack (up->rx_list, (uint8_t*)&data);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f107 0208 	add.w	r2, r7, #8
 8003a38:	4611      	mov	r1, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f962 	bl	8003d04 <MyListPushBack>
      memset(&up->buffer, 0, IBUS_PACKAGE_LEN + 1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3308      	adds	r3, #8
 8003a44:	2221      	movs	r2, #33	; 0x21
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f002 ffdb 	bl	8006a04 <memset>
 8003a4e:	e000      	b.n	8003a52 <IBUS_FindSignature+0x66>
	  return;
 8003a50:	bf00      	nop
    }
}
 8003a52:	3728      	adds	r7, #40	; 0x28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bdb0      	pop	{r4, r5, r7, pc}

08003a58 <IBUS_Receive>:

void
IBUS_Receive (IBus_t *up)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  IBUS_FindSignature (up, up->buffer);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3308      	adds	r3, #8
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ffc0 	bl	80039ec <IBUS_FindSignature>

  if (HAL_UART_GetState (up->huart) != HAL_UART_STATE_BUSY_RX)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff faff 	bl	8003074 <HAL_UART_GetState>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b22      	cmp	r3, #34	; 0x22
 8003a7a:	d007      	beq.n	8003a8c <IBUS_Receive+0x34>
    {
      HAL_UART_Receive_IT (up->huart, &up->buffer[IBUS_PACKAGE_LEN], 1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6858      	ldr	r0, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3328      	adds	r3, #40	; 0x28
 8003a84:	2201      	movs	r2, #1
 8003a86:	4619      	mov	r1, r3
 8003a88:	f7ff f815 	bl	8002ab6 <HAL_UART_Receive_IT>
    }

  if (!MyListIsEmpty (up->rx_list))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 f9a1 	bl	8003dd8 <MyListIsEmpty>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d133      	bne.n	8003b04 <IBUS_Receive+0xac>
    {
      MyListItem_t *item = MyListPopFront (up->rx_list);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f947 	bl	8003d34 <MyListPopFront>
 8003aa6:	6138      	str	r0, [r7, #16]

      uint8_t data[2];
      uint16_t num;

      for (size_t i = 0; i < up->callback_count; i++)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e022      	b.n	8003af4 <IBUS_Receive+0x9c>
	{
	  memcpy(&data, &item->data[2 + 2 * up->callbacks[i].channel], 2);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	00d2      	lsls	r2, r2, #3
 8003aba:	440a      	add	r2, r1
 8003abc:	7812      	ldrb	r2, [r2, #0]
 8003abe:	3201      	adds	r2, #1
 8003ac0:	0052      	lsls	r2, r2, #1
 8003ac2:	4413      	add	r3, r2
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	81bb      	strh	r3, [r7, #12]
	  num = data[1] << 8 | data[0];
 8003aca:	7b7b      	ldrb	r3, [r7, #13]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	b21a      	sxth	r2, r3
 8003ad0:	7b3b      	ldrb	r3, [r7, #12]
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	b21b      	sxth	r3, r3
 8003ad8:	81fb      	strh	r3, [r7, #14]
	  up->callbacks[i].callback (up, num);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	89fa      	ldrh	r2, [r7, #14]
 8003ae8:	4611      	mov	r1, r2
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
      for (size_t i = 0; i < up->callback_count; i++)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	3301      	adds	r3, #1
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d3d7      	bcc.n	8003aae <IBUS_Receive+0x56>
	}

      MyListDelete(item);
 8003afe:	6938      	ldr	r0, [r7, #16]
 8003b00:	f000 f97b 	bl	8003dfa <MyListDelete>
    }
}
 8003b04:	bf00      	nop
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <IBUS_Receive_IT>:

void
IBUS_Receive_IT (IBus_t *up, UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  if (huart == up->huart
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d115      	bne.n	8003b4c <IBUS_Receive_IT+0x40>
      && HAL_UART_GetState (huart) != HAL_UART_STATE_BUSY_RX)
 8003b20:	6838      	ldr	r0, [r7, #0]
 8003b22:	f7ff faa7 	bl	8003074 <HAL_UART_GetState>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b22      	cmp	r3, #34	; 0x22
 8003b2a:	d00f      	beq.n	8003b4c <IBUS_Receive_IT+0x40>
    {
      memmove (&up->buffer, &up->buffer[1], IBUS_PACKAGE_LEN);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f103 0008 	add.w	r0, r3, #8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3309      	adds	r3, #9
 8003b36:	2220      	movs	r2, #32
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f002 ff49 	bl	80069d0 <memmove>
      HAL_UART_Receive_IT (huart, &up->buffer[IBUS_PACKAGE_LEN], 1);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3328      	adds	r3, #40	; 0x28
 8003b42:	2201      	movs	r2, #1
 8003b44:	4619      	mov	r1, r3
 8003b46:	6838      	ldr	r0, [r7, #0]
 8003b48:	f7fe ffb5 	bl	8002ab6 <HAL_UART_Receive_IT>
    }
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <IBUS_AddCallback>:

void
IBUS_AddCallback (IBus_t *up, IBUS_Channel channel, callback_ptr cb)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	72fb      	strb	r3, [r7, #11]
  IBusCommand_t c = {0};
 8003b62:	f107 0314 	add.w	r3, r7, #20
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
  c.channel = channel;
 8003b6c:	7afb      	ldrb	r3, [r7, #11]
 8003b6e:	753b      	strb	r3, [r7, #20]
  c.callback = cb;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	61bb      	str	r3, [r7, #24]

  up->callback_count ++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30

  IBusCommand_t *cmds = (IBusCommand_t*) pvPortMalloc (
      sizeof(IBusCommand_t) * up->callback_count);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  IBusCommand_t *cmds = (IBusCommand_t*) pvPortMalloc (
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4618      	mov	r0, r3
 8003b86:	f002 fd07 	bl	8006598 <pvPortMalloc>
 8003b8a:	61f8      	str	r0, [r7, #28]

  memcpy (cmds, up->callbacks, sizeof(IBusCommand_t) * up->callback_count);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	461a      	mov	r2, r3
 8003b98:	69f8      	ldr	r0, [r7, #28]
 8003b9a:	f002 ff0b 	bl	80069b4 <memcpy>
  cmds[up->callback_count - 1] = c;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003bb8:	e882 0003 	stmia.w	r2, {r0, r1}

  vPortFree (up->callbacks);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f002 fdb5 	bl	8006730 <vPortFree>
  up->callbacks = cmds;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bcc:	bf00      	nop
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <MyListInit>:
#include "ulist.h"
#include <string.h>

MyList_t*
MyListInit (size_t data_size)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  MyList_t *list = (MyList_t*) pvPortMalloc (sizeof(MyList_t));
 8003bdc:	200c      	movs	r0, #12
 8003bde:	f002 fcdb 	bl	8006598 <pvPortMalloc>
 8003be2:	60f8      	str	r0, [r7, #12]
  memset (list, 0, sizeof(MyList_t));
 8003be4:	220c      	movs	r2, #12
 8003be6:	2100      	movs	r1, #0
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f002 ff0b 	bl	8006a04 <memset>
  list->data_size = data_size;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	605a      	str	r2, [r3, #4]
  return list;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <MyListConnect>:

void
MyListConnect (MyListItem_t *a, MyListItem_t *b)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  if (a != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <MyListConnect+0x16>
    {
      a->next = b;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	605a      	str	r2, [r3, #4]
    }

  if (b != NULL)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <MyListConnect+0x22>
    {
      b->prev = a;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	609a      	str	r2, [r3, #8]
    }
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <MyListDisconnect>:

void
MyListDisconnect (MyListItem_t *a, MyListItem_t *b)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  if (a != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <MyListDisconnect+0x16>
    {
      a->next = NULL;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	605a      	str	r2, [r3, #4]
    }

  if (b != NULL)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <MyListDisconnect+0x22>
    {
      b->prev = NULL;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
    }
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <MyListInsert>:

void
MyListInsert (MyList_t *list, uint8_t *data, size_t idx)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b088      	sub	sp, #32
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
  MyListItem_t *item;
  MyListItem_t *new_item;

  item = list->first;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	61fb      	str	r3, [r7, #28]

  if (idx >= list->size && list->size != 0)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d303      	bcc.n	8003c7e <MyListInsert+0x24>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d13e      	bne.n	8003cfc <MyListInsert+0xa2>
    {
      return;
    }

  for (size_t i = 0; i < idx; i++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	e005      	b.n	8003c90 <MyListInsert+0x36>
    {
      item = item->next;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < idx; i++)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d3f5      	bcc.n	8003c84 <MyListInsert+0x2a>
    }

  new_item = (MyListItem_t*) pvPortMalloc (sizeof(MyListItem_t));
 8003c98:	200c      	movs	r0, #12
 8003c9a:	f002 fc7d 	bl	8006598 <pvPortMalloc>
 8003c9e:	6178      	str	r0, [r7, #20]
  new_item->data = (uint8_t*) pvPortMalloc (list->data_size);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f002 fc77 	bl	8006598 <pvPortMalloc>
 8003caa:	4602      	mov	r2, r0
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	601a      	str	r2, [r3, #0]
  memcpy (new_item->data, data, list->data_size);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	f002 fe7a 	bl	80069b4 <memcpy>
  new_item->next = NULL;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	605a      	str	r2, [r3, #4]
  new_item->prev = NULL;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	609a      	str	r2, [r3, #8]

  list->size++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	609a      	str	r2, [r3, #8]

  if (list->first == NULL)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <MyListInsert+0x8c>
    {
      list->first = new_item;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	601a      	str	r2, [r3, #0]
      return;
 8003ce4:	e00b      	b.n	8003cfe <MyListInsert+0xa4>
    }

  MyListConnect (new_item, item->next);
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4619      	mov	r1, r3
 8003cec:	6978      	ldr	r0, [r7, #20]
 8003cee:	f7ff ff86 	bl	8003bfe <MyListConnect>
  MyListConnect (item, new_item);
 8003cf2:	6979      	ldr	r1, [r7, #20]
 8003cf4:	69f8      	ldr	r0, [r7, #28]
 8003cf6:	f7ff ff82 	bl	8003bfe <MyListConnect>
 8003cfa:	e000      	b.n	8003cfe <MyListInsert+0xa4>
      return;
 8003cfc:	bf00      	nop
}
 8003cfe:	3720      	adds	r7, #32
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <MyListPushBack>:

void
MyListPushBack (MyList_t *list, uint8_t *data)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  size_t idx = list->size;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	60fb      	str	r3, [r7, #12]
  if (list->size != 0)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <MyListPushBack+0x1e>
    {
      idx--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
    }

  MyListInsert (list, data, idx);
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	6839      	ldr	r1, [r7, #0]
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff ff97 	bl	8003c5a <MyListInsert>
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <MyListPopFront>:
  MyListInsert (list, data, 0);
}

MyListItem_t*
MyListPopFront (MyList_t *list)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  MyListItem_t *item;

  if (list->size == 0)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <MyListPopFront+0x14>
    {
      return NULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e020      	b.n	8003d8a <MyListPopFront+0x56>
    }

  item = MyListGet (list, 0);
 8003d48:	2100      	movs	r1, #0
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f821 	bl	8003d92 <MyListGet>
 8003d50:	60f8      	str	r0, [r7, #12]
  MyListDisconnect (NULL, item);
 8003d52:	68f9      	ldr	r1, [r7, #12]
 8003d54:	2000      	movs	r0, #0
 8003d56:	f7ff ff69 	bl	8003c2c <MyListDisconnect>
  list->size--;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	1e5a      	subs	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	609a      	str	r2, [r3, #8]

  if (list->size > 0)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <MyListPopFront+0x4e>
    {
      list->first = item->next;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	601a      	str	r2, [r3, #0]
      MyListDisconnect (item, item->next);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7ff ff56 	bl	8003c2c <MyListDisconnect>
 8003d80:	e002      	b.n	8003d88 <MyListPopFront+0x54>
    }
  else
    {
      list->first = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
    }
  return item;
 8003d88:	68fb      	ldr	r3, [r7, #12]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <MyListGet>:

MyListItem_t*
MyListGet (MyList_t *list, size_t idx)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
  MyListItem_t *item = list->first;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60fb      	str	r3, [r7, #12]

  if (idx >= list->size)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d301      	bcc.n	8003db0 <MyListGet+0x1e>
    {
      return NULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e00d      	b.n	8003dcc <MyListGet+0x3a>
    }

  for (size_t i = 0; i < idx; i++)
 8003db0:	2300      	movs	r3, #0
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	e005      	b.n	8003dc2 <MyListGet+0x30>
    {
      item = item->next;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	60fb      	str	r3, [r7, #12]
  for (size_t i = 0; i < idx; i++)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d3f5      	bcc.n	8003db6 <MyListGet+0x24>
    }

  return item;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <MyListIsEmpty>:

uint8_t
MyListIsEmpty (MyList_t *list)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  if (list->size > 0)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MyListIsEmpty+0x14>
    {
      return 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <MyListIsEmpty+0x16>
    }

  return 1;
 8003dec:	2301      	movs	r3, #1
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <MyListDelete>:

void
MyListDelete (MyListItem_t *item)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  if (item == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <MyListDelete+0x20>
    {
      return;
    }

  vPortFree (item->data);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f002 fc8f 	bl	8006730 <vPortFree>
  vPortFree (item);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f002 fc8c 	bl	8006730 <vPortFree>
 8003e18:	e000      	b.n	8003e1c <MyListDelete+0x22>
      return;
 8003e1a:	bf00      	nop
}
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <__NVIC_SetPriority>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	db0a      	blt.n	8003e4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	490c      	ldr	r1, [pc, #48]	; (8003e70 <__NVIC_SetPriority+0x4c>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	0112      	lsls	r2, r2, #4
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	440b      	add	r3, r1
 8003e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e4c:	e00a      	b.n	8003e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4908      	ldr	r1, [pc, #32]	; (8003e74 <__NVIC_SetPriority+0x50>)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	0112      	lsls	r2, r2, #4
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	440b      	add	r3, r1
 8003e62:	761a      	strb	r2, [r3, #24]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000e100 	.word	0xe000e100
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f06f 0004 	mvn.w	r0, #4
 8003e82:	f7ff ffcf 	bl	8003e24 <__NVIC_SetPriority>
#endif
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e92:	f3ef 8305 	mrs	r3, IPSR
 8003e96:	603b      	str	r3, [r7, #0]
  return(result);
 8003e98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e9e:	f06f 0305 	mvn.w	r3, #5
 8003ea2:	607b      	str	r3, [r7, #4]
 8003ea4:	e00c      	b.n	8003ec0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <osKernelInitialize+0x44>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <osKernelInitialize+0x44>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	e002      	b.n	8003ec0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ec0:	687b      	ldr	r3, [r7, #4]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000124 	.word	0x20000124

08003ed4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eda:	f3ef 8305 	mrs	r3, IPSR
 8003ede:	603b      	str	r3, [r7, #0]
  return(result);
 8003ee0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <osKernelStart+0x1a>
    stat = osErrorISR;
 8003ee6:	f06f 0305 	mvn.w	r3, #5
 8003eea:	607b      	str	r3, [r7, #4]
 8003eec:	e010      	b.n	8003f10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <osKernelStart+0x48>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d109      	bne.n	8003f0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ef6:	f7ff ffbf 	bl	8003e78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <osKernelStart+0x48>)
 8003efc:	2202      	movs	r2, #2
 8003efe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f00:	f001 f86c 	bl	8004fdc <vTaskStartScheduler>
      stat = osOK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	e002      	b.n	8003f10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f10:	687b      	ldr	r3, [r7, #4]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000124 	.word	0x20000124

08003f20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08e      	sub	sp, #56	; 0x38
 8003f24:	af04      	add	r7, sp, #16
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f30:	f3ef 8305 	mrs	r3, IPSR
 8003f34:	617b      	str	r3, [r7, #20]
  return(result);
 8003f36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d17e      	bne.n	800403a <osThreadNew+0x11a>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d07b      	beq.n	800403a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003f46:	2318      	movs	r3, #24
 8003f48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d045      	beq.n	8003fe6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <osThreadNew+0x48>
        name = attr->name;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <osThreadNew+0x6e>
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b38      	cmp	r3, #56	; 0x38
 8003f80:	d805      	bhi.n	8003f8e <osThreadNew+0x6e>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <osThreadNew+0x72>
        return (NULL);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e054      	b.n	800403c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00e      	beq.n	8003fc8 <osThreadNew+0xa8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b63      	cmp	r3, #99	; 0x63
 8003fb0:	d90a      	bls.n	8003fc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d006      	beq.n	8003fc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <osThreadNew+0xa8>
        mem = 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	e010      	b.n	8003fea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10c      	bne.n	8003fea <osThreadNew+0xca>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d108      	bne.n	8003fea <osThreadNew+0xca>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d104      	bne.n	8003fea <osThreadNew+0xca>
          mem = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
 8003fe4:	e001      	b.n	8003fea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d110      	bne.n	8004012 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ff8:	9202      	str	r2, [sp, #8]
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6a3a      	ldr	r2, [r7, #32]
 8004004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fe0c 	bl	8004c24 <xTaskCreateStatic>
 800400c:	4603      	mov	r3, r0
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	e013      	b.n	800403a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d110      	bne.n	800403a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	b29a      	uxth	r2, r3
 800401c:	f107 0310 	add.w	r3, r7, #16
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fe57 	bl	8004cde <xTaskCreate>
 8004030:	4603      	mov	r3, r0
 8004032:	2b01      	cmp	r3, #1
 8004034:	d001      	beq.n	800403a <osThreadNew+0x11a>
            hTask = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800403a:	693b      	ldr	r3, [r7, #16]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3728      	adds	r7, #40	; 0x28
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800404c:	f3ef 8305 	mrs	r3, IPSR
 8004050:	60bb      	str	r3, [r7, #8]
  return(result);
 8004052:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <osDelay+0x1c>
    stat = osErrorISR;
 8004058:	f06f 0305 	mvn.w	r3, #5
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	e007      	b.n	8004070 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <osDelay+0x2c>
      vTaskDelay(ticks);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 ff82 	bl	8004f74 <vTaskDelay>
    }
  }

  return (stat);
 8004070:	68fb      	ldr	r3, [r7, #12]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800408c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4a06      	ldr	r2, [pc, #24]	; (80040ac <vApplicationGetIdleTaskMemory+0x30>)
 8004092:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2280      	movs	r2, #128	; 0x80
 8004098:	601a      	str	r2, [r3, #0]
}
 800409a:	bf00      	nop
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	20000128 	.word	0x20000128
 80040ac:	2000018c 	.word	0x2000018c

080040b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a07      	ldr	r2, [pc, #28]	; (80040dc <vApplicationGetTimerTaskMemory+0x2c>)
 80040c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4a06      	ldr	r2, [pc, #24]	; (80040e0 <vApplicationGetTimerTaskMemory+0x30>)
 80040c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ce:	601a      	str	r2, [r3, #0]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	2000038c 	.word	0x2000038c
 80040e0:	200003f0 	.word	0x200003f0

080040e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f103 0208 	add.w	r2, r3, #8
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f04f 32ff 	mov.w	r2, #4294967295
 80040fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f103 0208 	add.w	r2, r3, #8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f103 0208 	add.w	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	601a      	str	r2, [r3, #0]
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d103      	bne.n	80041a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	e00c      	b.n	80041c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3308      	adds	r3, #8
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e002      	b.n	80041b4 <vListInsert+0x2e>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d2f6      	bcs.n	80041ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	601a      	str	r2, [r3, #0]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6892      	ldr	r2, [r2, #8]
 800420e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6852      	ldr	r2, [r2, #4]
 8004218:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	d103      	bne.n	800422c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	1e5a      	subs	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004276:	f002 f86d 	bl	8006354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	68f9      	ldr	r1, [r7, #12]
 8004284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	441a      	add	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	3b01      	subs	r3, #1
 80042a8:	68f9      	ldr	r1, [r7, #12]
 80042aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	441a      	add	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	22ff      	movs	r2, #255	; 0xff
 80042ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	22ff      	movs	r2, #255	; 0xff
 80042c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d114      	bne.n	80042f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01a      	beq.n	800430a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3310      	adds	r3, #16
 80042d8:	4618      	mov	r0, r3
 80042da:	f001 f925 	bl	8005528 <xTaskRemoveFromEventList>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042e4:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <xQueueGenericReset+0xcc>)
 80042e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	e009      	b.n	800430a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3310      	adds	r3, #16
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fef2 	bl	80040e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3324      	adds	r3, #36	; 0x24
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff feed 	bl	80040e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800430a:	f002 f853 	bl	80063b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800430e:	2301      	movs	r3, #1
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08e      	sub	sp, #56	; 0x38
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <xQueueGenericCreateStatic+0x52>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <xQueueGenericCreateStatic+0x56>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <xQueueGenericCreateStatic+0x58>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	623b      	str	r3, [r7, #32]
}
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d102      	bne.n	800439a <xQueueGenericCreateStatic+0x7e>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <xQueueGenericCreateStatic+0x82>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <xQueueGenericCreateStatic+0x84>
 800439e:	2300      	movs	r3, #0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	61fb      	str	r3, [r7, #28]
}
 80043b6:	bf00      	nop
 80043b8:	e7fe      	b.n	80043b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043ba:	2350      	movs	r3, #80	; 0x50
 80043bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b50      	cmp	r3, #80	; 0x50
 80043c2:	d00a      	beq.n	80043da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	61bb      	str	r3, [r7, #24]
}
 80043d6:	bf00      	nop
 80043d8:	e7fe      	b.n	80043d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00d      	beq.n	8004402 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f805 	bl	800440c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004404:	4618      	mov	r0, r3
 8004406:	3730      	adds	r7, #48	; 0x30
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e002      	b.n	800442e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800443a:	2101      	movs	r1, #1
 800443c:	69b8      	ldr	r0, [r7, #24]
 800443e:	f7ff ff05 	bl	800424c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08e      	sub	sp, #56	; 0x38
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004462:	2300      	movs	r3, #0
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <xQueueGenericSend+0x32>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <xQueueGenericSend+0x40>
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <xQueueGenericSend+0x44>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <xQueueGenericSend+0x46>
 8004498:	2300      	movs	r3, #0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <xQueueGenericSend+0x60>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d103      	bne.n	80044c2 <xQueueGenericSend+0x6e>
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <xQueueGenericSend+0x72>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <xQueueGenericSend+0x74>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	623b      	str	r3, [r7, #32]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044e2:	f001 f9df 	bl	80058a4 <xTaskGetSchedulerState>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <xQueueGenericSend+0x9e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <xQueueGenericSend+0xa2>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <xQueueGenericSend+0xa4>
 80044f6:	2300      	movs	r3, #0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <xQueueGenericSend+0xbe>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	61fb      	str	r3, [r7, #28]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004512:	f001 ff1f 	bl	8006354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <xQueueGenericSend+0xd4>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d129      	bne.n	800457c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800452e:	f000 fa0b 	bl	8004948 <prvCopyDataToQueue>
 8004532:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	2b00      	cmp	r3, #0
 800453a:	d010      	beq.n	800455e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	3324      	adds	r3, #36	; 0x24
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fff1 	bl	8005528 <xTaskRemoveFromEventList>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d013      	beq.n	8004574 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800454c:	4b3f      	ldr	r3, [pc, #252]	; (800464c <xQueueGenericSend+0x1f8>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	e00a      	b.n	8004574 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004564:	4b39      	ldr	r3, [pc, #228]	; (800464c <xQueueGenericSend+0x1f8>)
 8004566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004574:	f001 ff1e 	bl	80063b4 <vPortExitCritical>
				return pdPASS;
 8004578:	2301      	movs	r3, #1
 800457a:	e063      	b.n	8004644 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004582:	f001 ff17 	bl	80063b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004586:	2300      	movs	r3, #0
 8004588:	e05c      	b.n	8004644 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800458a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	4618      	mov	r0, r3
 8004596:	f001 f82b 	bl	80055f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800459a:	2301      	movs	r3, #1
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800459e:	f001 ff09 	bl	80063b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045a2:	f000 fd83 	bl	80050ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045a6:	f001 fed5 	bl	8006354 <vPortEnterCritical>
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045b0:	b25b      	sxtb	r3, r3
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d103      	bne.n	80045c0 <xQueueGenericSend+0x16c>
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c6:	b25b      	sxtb	r3, r3
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d103      	bne.n	80045d6 <xQueueGenericSend+0x182>
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d6:	f001 feed 	bl	80063b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045da:	1d3a      	adds	r2, r7, #4
 80045dc:	f107 0314 	add.w	r3, r7, #20
 80045e0:	4611      	mov	r1, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f001 f81a 	bl	800561c <xTaskCheckForTimeOut>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d124      	bne.n	8004638 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045f0:	f000 faa2 	bl	8004b38 <prvIsQueueFull>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d018      	beq.n	800462c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	3310      	adds	r3, #16
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f000 ff40 	bl	8005488 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800460a:	f000 fa2d 	bl	8004a68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800460e:	f000 fd5b 	bl	80050c8 <xTaskResumeAll>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	f47f af7c 	bne.w	8004512 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800461a:	4b0c      	ldr	r3, [pc, #48]	; (800464c <xQueueGenericSend+0x1f8>)
 800461c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	e772      	b.n	8004512 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800462c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800462e:	f000 fa1b 	bl	8004a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004632:	f000 fd49 	bl	80050c8 <xTaskResumeAll>
 8004636:	e76c      	b.n	8004512 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800463a:	f000 fa15 	bl	8004a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800463e:	f000 fd43 	bl	80050c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004642:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004644:	4618      	mov	r0, r3
 8004646:	3738      	adds	r7, #56	; 0x38
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b090      	sub	sp, #64	; 0x40
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d103      	bne.n	800468c <xQueueGenericSendFromISR+0x3c>
 8004684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <xQueueGenericSendFromISR+0x40>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <xQueueGenericSendFromISR+0x42>
 8004690:	2300      	movs	r3, #0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046a8:	bf00      	nop
 80046aa:	e7fe      	b.n	80046aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d103      	bne.n	80046ba <xQueueGenericSendFromISR+0x6a>
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <xQueueGenericSendFromISR+0x6e>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <xQueueGenericSendFromISR+0x70>
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	623b      	str	r3, [r7, #32]
}
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046da:	f001 ff1d 	bl	8006518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80046de:	f3ef 8211 	mrs	r2, BASEPRI
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	61fa      	str	r2, [r7, #28]
 80046f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80046f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <xQueueGenericSendFromISR+0xbc>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d12f      	bne.n	800476c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004722:	f000 f911 	bl	8004948 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004726:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d112      	bne.n	8004756 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	d016      	beq.n	8004766 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	3324      	adds	r3, #36	; 0x24
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fef3 	bl	8005528 <xTaskRemoveFromEventList>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00e      	beq.n	8004766 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e007      	b.n	8004766 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004756:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800475a:	3301      	adds	r3, #1
 800475c:	b2db      	uxtb	r3, r3
 800475e:	b25a      	sxtb	r2, r3
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004766:	2301      	movs	r3, #1
 8004768:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800476a:	e001      	b.n	8004770 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800476c:	2300      	movs	r3, #0
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004772:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800477a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800477c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800477e:	4618      	mov	r0, r3
 8004780:	3740      	adds	r7, #64	; 0x40
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08c      	sub	sp, #48	; 0x30
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004794:	2300      	movs	r3, #0
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <xQueueReceive+0x30>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	623b      	str	r3, [r7, #32]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d103      	bne.n	80047c6 <xQueueReceive+0x3e>
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <xQueueReceive+0x42>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <xQueueReceive+0x44>
 80047ca:	2300      	movs	r3, #0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <xQueueReceive+0x5e>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	61fb      	str	r3, [r7, #28]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047e6:	f001 f85d 	bl	80058a4 <xTaskGetSchedulerState>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <xQueueReceive+0x6e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <xQueueReceive+0x72>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <xQueueReceive+0x74>
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <xQueueReceive+0x8e>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	61bb      	str	r3, [r7, #24]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004816:	f001 fd9d 	bl	8006354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01f      	beq.n	8004866 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800482a:	f000 f8f7 	bl	8004a1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	1e5a      	subs	r2, r3, #1
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00f      	beq.n	800485e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	3310      	adds	r3, #16
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fe70 	bl	8005528 <xTaskRemoveFromEventList>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d007      	beq.n	800485e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800484e:	4b3d      	ldr	r3, [pc, #244]	; (8004944 <xQueueReceive+0x1bc>)
 8004850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800485e:	f001 fda9 	bl	80063b4 <vPortExitCritical>
				return pdPASS;
 8004862:	2301      	movs	r3, #1
 8004864:	e069      	b.n	800493a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d103      	bne.n	8004874 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800486c:	f001 fda2 	bl	80063b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004870:	2300      	movs	r3, #0
 8004872:	e062      	b.n	800493a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800487a:	f107 0310 	add.w	r3, r7, #16
 800487e:	4618      	mov	r0, r3
 8004880:	f000 feb6 	bl	80055f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004884:	2301      	movs	r3, #1
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004888:	f001 fd94 	bl	80063b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800488c:	f000 fc0e 	bl	80050ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004890:	f001 fd60 	bl	8006354 <vPortEnterCritical>
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800489a:	b25b      	sxtb	r3, r3
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d103      	bne.n	80048aa <xQueueReceive+0x122>
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048b0:	b25b      	sxtb	r3, r3
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b6:	d103      	bne.n	80048c0 <xQueueReceive+0x138>
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c0:	f001 fd78 	bl	80063b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048c4:	1d3a      	adds	r2, r7, #4
 80048c6:	f107 0310 	add.w	r3, r7, #16
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fea5 	bl	800561c <xTaskCheckForTimeOut>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d123      	bne.n	8004920 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048da:	f000 f917 	bl	8004b0c <prvIsQueueEmpty>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d017      	beq.n	8004914 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	3324      	adds	r3, #36	; 0x24
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fdcb 	bl	8005488 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048f4:	f000 f8b8 	bl	8004a68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048f8:	f000 fbe6 	bl	80050c8 <xTaskResumeAll>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d189      	bne.n	8004816 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <xQueueReceive+0x1bc>)
 8004904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	e780      	b.n	8004816 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004916:	f000 f8a7 	bl	8004a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800491a:	f000 fbd5 	bl	80050c8 <xTaskResumeAll>
 800491e:	e77a      	b.n	8004816 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004922:	f000 f8a1 	bl	8004a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004926:	f000 fbcf 	bl	80050c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800492a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800492c:	f000 f8ee 	bl	8004b0c <prvIsQueueEmpty>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	f43f af6f 	beq.w	8004816 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004938:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800493a:	4618      	mov	r0, r3
 800493c:	3730      	adds	r7, #48	; 0x30
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	e000ed04 	.word	0xe000ed04

08004948 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d14d      	bne.n	8004a0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 ffb4 	bl	80058e0 <xTaskPriorityDisinherit>
 8004978:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	e043      	b.n	8004a0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d119      	bne.n	80049bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6858      	ldr	r0, [r3, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	461a      	mov	r2, r3
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	f002 f80e 	bl	80069b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	441a      	add	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d32b      	bcc.n	8004a0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	e026      	b.n	8004a0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68d8      	ldr	r0, [r3, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	461a      	mov	r2, r3
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	f001 fff4 	bl	80069b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	425b      	negs	r3, r3
 80049d6:	441a      	add	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d207      	bcs.n	80049f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	425b      	negs	r3, r3
 80049f2:	441a      	add	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d105      	bne.n	8004a0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a12:	697b      	ldr	r3, [r7, #20]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d018      	beq.n	8004a60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	441a      	add	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d303      	bcc.n	8004a50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68d9      	ldr	r1, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6838      	ldr	r0, [r7, #0]
 8004a5c:	f001 ffaa 	bl	80069b4 <memcpy>
	}
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a70:	f001 fc70 	bl	8006354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a7c:	e011      	b.n	8004aa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d012      	beq.n	8004aac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3324      	adds	r3, #36	; 0x24
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fd4c 	bl	8005528 <xTaskRemoveFromEventList>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a96:	f000 fe23 	bl	80056e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	dce9      	bgt.n	8004a7e <prvUnlockQueue+0x16>
 8004aaa:	e000      	b.n	8004aae <prvUnlockQueue+0x46>
					break;
 8004aac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	22ff      	movs	r2, #255	; 0xff
 8004ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ab6:	f001 fc7d 	bl	80063b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004aba:	f001 fc4b 	bl	8006354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ac4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ac6:	e011      	b.n	8004aec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d012      	beq.n	8004af6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3310      	adds	r3, #16
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fd27 	bl	8005528 <xTaskRemoveFromEventList>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ae0:	f000 fdfe 	bl	80056e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ae4:	7bbb      	ldrb	r3, [r7, #14]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	dce9      	bgt.n	8004ac8 <prvUnlockQueue+0x60>
 8004af4:	e000      	b.n	8004af8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004af6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	22ff      	movs	r2, #255	; 0xff
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b00:	f001 fc58 	bl	80063b4 <vPortExitCritical>
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b14:	f001 fc1e 	bl	8006354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b20:	2301      	movs	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e001      	b.n	8004b2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b2a:	f001 fc43 	bl	80063b4 <vPortExitCritical>

	return xReturn;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b40:	f001 fc08 	bl	8006354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d102      	bne.n	8004b56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b50:	2301      	movs	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e001      	b.n	8004b5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b5a:	f001 fc2b 	bl	80063b4 <vPortExitCritical>

	return xReturn;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e014      	b.n	8004ba2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b78:	4a0f      	ldr	r2, [pc, #60]	; (8004bb8 <vQueueAddToRegistry+0x50>)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10b      	bne.n	8004b9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b84:	490c      	ldr	r1, [pc, #48]	; (8004bb8 <vQueueAddToRegistry+0x50>)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b8e:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <vQueueAddToRegistry+0x50>)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4413      	add	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b9a:	e006      	b.n	8004baa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b07      	cmp	r3, #7
 8004ba6:	d9e7      	bls.n	8004b78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	200007f0 	.word	0x200007f0

08004bbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004bcc:	f001 fbc2 	bl	8006354 <vPortEnterCritical>
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bd6:	b25b      	sxtb	r3, r3
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d103      	bne.n	8004be6 <vQueueWaitForMessageRestricted+0x2a>
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bec:	b25b      	sxtb	r3, r3
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d103      	bne.n	8004bfc <vQueueWaitForMessageRestricted+0x40>
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bfc:	f001 fbda 	bl	80063b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3324      	adds	r3, #36	; 0x24
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fc5d 	bl	80054d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c16:	6978      	ldr	r0, [r7, #20]
 8004c18:	f7ff ff26 	bl	8004a68 <prvUnlockQueue>
	}
 8004c1c:	bf00      	nop
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08e      	sub	sp, #56	; 0x38
 8004c28:	af04      	add	r7, sp, #16
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	623b      	str	r3, [r7, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <xTaskCreateStatic+0x46>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	61fb      	str	r3, [r7, #28]
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c6a:	2364      	movs	r3, #100	; 0x64
 8004c6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b64      	cmp	r3, #100	; 0x64
 8004c72:	d00a      	beq.n	8004c8a <xTaskCreateStatic+0x66>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	61bb      	str	r3, [r7, #24]
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01e      	beq.n	8004cd0 <xTaskCreateStatic+0xac>
 8004c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01b      	beq.n	8004cd0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004caa:	2300      	movs	r3, #0
 8004cac:	9303      	str	r3, [sp, #12]
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	9302      	str	r3, [sp, #8]
 8004cb2:	f107 0314 	add.w	r3, r7, #20
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f850 	bl	8004d68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cca:	f000 f8e3 	bl	8004e94 <prvAddNewTaskToReadyList>
 8004cce:	e001      	b.n	8004cd4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cd4:	697b      	ldr	r3, [r7, #20]
	}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3728      	adds	r7, #40	; 0x28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b08c      	sub	sp, #48	; 0x30
 8004ce2:	af04      	add	r7, sp, #16
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	4613      	mov	r3, r2
 8004cec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 fc50 	bl	8006598 <pvPortMalloc>
 8004cf8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00e      	beq.n	8004d1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d00:	2064      	movs	r0, #100	; 0x64
 8004d02:	f001 fc49 	bl	8006598 <pvPortMalloc>
 8004d06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
 8004d14:	e005      	b.n	8004d22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d16:	6978      	ldr	r0, [r7, #20]
 8004d18:	f001 fd0a 	bl	8006730 <vPortFree>
 8004d1c:	e001      	b.n	8004d22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d017      	beq.n	8004d58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d30:	88fa      	ldrh	r2, [r7, #6]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9303      	str	r3, [sp, #12]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	9302      	str	r3, [sp, #8]
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f80e 	bl	8004d68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d4c:	69f8      	ldr	r0, [r7, #28]
 8004d4e:	f000 f8a1 	bl	8004e94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d52:	2301      	movs	r3, #1
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	e002      	b.n	8004d5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
	}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	461a      	mov	r2, r3
 8004d80:	21a5      	movs	r1, #165	; 0xa5
 8004d82:	f001 fe3f 	bl	8006a04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d90:	3b01      	subs	r3, #1
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	f023 0307 	bic.w	r3, r3, #7
 8004d9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	617b      	str	r3, [r7, #20]
}
 8004dbc:	bf00      	nop
 8004dbe:	e7fe      	b.n	8004dbe <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01f      	beq.n	8004e0c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dcc:	2300      	movs	r3, #0
 8004dce:	61fb      	str	r3, [r7, #28]
 8004dd0:	e012      	b.n	8004df8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	7819      	ldrb	r1, [r3, #0]
 8004dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	3334      	adds	r3, #52	; 0x34
 8004de2:	460a      	mov	r2, r1
 8004de4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	4413      	add	r3, r2
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d006      	beq.n	8004e00 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	3301      	adds	r3, #1
 8004df6:	61fb      	str	r3, [r7, #28]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2b0f      	cmp	r3, #15
 8004dfc:	d9e9      	bls.n	8004dd2 <prvInitialiseNewTask+0x6a>
 8004dfe:	e000      	b.n	8004e02 <prvInitialiseNewTask+0x9a>
			{
				break;
 8004e00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e0a:	e003      	b.n	8004e14 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	2b37      	cmp	r3, #55	; 0x37
 8004e18:	d901      	bls.n	8004e1e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e1a:	2337      	movs	r3, #55	; 0x37
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e22:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e28:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	3304      	adds	r3, #4
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff f975 	bl	8004124 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	3318      	adds	r3, #24
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff f970 	bl	8004124 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	2200      	movs	r2, #0
 8004e64:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	68f9      	ldr	r1, [r7, #12]
 8004e72:	69b8      	ldr	r0, [r7, #24]
 8004e74:	f001 f944 	bl	8006100 <pxPortInitialiseStack>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e8a:	bf00      	nop
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e9c:	f001 fa5a 	bl	8006354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ea0:	4b2d      	ldr	r3, [pc, #180]	; (8004f58 <prvAddNewTaskToReadyList+0xc4>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	4a2c      	ldr	r2, [pc, #176]	; (8004f58 <prvAddNewTaskToReadyList+0xc4>)
 8004ea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004eaa:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <prvAddNewTaskToReadyList+0xc8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004eb2:	4a2a      	ldr	r2, [pc, #168]	; (8004f5c <prvAddNewTaskToReadyList+0xc8>)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004eb8:	4b27      	ldr	r3, [pc, #156]	; (8004f58 <prvAddNewTaskToReadyList+0xc4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d110      	bne.n	8004ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ec0:	f000 fc32 	bl	8005728 <prvInitialiseTaskLists>
 8004ec4:	e00d      	b.n	8004ee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ec6:	4b26      	ldr	r3, [pc, #152]	; (8004f60 <prvAddNewTaskToReadyList+0xcc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ece:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <prvAddNewTaskToReadyList+0xc8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d802      	bhi.n	8004ee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004edc:	4a1f      	ldr	r2, [pc, #124]	; (8004f5c <prvAddNewTaskToReadyList+0xc8>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ee2:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <prvAddNewTaskToReadyList+0xd0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <prvAddNewTaskToReadyList+0xd0>)
 8004eea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004eec:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <prvAddNewTaskToReadyList+0xd0>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <prvAddNewTaskToReadyList+0xd4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d903      	bls.n	8004f08 <prvAddNewTaskToReadyList+0x74>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <prvAddNewTaskToReadyList+0xd4>)
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <prvAddNewTaskToReadyList+0xd8>)
 8004f16:	441a      	add	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f7ff f90d 	bl	800413e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f24:	f001 fa46 	bl	80063b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f28:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <prvAddNewTaskToReadyList+0xcc>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00e      	beq.n	8004f4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <prvAddNewTaskToReadyList+0xc8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d207      	bcs.n	8004f4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <prvAddNewTaskToReadyList+0xdc>)
 8004f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000d04 	.word	0x20000d04
 8004f5c:	20000830 	.word	0x20000830
 8004f60:	20000d10 	.word	0x20000d10
 8004f64:	20000d20 	.word	0x20000d20
 8004f68:	20000d0c 	.word	0x20000d0c
 8004f6c:	20000834 	.word	0x20000834
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d017      	beq.n	8004fb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <vTaskDelay+0x60>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <vTaskDelay+0x30>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60bb      	str	r3, [r7, #8]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004fa4:	f000 f882 	bl	80050ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fa8:	2100      	movs	r1, #0
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fd06 	bl	80059bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fb0:	f000 f88a 	bl	80050c8 <xTaskResumeAll>
 8004fb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <vTaskDelay+0x64>)
 8004fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20000d2c 	.word	0x20000d2c
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fea:	463a      	mov	r2, r7
 8004fec:	1d39      	adds	r1, r7, #4
 8004fee:	f107 0308 	add.w	r3, r7, #8
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff f842 	bl	800407c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	9202      	str	r2, [sp, #8]
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	2300      	movs	r3, #0
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	2300      	movs	r3, #0
 8005008:	460a      	mov	r2, r1
 800500a:	4922      	ldr	r1, [pc, #136]	; (8005094 <vTaskStartScheduler+0xb8>)
 800500c:	4822      	ldr	r0, [pc, #136]	; (8005098 <vTaskStartScheduler+0xbc>)
 800500e:	f7ff fe09 	bl	8004c24 <xTaskCreateStatic>
 8005012:	4603      	mov	r3, r0
 8005014:	4a21      	ldr	r2, [pc, #132]	; (800509c <vTaskStartScheduler+0xc0>)
 8005016:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005018:	4b20      	ldr	r3, [pc, #128]	; (800509c <vTaskStartScheduler+0xc0>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005020:	2301      	movs	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e001      	b.n	800502a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d102      	bne.n	8005036 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005030:	f000 fd18 	bl	8005a64 <xTimerCreateTimerTask>
 8005034:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d118      	bne.n	800506e <vTaskStartScheduler+0x92>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	613b      	str	r3, [r7, #16]
}
 800504e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <vTaskStartScheduler+0xc4>)
 8005052:	f04f 32ff 	mov.w	r2, #4294967295
 8005056:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005058:	4b12      	ldr	r3, [pc, #72]	; (80050a4 <vTaskStartScheduler+0xc8>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <vTaskStartScheduler+0xcc>)
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005064:	f7fb fa3e 	bl	80004e4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005068:	f001 f8d2 	bl	8006210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800506c:	e00e      	b.n	800508c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d10a      	bne.n	800508c <vTaskStartScheduler+0xb0>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	60fb      	str	r3, [r7, #12]
}
 8005088:	bf00      	nop
 800508a:	e7fe      	b.n	800508a <vTaskStartScheduler+0xae>
}
 800508c:	bf00      	nop
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	08006a54 	.word	0x08006a54
 8005098:	080056f9 	.word	0x080056f9
 800509c:	20000d28 	.word	0x20000d28
 80050a0:	20000d24 	.word	0x20000d24
 80050a4:	20000d10 	.word	0x20000d10
 80050a8:	20000d08 	.word	0x20000d08

080050ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80050b0:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <vTaskSuspendAll+0x18>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3301      	adds	r3, #1
 80050b6:	4a03      	ldr	r2, [pc, #12]	; (80050c4 <vTaskSuspendAll+0x18>)
 80050b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80050ba:	bf00      	nop
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	20000d2c 	.word	0x20000d2c

080050c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050d6:	4b42      	ldr	r3, [pc, #264]	; (80051e0 <xTaskResumeAll+0x118>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	603b      	str	r3, [r7, #0]
}
 80050f0:	bf00      	nop
 80050f2:	e7fe      	b.n	80050f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050f4:	f001 f92e 	bl	8006354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050f8:	4b39      	ldr	r3, [pc, #228]	; (80051e0 <xTaskResumeAll+0x118>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	4a38      	ldr	r2, [pc, #224]	; (80051e0 <xTaskResumeAll+0x118>)
 8005100:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005102:	4b37      	ldr	r3, [pc, #220]	; (80051e0 <xTaskResumeAll+0x118>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d162      	bne.n	80051d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800510a:	4b36      	ldr	r3, [pc, #216]	; (80051e4 <xTaskResumeAll+0x11c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d05e      	beq.n	80051d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005112:	e02f      	b.n	8005174 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005114:	4b34      	ldr	r3, [pc, #208]	; (80051e8 <xTaskResumeAll+0x120>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3318      	adds	r3, #24
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff f869 	bl	80041f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3304      	adds	r3, #4
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff f864 	bl	80041f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005134:	4b2d      	ldr	r3, [pc, #180]	; (80051ec <xTaskResumeAll+0x124>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d903      	bls.n	8005144 <xTaskResumeAll+0x7c>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	4a2a      	ldr	r2, [pc, #168]	; (80051ec <xTaskResumeAll+0x124>)
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4a27      	ldr	r2, [pc, #156]	; (80051f0 <xTaskResumeAll+0x128>)
 8005152:	441a      	add	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f7fe ffef 	bl	800413e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	4b23      	ldr	r3, [pc, #140]	; (80051f4 <xTaskResumeAll+0x12c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	429a      	cmp	r2, r3
 800516c:	d302      	bcc.n	8005174 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800516e:	4b22      	ldr	r3, [pc, #136]	; (80051f8 <xTaskResumeAll+0x130>)
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005174:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <xTaskResumeAll+0x120>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1cb      	bne.n	8005114 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005182:	f000 fb6f 	bl	8005864 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005186:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <xTaskResumeAll+0x134>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d010      	beq.n	80051b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005192:	f000 f847 	bl	8005224 <xTaskIncrementTick>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800519c:	4b16      	ldr	r3, [pc, #88]	; (80051f8 <xTaskResumeAll+0x130>)
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f1      	bne.n	8005192 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <xTaskResumeAll+0x134>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051b4:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <xTaskResumeAll+0x130>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d009      	beq.n	80051d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051bc:	2301      	movs	r3, #1
 80051be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <xTaskResumeAll+0x138>)
 80051c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051d0:	f001 f8f0 	bl	80063b4 <vPortExitCritical>

	return xAlreadyYielded;
 80051d4:	68bb      	ldr	r3, [r7, #8]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000d2c 	.word	0x20000d2c
 80051e4:	20000d04 	.word	0x20000d04
 80051e8:	20000cc4 	.word	0x20000cc4
 80051ec:	20000d0c 	.word	0x20000d0c
 80051f0:	20000834 	.word	0x20000834
 80051f4:	20000830 	.word	0x20000830
 80051f8:	20000d18 	.word	0x20000d18
 80051fc:	20000d14 	.word	0x20000d14
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <xTaskGetTickCount+0x1c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005210:	687b      	ldr	r3, [r7, #4]
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20000d08 	.word	0x20000d08

08005224 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800522e:	4b4f      	ldr	r3, [pc, #316]	; (800536c <xTaskIncrementTick+0x148>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f040 808f 	bne.w	8005356 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005238:	4b4d      	ldr	r3, [pc, #308]	; (8005370 <xTaskIncrementTick+0x14c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3301      	adds	r3, #1
 800523e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005240:	4a4b      	ldr	r2, [pc, #300]	; (8005370 <xTaskIncrementTick+0x14c>)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d120      	bne.n	800528e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800524c:	4b49      	ldr	r3, [pc, #292]	; (8005374 <xTaskIncrementTick+0x150>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <xTaskIncrementTick+0x48>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	603b      	str	r3, [r7, #0]
}
 8005268:	bf00      	nop
 800526a:	e7fe      	b.n	800526a <xTaskIncrementTick+0x46>
 800526c:	4b41      	ldr	r3, [pc, #260]	; (8005374 <xTaskIncrementTick+0x150>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	4b41      	ldr	r3, [pc, #260]	; (8005378 <xTaskIncrementTick+0x154>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a3f      	ldr	r2, [pc, #252]	; (8005374 <xTaskIncrementTick+0x150>)
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	4a3f      	ldr	r2, [pc, #252]	; (8005378 <xTaskIncrementTick+0x154>)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	4b3e      	ldr	r3, [pc, #248]	; (800537c <xTaskIncrementTick+0x158>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3301      	adds	r3, #1
 8005286:	4a3d      	ldr	r2, [pc, #244]	; (800537c <xTaskIncrementTick+0x158>)
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	f000 faeb 	bl	8005864 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800528e:	4b3c      	ldr	r3, [pc, #240]	; (8005380 <xTaskIncrementTick+0x15c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	429a      	cmp	r2, r3
 8005296:	d349      	bcc.n	800532c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005298:	4b36      	ldr	r3, [pc, #216]	; (8005374 <xTaskIncrementTick+0x150>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d104      	bne.n	80052ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a2:	4b37      	ldr	r3, [pc, #220]	; (8005380 <xTaskIncrementTick+0x15c>)
 80052a4:	f04f 32ff 	mov.w	r2, #4294967295
 80052a8:	601a      	str	r2, [r3, #0]
					break;
 80052aa:	e03f      	b.n	800532c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ac:	4b31      	ldr	r3, [pc, #196]	; (8005374 <xTaskIncrementTick+0x150>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d203      	bcs.n	80052cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052c4:	4a2e      	ldr	r2, [pc, #184]	; (8005380 <xTaskIncrementTick+0x15c>)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052ca:	e02f      	b.n	800532c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fe ff91 	bl	80041f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	3318      	adds	r3, #24
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fe ff88 	bl	80041f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ec:	4b25      	ldr	r3, [pc, #148]	; (8005384 <xTaskIncrementTick+0x160>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d903      	bls.n	80052fc <xTaskIncrementTick+0xd8>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	4a22      	ldr	r2, [pc, #136]	; (8005384 <xTaskIncrementTick+0x160>)
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <xTaskIncrementTick+0x164>)
 800530a:	441a      	add	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	3304      	adds	r3, #4
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f7fe ff13 	bl	800413e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	4b1b      	ldr	r3, [pc, #108]	; (800538c <xTaskIncrementTick+0x168>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	429a      	cmp	r2, r3
 8005324:	d3b8      	bcc.n	8005298 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005326:	2301      	movs	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800532a:	e7b5      	b.n	8005298 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800532c:	4b17      	ldr	r3, [pc, #92]	; (800538c <xTaskIncrementTick+0x168>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005332:	4915      	ldr	r1, [pc, #84]	; (8005388 <xTaskIncrementTick+0x164>)
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d901      	bls.n	8005348 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005344:	2301      	movs	r3, #1
 8005346:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005348:	4b11      	ldr	r3, [pc, #68]	; (8005390 <xTaskIncrementTick+0x16c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005350:	2301      	movs	r3, #1
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e004      	b.n	8005360 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005356:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <xTaskIncrementTick+0x170>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3301      	adds	r3, #1
 800535c:	4a0d      	ldr	r2, [pc, #52]	; (8005394 <xTaskIncrementTick+0x170>)
 800535e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005360:	697b      	ldr	r3, [r7, #20]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000d2c 	.word	0x20000d2c
 8005370:	20000d08 	.word	0x20000d08
 8005374:	20000cbc 	.word	0x20000cbc
 8005378:	20000cc0 	.word	0x20000cc0
 800537c:	20000d1c 	.word	0x20000d1c
 8005380:	20000d24 	.word	0x20000d24
 8005384:	20000d0c 	.word	0x20000d0c
 8005388:	20000834 	.word	0x20000834
 800538c:	20000830 	.word	0x20000830
 8005390:	20000d18 	.word	0x20000d18
 8005394:	20000d14 	.word	0x20000d14

08005398 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800539e:	4b33      	ldr	r3, [pc, #204]	; (800546c <vTaskSwitchContext+0xd4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053a6:	4b32      	ldr	r3, [pc, #200]	; (8005470 <vTaskSwitchContext+0xd8>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053ac:	e05a      	b.n	8005464 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 80053ae:	4b30      	ldr	r3, [pc, #192]	; (8005470 <vTaskSwitchContext+0xd8>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80053b4:	f7fb f89d 	bl	80004f2 <getRunTimeCounterValue>
 80053b8:	4603      	mov	r3, r0
 80053ba:	4a2e      	ldr	r2, [pc, #184]	; (8005474 <vTaskSwitchContext+0xdc>)
 80053bc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80053be:	4b2d      	ldr	r3, [pc, #180]	; (8005474 <vTaskSwitchContext+0xdc>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b2d      	ldr	r3, [pc, #180]	; (8005478 <vTaskSwitchContext+0xe0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d909      	bls.n	80053de <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80053ca:	4b2c      	ldr	r3, [pc, #176]	; (800547c <vTaskSwitchContext+0xe4>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80053d0:	4a28      	ldr	r2, [pc, #160]	; (8005474 <vTaskSwitchContext+0xdc>)
 80053d2:	6810      	ldr	r0, [r2, #0]
 80053d4:	4a28      	ldr	r2, [pc, #160]	; (8005478 <vTaskSwitchContext+0xe0>)
 80053d6:	6812      	ldr	r2, [r2, #0]
 80053d8:	1a82      	subs	r2, r0, r2
 80053da:	440a      	add	r2, r1
 80053dc:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 80053de:	4b25      	ldr	r3, [pc, #148]	; (8005474 <vTaskSwitchContext+0xdc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a25      	ldr	r2, [pc, #148]	; (8005478 <vTaskSwitchContext+0xe0>)
 80053e4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e6:	4b26      	ldr	r3, [pc, #152]	; (8005480 <vTaskSwitchContext+0xe8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e010      	b.n	8005410 <vTaskSwitchContext+0x78>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <vTaskSwitchContext+0x72>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	607b      	str	r3, [r7, #4]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <vTaskSwitchContext+0x70>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3b01      	subs	r3, #1
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	491c      	ldr	r1, [pc, #112]	; (8005484 <vTaskSwitchContext+0xec>)
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0e4      	beq.n	80053ee <vTaskSwitchContext+0x56>
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4a15      	ldr	r2, [pc, #84]	; (8005484 <vTaskSwitchContext+0xec>)
 8005430:	4413      	add	r3, r2
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	3308      	adds	r3, #8
 8005446:	429a      	cmp	r2, r3
 8005448:	d104      	bne.n	8005454 <vTaskSwitchContext+0xbc>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	605a      	str	r2, [r3, #4]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	4a08      	ldr	r2, [pc, #32]	; (800547c <vTaskSwitchContext+0xe4>)
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	4a08      	ldr	r2, [pc, #32]	; (8005480 <vTaskSwitchContext+0xe8>)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6013      	str	r3, [r2, #0]
}
 8005464:	bf00      	nop
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20000d2c 	.word	0x20000d2c
 8005470:	20000d18 	.word	0x20000d18
 8005474:	20000d34 	.word	0x20000d34
 8005478:	20000d30 	.word	0x20000d30
 800547c:	20000830 	.word	0x20000830
 8005480:	20000d0c 	.word	0x20000d0c
 8005484:	20000834 	.word	0x20000834

08005488 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	60fb      	str	r3, [r7, #12]
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054ae:	4b07      	ldr	r3, [pc, #28]	; (80054cc <vTaskPlaceOnEventList+0x44>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3318      	adds	r3, #24
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fe fe65 	bl	8004186 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054bc:	2101      	movs	r1, #1
 80054be:	6838      	ldr	r0, [r7, #0]
 80054c0:	f000 fa7c 	bl	80059bc <prvAddCurrentTaskToDelayedList>
}
 80054c4:	bf00      	nop
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000830 	.word	0x20000830

080054d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	617b      	str	r3, [r7, #20]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <vTaskPlaceOnEventListRestricted+0x54>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3318      	adds	r3, #24
 80054fe:	4619      	mov	r1, r3
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f7fe fe1c 	bl	800413e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800550c:	f04f 33ff 	mov.w	r3, #4294967295
 8005510:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	68b8      	ldr	r0, [r7, #8]
 8005516:	f000 fa51 	bl	80059bc <prvAddCurrentTaskToDelayedList>
	}
 800551a:	bf00      	nop
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000830 	.word	0x20000830

08005528 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	60fb      	str	r3, [r7, #12]
}
 8005550:	bf00      	nop
 8005552:	e7fe      	b.n	8005552 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	3318      	adds	r3, #24
 8005558:	4618      	mov	r0, r3
 800555a:	f7fe fe4d 	bl	80041f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800555e:	4b1e      	ldr	r3, [pc, #120]	; (80055d8 <xTaskRemoveFromEventList+0xb0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11d      	bne.n	80055a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	3304      	adds	r3, #4
 800556a:	4618      	mov	r0, r3
 800556c:	f7fe fe44 	bl	80041f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	4b19      	ldr	r3, [pc, #100]	; (80055dc <xTaskRemoveFromEventList+0xb4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d903      	bls.n	8005584 <xTaskRemoveFromEventList+0x5c>
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	4a16      	ldr	r2, [pc, #88]	; (80055dc <xTaskRemoveFromEventList+0xb4>)
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4a13      	ldr	r2, [pc, #76]	; (80055e0 <xTaskRemoveFromEventList+0xb8>)
 8005592:	441a      	add	r2, r3
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	3304      	adds	r3, #4
 8005598:	4619      	mov	r1, r3
 800559a:	4610      	mov	r0, r2
 800559c:	f7fe fdcf 	bl	800413e <vListInsertEnd>
 80055a0:	e005      	b.n	80055ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	3318      	adds	r3, #24
 80055a6:	4619      	mov	r1, r3
 80055a8:	480e      	ldr	r0, [pc, #56]	; (80055e4 <xTaskRemoveFromEventList+0xbc>)
 80055aa:	f7fe fdc8 	bl	800413e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b2:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <xTaskRemoveFromEventList+0xc0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d905      	bls.n	80055c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055bc:	2301      	movs	r3, #1
 80055be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <xTaskRemoveFromEventList+0xc4>)
 80055c2:	2201      	movs	r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	e001      	b.n	80055cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055cc:	697b      	ldr	r3, [r7, #20]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000d2c 	.word	0x20000d2c
 80055dc:	20000d0c 	.word	0x20000d0c
 80055e0:	20000834 	.word	0x20000834
 80055e4:	20000cc4 	.word	0x20000cc4
 80055e8:	20000830 	.word	0x20000830
 80055ec:	20000d18 	.word	0x20000d18

080055f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055f8:	4b06      	ldr	r3, [pc, #24]	; (8005614 <vTaskInternalSetTimeOutState+0x24>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <vTaskInternalSetTimeOutState+0x28>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	605a      	str	r2, [r3, #4]
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	20000d1c 	.word	0x20000d1c
 8005618:	20000d08 	.word	0x20000d08

0800561c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	613b      	str	r3, [r7, #16]
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	60fb      	str	r3, [r7, #12]
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800565e:	f000 fe79 	bl	8006354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005662:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <xTaskCheckForTimeOut+0xbc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d102      	bne.n	8005682 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800567c:	2300      	movs	r3, #0
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	e023      	b.n	80056ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b15      	ldr	r3, [pc, #84]	; (80056dc <xTaskCheckForTimeOut+0xc0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d007      	beq.n	800569e <xTaskCheckForTimeOut+0x82>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	429a      	cmp	r2, r3
 8005696:	d302      	bcc.n	800569e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005698:	2301      	movs	r3, #1
 800569a:	61fb      	str	r3, [r7, #28]
 800569c:	e015      	b.n	80056ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d20b      	bcs.n	80056c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	1ad2      	subs	r2, r2, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff ff9b 	bl	80055f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	e004      	b.n	80056ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056c6:	2301      	movs	r3, #1
 80056c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056ca:	f000 fe73 	bl	80063b4 <vPortExitCritical>

	return xReturn;
 80056ce:	69fb      	ldr	r3, [r7, #28]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20000d08 	.word	0x20000d08
 80056dc:	20000d1c 	.word	0x20000d1c

080056e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056e4:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <vTaskMissedYield+0x14>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
}
 80056ea:	bf00      	nop
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	20000d18 	.word	0x20000d18

080056f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005700:	f000 f852 	bl	80057a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005704:	4b06      	ldr	r3, [pc, #24]	; (8005720 <prvIdleTask+0x28>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d9f9      	bls.n	8005700 <prvIdleTask+0x8>
			{
				taskYIELD();
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <prvIdleTask+0x2c>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800571c:	e7f0      	b.n	8005700 <prvIdleTask+0x8>
 800571e:	bf00      	nop
 8005720:	20000834 	.word	0x20000834
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800572e:	2300      	movs	r3, #0
 8005730:	607b      	str	r3, [r7, #4]
 8005732:	e00c      	b.n	800574e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4a12      	ldr	r2, [pc, #72]	; (8005788 <prvInitialiseTaskLists+0x60>)
 8005740:	4413      	add	r3, r2
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe fcce 	bl	80040e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3301      	adds	r3, #1
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b37      	cmp	r3, #55	; 0x37
 8005752:	d9ef      	bls.n	8005734 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005754:	480d      	ldr	r0, [pc, #52]	; (800578c <prvInitialiseTaskLists+0x64>)
 8005756:	f7fe fcc5 	bl	80040e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800575a:	480d      	ldr	r0, [pc, #52]	; (8005790 <prvInitialiseTaskLists+0x68>)
 800575c:	f7fe fcc2 	bl	80040e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005760:	480c      	ldr	r0, [pc, #48]	; (8005794 <prvInitialiseTaskLists+0x6c>)
 8005762:	f7fe fcbf 	bl	80040e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005766:	480c      	ldr	r0, [pc, #48]	; (8005798 <prvInitialiseTaskLists+0x70>)
 8005768:	f7fe fcbc 	bl	80040e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800576c:	480b      	ldr	r0, [pc, #44]	; (800579c <prvInitialiseTaskLists+0x74>)
 800576e:	f7fe fcb9 	bl	80040e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005772:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <prvInitialiseTaskLists+0x78>)
 8005774:	4a05      	ldr	r2, [pc, #20]	; (800578c <prvInitialiseTaskLists+0x64>)
 8005776:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005778:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <prvInitialiseTaskLists+0x7c>)
 800577a:	4a05      	ldr	r2, [pc, #20]	; (8005790 <prvInitialiseTaskLists+0x68>)
 800577c:	601a      	str	r2, [r3, #0]
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000834 	.word	0x20000834
 800578c:	20000c94 	.word	0x20000c94
 8005790:	20000ca8 	.word	0x20000ca8
 8005794:	20000cc4 	.word	0x20000cc4
 8005798:	20000cd8 	.word	0x20000cd8
 800579c:	20000cf0 	.word	0x20000cf0
 80057a0:	20000cbc 	.word	0x20000cbc
 80057a4:	20000cc0 	.word	0x20000cc0

080057a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ae:	e019      	b.n	80057e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057b0:	f000 fdd0 	bl	8006354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b4:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <prvCheckTasksWaitingTermination+0x50>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3304      	adds	r3, #4
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fe fd19 	bl	80041f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057c6:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <prvCheckTasksWaitingTermination+0x54>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	4a0b      	ldr	r2, [pc, #44]	; (80057fc <prvCheckTasksWaitingTermination+0x54>)
 80057ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <prvCheckTasksWaitingTermination+0x58>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	4a0a      	ldr	r2, [pc, #40]	; (8005800 <prvCheckTasksWaitingTermination+0x58>)
 80057d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057da:	f000 fdeb 	bl	80063b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f810 	bl	8005804 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057e4:	4b06      	ldr	r3, [pc, #24]	; (8005800 <prvCheckTasksWaitingTermination+0x58>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e1      	bne.n	80057b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000cd8 	.word	0x20000cd8
 80057fc:	20000d04 	.word	0x20000d04
 8005800:	20000cec 	.word	0x20000cec

08005804 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005812:	2b00      	cmp	r3, #0
 8005814:	d108      	bne.n	8005828 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581a:	4618      	mov	r0, r3
 800581c:	f000 ff88 	bl	8006730 <vPortFree>
				vPortFree( pxTCB );
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 ff85 	bl	8006730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005826:	e018      	b.n	800585a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800582e:	2b01      	cmp	r3, #1
 8005830:	d103      	bne.n	800583a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 ff7c 	bl	8006730 <vPortFree>
	}
 8005838:	e00f      	b.n	800585a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005840:	2b02      	cmp	r3, #2
 8005842:	d00a      	beq.n	800585a <prvDeleteTCB+0x56>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60fb      	str	r3, [r7, #12]
}
 8005856:	bf00      	nop
 8005858:	e7fe      	b.n	8005858 <prvDeleteTCB+0x54>
	}
 800585a:	bf00      	nop
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800586a:	4b0c      	ldr	r3, [pc, #48]	; (800589c <prvResetNextTaskUnblockTime+0x38>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005874:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <prvResetNextTaskUnblockTime+0x3c>)
 8005876:	f04f 32ff 	mov.w	r2, #4294967295
 800587a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800587c:	e008      	b.n	8005890 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587e:	4b07      	ldr	r3, [pc, #28]	; (800589c <prvResetNextTaskUnblockTime+0x38>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4a04      	ldr	r2, [pc, #16]	; (80058a0 <prvResetNextTaskUnblockTime+0x3c>)
 800588e:	6013      	str	r3, [r2, #0]
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20000cbc 	.word	0x20000cbc
 80058a0:	20000d24 	.word	0x20000d24

080058a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058aa:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <xTaskGetSchedulerState+0x34>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058b2:	2301      	movs	r3, #1
 80058b4:	607b      	str	r3, [r7, #4]
 80058b6:	e008      	b.n	80058ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058b8:	4b08      	ldr	r3, [pc, #32]	; (80058dc <xTaskGetSchedulerState+0x38>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d102      	bne.n	80058c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058c0:	2302      	movs	r3, #2
 80058c2:	607b      	str	r3, [r7, #4]
 80058c4:	e001      	b.n	80058ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058c6:	2300      	movs	r3, #0
 80058c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058ca:	687b      	ldr	r3, [r7, #4]
	}
 80058cc:	4618      	mov	r0, r3
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	20000d10 	.word	0x20000d10
 80058dc:	20000d2c 	.word	0x20000d2c

080058e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d056      	beq.n	80059a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058f6:	4b2e      	ldr	r3, [pc, #184]	; (80059b0 <xTaskPriorityDisinherit+0xd0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d00a      	beq.n	8005916 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	60fb      	str	r3, [r7, #12]
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	60bb      	str	r3, [r7, #8]
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005938:	1e5a      	subs	r2, r3, #1
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005946:	429a      	cmp	r2, r3
 8005948:	d02c      	beq.n	80059a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	2b00      	cmp	r3, #0
 8005950:	d128      	bne.n	80059a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	3304      	adds	r3, #4
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fc4e 	bl	80041f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <xTaskPriorityDisinherit+0xd4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d903      	bls.n	8005984 <xTaskPriorityDisinherit+0xa4>
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	4a0c      	ldr	r2, [pc, #48]	; (80059b4 <xTaskPriorityDisinherit+0xd4>)
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <xTaskPriorityDisinherit+0xd8>)
 8005992:	441a      	add	r2, r3
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	3304      	adds	r3, #4
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f7fe fbcf 	bl	800413e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059a0:	2301      	movs	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059a4:	697b      	ldr	r3, [r7, #20]
	}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000830 	.word	0x20000830
 80059b4:	20000d0c 	.word	0x20000d0c
 80059b8:	20000834 	.word	0x20000834

080059bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059c6:	4b21      	ldr	r3, [pc, #132]	; (8005a4c <prvAddCurrentTaskToDelayedList+0x90>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059cc:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <prvAddCurrentTaskToDelayedList+0x94>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fc10 	bl	80041f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059de:	d10a      	bne.n	80059f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059e6:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <prvAddCurrentTaskToDelayedList+0x94>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	4819      	ldr	r0, [pc, #100]	; (8005a54 <prvAddCurrentTaskToDelayedList+0x98>)
 80059f0:	f7fe fba5 	bl	800413e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059f4:	e026      	b.n	8005a44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4413      	add	r3, r2
 80059fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059fe:	4b14      	ldr	r3, [pc, #80]	; (8005a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d209      	bcs.n	8005a22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a0e:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f7fe fbb3 	bl	8004186 <vListInsert>
}
 8005a20:	e010      	b.n	8005a44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f7fe fba9 	bl	8004186 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d202      	bcs.n	8005a44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a3e:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	6013      	str	r3, [r2, #0]
}
 8005a44:	bf00      	nop
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20000d08 	.word	0x20000d08
 8005a50:	20000830 	.word	0x20000830
 8005a54:	20000cf0 	.word	0x20000cf0
 8005a58:	20000cc0 	.word	0x20000cc0
 8005a5c:	20000cbc 	.word	0x20000cbc
 8005a60:	20000d24 	.word	0x20000d24

08005a64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a6e:	f000 fb07 	bl	8006080 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a72:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <xTimerCreateTimerTask+0x80>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d021      	beq.n	8005abe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a82:	1d3a      	adds	r2, r7, #4
 8005a84:	f107 0108 	add.w	r1, r7, #8
 8005a88:	f107 030c 	add.w	r3, r7, #12
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fe fb0f 	bl	80040b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	9202      	str	r2, [sp, #8]
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	460a      	mov	r2, r1
 8005aa4:	4910      	ldr	r1, [pc, #64]	; (8005ae8 <xTimerCreateTimerTask+0x84>)
 8005aa6:	4811      	ldr	r0, [pc, #68]	; (8005aec <xTimerCreateTimerTask+0x88>)
 8005aa8:	f7ff f8bc 	bl	8004c24 <xTaskCreateStatic>
 8005aac:	4603      	mov	r3, r0
 8005aae:	4a10      	ldr	r2, [pc, #64]	; (8005af0 <xTimerCreateTimerTask+0x8c>)
 8005ab0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <xTimerCreateTimerTask+0x8c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005aba:	2301      	movs	r3, #1
 8005abc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	613b      	str	r3, [r7, #16]
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ada:	697b      	ldr	r3, [r7, #20]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20000d68 	.word	0x20000d68
 8005ae8:	08006a5c 	.word	0x08006a5c
 8005aec:	08005c29 	.word	0x08005c29
 8005af0:	20000d6c 	.word	0x20000d6c

08005af4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08a      	sub	sp, #40	; 0x28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	623b      	str	r3, [r7, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b22:	4b1a      	ldr	r3, [pc, #104]	; (8005b8c <xTimerGenericCommand+0x98>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d02a      	beq.n	8005b80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b05      	cmp	r3, #5
 8005b3a:	dc18      	bgt.n	8005b6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b3c:	f7ff feb2 	bl	80058a4 <xTaskGetSchedulerState>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d109      	bne.n	8005b5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b46:	4b11      	ldr	r3, [pc, #68]	; (8005b8c <xTimerGenericCommand+0x98>)
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	f107 0110 	add.w	r1, r7, #16
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b52:	f7fe fc7f 	bl	8004454 <xQueueGenericSend>
 8005b56:	6278      	str	r0, [r7, #36]	; 0x24
 8005b58:	e012      	b.n	8005b80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <xTimerGenericCommand+0x98>)
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	f107 0110 	add.w	r1, r7, #16
 8005b62:	2300      	movs	r3, #0
 8005b64:	2200      	movs	r2, #0
 8005b66:	f7fe fc75 	bl	8004454 <xQueueGenericSend>
 8005b6a:	6278      	str	r0, [r7, #36]	; 0x24
 8005b6c:	e008      	b.n	8005b80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <xTimerGenericCommand+0x98>)
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	f107 0110 	add.w	r1, r7, #16
 8005b76:	2300      	movs	r3, #0
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	f7fe fd69 	bl	8004650 <xQueueGenericSendFromISR>
 8005b7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3728      	adds	r7, #40	; 0x28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000d68 	.word	0x20000d68

08005b90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b9a:	4b22      	ldr	r3, [pc, #136]	; (8005c24 <prvProcessExpiredTimer+0x94>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fb25 	bl	80041f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d022      	beq.n	8005c02 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	18d1      	adds	r1, r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	6978      	ldr	r0, [r7, #20]
 8005bca:	f000 f8d1 	bl	8005d70 <prvInsertTimerInActiveList>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01f      	beq.n	8005c14 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	2100      	movs	r1, #0
 8005bde:	6978      	ldr	r0, [r7, #20]
 8005be0:	f7ff ff88 	bl	8005af4 <xTimerGenericCommand>
 8005be4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d113      	bne.n	8005c14 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	60fb      	str	r3, [r7, #12]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	6978      	ldr	r0, [r7, #20]
 8005c1a:	4798      	blx	r3
}
 8005c1c:	bf00      	nop
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000d60 	.word	0x20000d60

08005c28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c30:	f107 0308 	add.w	r3, r7, #8
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 f857 	bl	8005ce8 <prvGetNextExpireTime>
 8005c3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f803 	bl	8005c4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c46:	f000 f8d5 	bl	8005df4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c4a:	e7f1      	b.n	8005c30 <prvTimerTask+0x8>

08005c4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c56:	f7ff fa29 	bl	80050ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c5a:	f107 0308 	add.w	r3, r7, #8
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 f866 	bl	8005d30 <prvSampleTimeNow>
 8005c64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d130      	bne.n	8005cce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <prvProcessTimerOrBlockTask+0x3c>
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d806      	bhi.n	8005c88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c7a:	f7ff fa25 	bl	80050c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c7e:	68f9      	ldr	r1, [r7, #12]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ff85 	bl	8005b90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c86:	e024      	b.n	8005cd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c8e:	4b13      	ldr	r3, [pc, #76]	; (8005cdc <prvProcessTimerOrBlockTask+0x90>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <prvProcessTimerOrBlockTask+0x50>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <prvProcessTimerOrBlockTask+0x52>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <prvProcessTimerOrBlockTask+0x94>)
 8005ca2:	6818      	ldr	r0, [r3, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	4619      	mov	r1, r3
 8005cae:	f7fe ff85 	bl	8004bbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cb2:	f7ff fa09 	bl	80050c8 <xTaskResumeAll>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <prvProcessTimerOrBlockTask+0x98>)
 8005cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	f3bf 8f6f 	isb	sy
}
 8005ccc:	e001      	b.n	8005cd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cce:	f7ff f9fb 	bl	80050c8 <xTaskResumeAll>
}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000d64 	.word	0x20000d64
 8005ce0:	20000d68 	.word	0x20000d68
 8005ce4:	e000ed04 	.word	0xe000ed04

08005ce8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <prvGetNextExpireTime+0x44>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <prvGetNextExpireTime+0x16>
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	e000      	b.n	8005d00 <prvGetNextExpireTime+0x18>
 8005cfe:	2200      	movs	r2, #0
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d0c:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <prvGetNextExpireTime+0x44>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	e001      	b.n	8005d1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	20000d60 	.word	0x20000d60

08005d30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d38:	f7ff fa64 	bl	8005204 <xTaskGetTickCount>
 8005d3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d3e:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <prvSampleTimeNow+0x3c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d205      	bcs.n	8005d54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d48:	f000 f936 	bl	8005fb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	e002      	b.n	8005d5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d5a:	4a04      	ldr	r2, [pc, #16]	; (8005d6c <prvSampleTimeNow+0x3c>)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d60:	68fb      	ldr	r3, [r7, #12]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000d70 	.word	0x20000d70

08005d70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d812      	bhi.n	8005dbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	1ad2      	subs	r2, r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d302      	bcc.n	8005daa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	e01b      	b.n	8005de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005daa:	4b10      	ldr	r3, [pc, #64]	; (8005dec <prvInsertTimerInActiveList+0x7c>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3304      	adds	r3, #4
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f7fe f9e6 	bl	8004186 <vListInsert>
 8005dba:	e012      	b.n	8005de2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d206      	bcs.n	8005dd2 <prvInsertTimerInActiveList+0x62>
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d302      	bcc.n	8005dd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	e007      	b.n	8005de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dd2:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <prvInsertTimerInActiveList+0x80>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f7fe f9d2 	bl	8004186 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005de2:	697b      	ldr	r3, [r7, #20]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20000d64 	.word	0x20000d64
 8005df0:	20000d60 	.word	0x20000d60

08005df4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08e      	sub	sp, #56	; 0x38
 8005df8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dfa:	e0ca      	b.n	8005f92 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	da18      	bge.n	8005e34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e02:	1d3b      	adds	r3, r7, #4
 8005e04:	3304      	adds	r3, #4
 8005e06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	61fb      	str	r3, [r7, #28]
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e2a:	6850      	ldr	r0, [r2, #4]
 8005e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e2e:	6892      	ldr	r2, [r2, #8]
 8005e30:	4611      	mov	r1, r2
 8005e32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f2c0 80aa 	blt.w	8005f90 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe f9d3 	bl	80041f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e52:	463b      	mov	r3, r7
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff ff6b 	bl	8005d30 <prvSampleTimeNow>
 8005e5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b09      	cmp	r3, #9
 8005e60:	f200 8097 	bhi.w	8005f92 <prvProcessReceivedCommands+0x19e>
 8005e64:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <prvProcessReceivedCommands+0x78>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005e95 	.word	0x08005e95
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005e95 	.word	0x08005e95
 8005e78:	08005f09 	.word	0x08005f09
 8005e7c:	08005f1d 	.word	0x08005f1d
 8005e80:	08005f67 	.word	0x08005f67
 8005e84:	08005e95 	.word	0x08005e95
 8005e88:	08005e95 	.word	0x08005e95
 8005e8c:	08005f09 	.word	0x08005f09
 8005e90:	08005f1d 	.word	0x08005f1d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	18d1      	adds	r1, r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eb4:	f7ff ff5c 	bl	8005d70 <prvInsertTimerInActiveList>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d069      	beq.n	8005f92 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d05e      	beq.n	8005f92 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	441a      	add	r2, r3
 8005edc:	2300      	movs	r3, #0
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ee6:	f7ff fe05 	bl	8005af4 <xTimerGenericCommand>
 8005eea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d14f      	bne.n	8005f92 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	61bb      	str	r3, [r7, #24]
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f0e:	f023 0301 	bic.w	r3, r3, #1
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005f1a:	e03a      	b.n	8005f92 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	617b      	str	r3, [r7, #20]
}
 8005f4e:	bf00      	nop
 8005f50:	e7fe      	b.n	8005f50 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	699a      	ldr	r2, [r3, #24]
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	18d1      	adds	r1, r2, r3
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f60:	f7ff ff06 	bl	8005d70 <prvInsertTimerInActiveList>
					break;
 8005f64:	e015      	b.n	8005f92 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d103      	bne.n	8005f7c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f76:	f000 fbdb 	bl	8006730 <vPortFree>
 8005f7a:	e00a      	b.n	8005f92 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f8e:	e000      	b.n	8005f92 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005f90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <prvProcessReceivedCommands+0x1c0>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	1d39      	adds	r1, r7, #4
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe fbf4 	bl	8004788 <xQueueReceive>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f47f af2a 	bne.w	8005dfc <prvProcessReceivedCommands+0x8>
	}
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	3730      	adds	r7, #48	; 0x30
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000d68 	.word	0x20000d68

08005fb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fbe:	e048      	b.n	8006052 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fc0:	4b2d      	ldr	r3, [pc, #180]	; (8006078 <prvSwitchTimerLists+0xc0>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fca:	4b2b      	ldr	r3, [pc, #172]	; (8006078 <prvSwitchTimerLists+0xc0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fe f90d 	bl	80041f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d02e      	beq.n	8006052 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	429a      	cmp	r2, r3
 8006004:	d90e      	bls.n	8006024 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006012:	4b19      	ldr	r3, [pc, #100]	; (8006078 <prvSwitchTimerLists+0xc0>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3304      	adds	r3, #4
 800601a:	4619      	mov	r1, r3
 800601c:	4610      	mov	r0, r2
 800601e:	f7fe f8b2 	bl	8004186 <vListInsert>
 8006022:	e016      	b.n	8006052 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006024:	2300      	movs	r3, #0
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	2300      	movs	r3, #0
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	2100      	movs	r1, #0
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f7ff fd60 	bl	8005af4 <xTimerGenericCommand>
 8006034:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	603b      	str	r3, [r7, #0]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006052:	4b09      	ldr	r3, [pc, #36]	; (8006078 <prvSwitchTimerLists+0xc0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1b1      	bne.n	8005fc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800605c:	4b06      	ldr	r3, [pc, #24]	; (8006078 <prvSwitchTimerLists+0xc0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006062:	4b06      	ldr	r3, [pc, #24]	; (800607c <prvSwitchTimerLists+0xc4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a04      	ldr	r2, [pc, #16]	; (8006078 <prvSwitchTimerLists+0xc0>)
 8006068:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800606a:	4a04      	ldr	r2, [pc, #16]	; (800607c <prvSwitchTimerLists+0xc4>)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	6013      	str	r3, [r2, #0]
}
 8006070:	bf00      	nop
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20000d60 	.word	0x20000d60
 800607c:	20000d64 	.word	0x20000d64

08006080 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006086:	f000 f965 	bl	8006354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800608a:	4b15      	ldr	r3, [pc, #84]	; (80060e0 <prvCheckForValidListAndQueue+0x60>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d120      	bne.n	80060d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006092:	4814      	ldr	r0, [pc, #80]	; (80060e4 <prvCheckForValidListAndQueue+0x64>)
 8006094:	f7fe f826 	bl	80040e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006098:	4813      	ldr	r0, [pc, #76]	; (80060e8 <prvCheckForValidListAndQueue+0x68>)
 800609a:	f7fe f823 	bl	80040e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800609e:	4b13      	ldr	r3, [pc, #76]	; (80060ec <prvCheckForValidListAndQueue+0x6c>)
 80060a0:	4a10      	ldr	r2, [pc, #64]	; (80060e4 <prvCheckForValidListAndQueue+0x64>)
 80060a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060a4:	4b12      	ldr	r3, [pc, #72]	; (80060f0 <prvCheckForValidListAndQueue+0x70>)
 80060a6:	4a10      	ldr	r2, [pc, #64]	; (80060e8 <prvCheckForValidListAndQueue+0x68>)
 80060a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060aa:	2300      	movs	r3, #0
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <prvCheckForValidListAndQueue+0x74>)
 80060b0:	4a11      	ldr	r2, [pc, #68]	; (80060f8 <prvCheckForValidListAndQueue+0x78>)
 80060b2:	2110      	movs	r1, #16
 80060b4:	200a      	movs	r0, #10
 80060b6:	f7fe f931 	bl	800431c <xQueueGenericCreateStatic>
 80060ba:	4603      	mov	r3, r0
 80060bc:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <prvCheckForValidListAndQueue+0x60>)
 80060be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <prvCheckForValidListAndQueue+0x60>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060c8:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <prvCheckForValidListAndQueue+0x60>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	490b      	ldr	r1, [pc, #44]	; (80060fc <prvCheckForValidListAndQueue+0x7c>)
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fd4a 	bl	8004b68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060d4:	f000 f96e 	bl	80063b4 <vPortExitCritical>
}
 80060d8:	bf00      	nop
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000d68 	.word	0x20000d68
 80060e4:	20000d38 	.word	0x20000d38
 80060e8:	20000d4c 	.word	0x20000d4c
 80060ec:	20000d60 	.word	0x20000d60
 80060f0:	20000d64 	.word	0x20000d64
 80060f4:	20000e14 	.word	0x20000e14
 80060f8:	20000d74 	.word	0x20000d74
 80060fc:	08006a64 	.word	0x08006a64

08006100 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3b04      	subs	r3, #4
 8006110:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3b04      	subs	r3, #4
 800611e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f023 0201 	bic.w	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3b04      	subs	r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006130:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <pxPortInitialiseStack+0x64>)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3b14      	subs	r3, #20
 800613a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3b04      	subs	r3, #4
 8006146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f06f 0202 	mvn.w	r2, #2
 800614e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3b20      	subs	r3, #32
 8006154:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006156:	68fb      	ldr	r3, [r7, #12]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	08006169 	.word	0x08006169

08006168 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006172:	4b12      	ldr	r3, [pc, #72]	; (80061bc <prvTaskExitError+0x54>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d00a      	beq.n	8006192 <prvTaskExitError+0x2a>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	60fb      	str	r3, [r7, #12]
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <prvTaskExitError+0x28>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	60bb      	str	r3, [r7, #8]
}
 80061a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061a6:	bf00      	nop
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0fc      	beq.n	80061a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061ae:	bf00      	nop
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	2000000c 	.word	0x2000000c

080061c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <pxCurrentTCBConst2>)
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	6808      	ldr	r0, [r1, #0]
 80061c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ca:	f380 8809 	msr	PSP, r0
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f04f 0000 	mov.w	r0, #0
 80061d6:	f380 8811 	msr	BASEPRI, r0
 80061da:	4770      	bx	lr
 80061dc:	f3af 8000 	nop.w

080061e0 <pxCurrentTCBConst2>:
 80061e0:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061e8:	4808      	ldr	r0, [pc, #32]	; (800620c <prvPortStartFirstTask+0x24>)
 80061ea:	6800      	ldr	r0, [r0, #0]
 80061ec:	6800      	ldr	r0, [r0, #0]
 80061ee:	f380 8808 	msr	MSP, r0
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8814 	msr	CONTROL, r0
 80061fa:	b662      	cpsie	i
 80061fc:	b661      	cpsie	f
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	df00      	svc	0
 8006208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800620a:	bf00      	nop
 800620c:	e000ed08 	.word	0xe000ed08

08006210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006216:	4b46      	ldr	r3, [pc, #280]	; (8006330 <xPortStartScheduler+0x120>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a46      	ldr	r2, [pc, #280]	; (8006334 <xPortStartScheduler+0x124>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d10a      	bne.n	8006236 <xPortStartScheduler+0x26>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	613b      	str	r3, [r7, #16]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006236:	4b3e      	ldr	r3, [pc, #248]	; (8006330 <xPortStartScheduler+0x120>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a3f      	ldr	r2, [pc, #252]	; (8006338 <xPortStartScheduler+0x128>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d10a      	bne.n	8006256 <xPortStartScheduler+0x46>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	60fb      	str	r3, [r7, #12]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006256:	4b39      	ldr	r3, [pc, #228]	; (800633c <xPortStartScheduler+0x12c>)
 8006258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	22ff      	movs	r2, #255	; 0xff
 8006266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006278:	b2da      	uxtb	r2, r3
 800627a:	4b31      	ldr	r3, [pc, #196]	; (8006340 <xPortStartScheduler+0x130>)
 800627c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800627e:	4b31      	ldr	r3, [pc, #196]	; (8006344 <xPortStartScheduler+0x134>)
 8006280:	2207      	movs	r2, #7
 8006282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006284:	e009      	b.n	800629a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006286:	4b2f      	ldr	r3, [pc, #188]	; (8006344 <xPortStartScheduler+0x134>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3b01      	subs	r3, #1
 800628c:	4a2d      	ldr	r2, [pc, #180]	; (8006344 <xPortStartScheduler+0x134>)
 800628e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a2:	2b80      	cmp	r3, #128	; 0x80
 80062a4:	d0ef      	beq.n	8006286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062a6:	4b27      	ldr	r3, [pc, #156]	; (8006344 <xPortStartScheduler+0x134>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1c3 0307 	rsb	r3, r3, #7
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d00a      	beq.n	80062c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	60bb      	str	r3, [r7, #8]
}
 80062c4:	bf00      	nop
 80062c6:	e7fe      	b.n	80062c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062c8:	4b1e      	ldr	r3, [pc, #120]	; (8006344 <xPortStartScheduler+0x134>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <xPortStartScheduler+0x134>)
 80062d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062d2:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <xPortStartScheduler+0x134>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062da:	4a1a      	ldr	r2, [pc, #104]	; (8006344 <xPortStartScheduler+0x134>)
 80062dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062e6:	4b18      	ldr	r3, [pc, #96]	; (8006348 <xPortStartScheduler+0x138>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a17      	ldr	r2, [pc, #92]	; (8006348 <xPortStartScheduler+0x138>)
 80062ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <xPortStartScheduler+0x138>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a14      	ldr	r2, [pc, #80]	; (8006348 <xPortStartScheduler+0x138>)
 80062f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062fe:	f000 f8dd 	bl	80064bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <xPortStartScheduler+0x13c>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006308:	f000 f8fc 	bl	8006504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800630c:	4b10      	ldr	r3, [pc, #64]	; (8006350 <xPortStartScheduler+0x140>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a0f      	ldr	r2, [pc, #60]	; (8006350 <xPortStartScheduler+0x140>)
 8006312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006318:	f7ff ff66 	bl	80061e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800631c:	f7ff f83c 	bl	8005398 <vTaskSwitchContext>
	prvTaskExitError();
 8006320:	f7ff ff22 	bl	8006168 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	e000ed00 	.word	0xe000ed00
 8006334:	410fc271 	.word	0x410fc271
 8006338:	410fc270 	.word	0x410fc270
 800633c:	e000e400 	.word	0xe000e400
 8006340:	20000e64 	.word	0x20000e64
 8006344:	20000e68 	.word	0x20000e68
 8006348:	e000ed20 	.word	0xe000ed20
 800634c:	2000000c 	.word	0x2000000c
 8006350:	e000ef34 	.word	0xe000ef34

08006354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	607b      	str	r3, [r7, #4]
}
 800636c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800636e:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <vPortEnterCritical+0x58>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3301      	adds	r3, #1
 8006374:	4a0d      	ldr	r2, [pc, #52]	; (80063ac <vPortEnterCritical+0x58>)
 8006376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006378:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <vPortEnterCritical+0x58>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10f      	bne.n	80063a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <vPortEnterCritical+0x5c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	603b      	str	r3, [r7, #0]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <vPortEnterCritical+0x4a>
	}
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	2000000c 	.word	0x2000000c
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063ba:	4b12      	ldr	r3, [pc, #72]	; (8006404 <vPortExitCritical+0x50>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <vPortExitCritical+0x24>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	607b      	str	r3, [r7, #4]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063d8:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <vPortExitCritical+0x50>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3b01      	subs	r3, #1
 80063de:	4a09      	ldr	r2, [pc, #36]	; (8006404 <vPortExitCritical+0x50>)
 80063e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063e2:	4b08      	ldr	r3, [pc, #32]	; (8006404 <vPortExitCritical+0x50>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d105      	bne.n	80063f6 <vPortExitCritical+0x42>
 80063ea:	2300      	movs	r3, #0
 80063ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	f383 8811 	msr	BASEPRI, r3
}
 80063f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	2000000c 	.word	0x2000000c
	...

08006410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006410:	f3ef 8009 	mrs	r0, PSP
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <pxCurrentTCBConst>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f01e 0f10 	tst.w	lr, #16
 8006420:	bf08      	it	eq
 8006422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	6010      	str	r0, [r2, #0]
 800642c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006434:	f380 8811 	msr	BASEPRI, r0
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f7fe ffaa 	bl	8005398 <vTaskSwitchContext>
 8006444:	f04f 0000 	mov.w	r0, #0
 8006448:	f380 8811 	msr	BASEPRI, r0
 800644c:	bc09      	pop	{r0, r3}
 800644e:	6819      	ldr	r1, [r3, #0]
 8006450:	6808      	ldr	r0, [r1, #0]
 8006452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006456:	f01e 0f10 	tst.w	lr, #16
 800645a:	bf08      	it	eq
 800645c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006460:	f380 8809 	msr	PSP, r0
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	f3af 8000 	nop.w

08006470 <pxCurrentTCBConst>:
 8006470:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop

08006478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	607b      	str	r3, [r7, #4]
}
 8006490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006492:	f7fe fec7 	bl	8005224 <xTaskIncrementTick>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800649c:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <xPortSysTickHandler+0x40>)
 800649e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	2300      	movs	r3, #0
 80064a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f383 8811 	msr	BASEPRI, r3
}
 80064ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <vPortSetupTimerInterrupt+0x34>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <vPortSetupTimerInterrupt+0x38>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <vPortSetupTimerInterrupt+0x3c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <vPortSetupTimerInterrupt+0x40>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	099b      	lsrs	r3, r3, #6
 80064d8:	4a09      	ldr	r2, [pc, #36]	; (8006500 <vPortSetupTimerInterrupt+0x44>)
 80064da:	3b01      	subs	r3, #1
 80064dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064de:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <vPortSetupTimerInterrupt+0x34>)
 80064e0:	2207      	movs	r2, #7
 80064e2:	601a      	str	r2, [r3, #0]
}
 80064e4:	bf00      	nop
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	e000e010 	.word	0xe000e010
 80064f4:	e000e018 	.word	0xe000e018
 80064f8:	20000000 	.word	0x20000000
 80064fc:	10624dd3 	.word	0x10624dd3
 8006500:	e000e014 	.word	0xe000e014

08006504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006514 <vPortEnableVFP+0x10>
 8006508:	6801      	ldr	r1, [r0, #0]
 800650a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800650e:	6001      	str	r1, [r0, #0]
 8006510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006512:	bf00      	nop
 8006514:	e000ed88 	.word	0xe000ed88

08006518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800651e:	f3ef 8305 	mrs	r3, IPSR
 8006522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b0f      	cmp	r3, #15
 8006528:	d914      	bls.n	8006554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800652a:	4a17      	ldr	r2, [pc, #92]	; (8006588 <vPortValidateInterruptPriority+0x70>)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <vPortValidateInterruptPriority+0x74>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	7afa      	ldrb	r2, [r7, #11]
 800653a:	429a      	cmp	r2, r3
 800653c:	d20a      	bcs.n	8006554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	607b      	str	r3, [r7, #4]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006554:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <vPortValidateInterruptPriority+0x78>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800655c:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <vPortValidateInterruptPriority+0x7c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d90a      	bls.n	800657a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	603b      	str	r3, [r7, #0]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <vPortValidateInterruptPriority+0x60>
	}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	e000e3f0 	.word	0xe000e3f0
 800658c:	20000e64 	.word	0x20000e64
 8006590:	e000ed0c 	.word	0xe000ed0c
 8006594:	20000e68 	.word	0x20000e68

08006598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	; 0x28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065a4:	f7fe fd82 	bl	80050ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065a8:	4b5b      	ldr	r3, [pc, #364]	; (8006718 <pvPortMalloc+0x180>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065b0:	f000 f920 	bl	80067f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065b4:	4b59      	ldr	r3, [pc, #356]	; (800671c <pvPortMalloc+0x184>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4013      	ands	r3, r2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f040 8093 	bne.w	80066e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01d      	beq.n	8006604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80065c8:	2208      	movs	r2, #8
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4413      	add	r3, r2
 80065ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d014      	beq.n	8006604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f023 0307 	bic.w	r3, r3, #7
 80065e0:	3308      	adds	r3, #8
 80065e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <pvPortMalloc+0x6c>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	617b      	str	r3, [r7, #20]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d06e      	beq.n	80066e8 <pvPortMalloc+0x150>
 800660a:	4b45      	ldr	r3, [pc, #276]	; (8006720 <pvPortMalloc+0x188>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d869      	bhi.n	80066e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006614:	4b43      	ldr	r3, [pc, #268]	; (8006724 <pvPortMalloc+0x18c>)
 8006616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006618:	4b42      	ldr	r3, [pc, #264]	; (8006724 <pvPortMalloc+0x18c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800661e:	e004      	b.n	800662a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	d903      	bls.n	800663c <pvPortMalloc+0xa4>
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1f1      	bne.n	8006620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800663c:	4b36      	ldr	r3, [pc, #216]	; (8006718 <pvPortMalloc+0x180>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006642:	429a      	cmp	r2, r3
 8006644:	d050      	beq.n	80066e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2208      	movs	r2, #8
 800664c:	4413      	add	r3, r2
 800664e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	2308      	movs	r3, #8
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	429a      	cmp	r2, r3
 8006666:	d91f      	bls.n	80066a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4413      	add	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <pvPortMalloc+0xf8>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	613b      	str	r3, [r7, #16]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	1ad2      	subs	r2, r2, r3
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066a2:	69b8      	ldr	r0, [r7, #24]
 80066a4:	f000 f908 	bl	80068b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066a8:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <pvPortMalloc+0x188>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <pvPortMalloc+0x188>)
 80066b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066b6:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <pvPortMalloc+0x188>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4b1b      	ldr	r3, [pc, #108]	; (8006728 <pvPortMalloc+0x190>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d203      	bcs.n	80066ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066c2:	4b17      	ldr	r3, [pc, #92]	; (8006720 <pvPortMalloc+0x188>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a18      	ldr	r2, [pc, #96]	; (8006728 <pvPortMalloc+0x190>)
 80066c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	4b13      	ldr	r3, [pc, #76]	; (800671c <pvPortMalloc+0x184>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <pvPortMalloc+0x194>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	4a11      	ldr	r2, [pc, #68]	; (800672c <pvPortMalloc+0x194>)
 80066e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066e8:	f7fe fcee 	bl	80050c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <pvPortMalloc+0x174>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	60fb      	str	r3, [r7, #12]
}
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <pvPortMalloc+0x172>
	return pvReturn;
 800670c:	69fb      	ldr	r3, [r7, #28]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3728      	adds	r7, #40	; 0x28
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20004a74 	.word	0x20004a74
 800671c:	20004a88 	.word	0x20004a88
 8006720:	20004a78 	.word	0x20004a78
 8006724:	20004a6c 	.word	0x20004a6c
 8006728:	20004a7c 	.word	0x20004a7c
 800672c:	20004a80 	.word	0x20004a80

08006730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d04d      	beq.n	80067de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006742:	2308      	movs	r3, #8
 8006744:	425b      	negs	r3, r3
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4413      	add	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <vPortFree+0xb8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4013      	ands	r3, r2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <vPortFree+0x44>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	60fb      	str	r3, [r7, #12]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <vPortFree+0x62>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	60bb      	str	r3, [r7, #8]
}
 800678e:	bf00      	nop
 8006790:	e7fe      	b.n	8006790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	4b14      	ldr	r3, [pc, #80]	; (80067e8 <vPortFree+0xb8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4013      	ands	r3, r2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01e      	beq.n	80067de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d11a      	bne.n	80067de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <vPortFree+0xb8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	43db      	mvns	r3, r3
 80067b2:	401a      	ands	r2, r3
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067b8:	f7fe fc78 	bl	80050ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <vPortFree+0xbc>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4413      	add	r3, r2
 80067c6:	4a09      	ldr	r2, [pc, #36]	; (80067ec <vPortFree+0xbc>)
 80067c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067ca:	6938      	ldr	r0, [r7, #16]
 80067cc:	f000 f874 	bl	80068b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <vPortFree+0xc0>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	4a06      	ldr	r2, [pc, #24]	; (80067f0 <vPortFree+0xc0>)
 80067d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80067da:	f7fe fc75 	bl	80050c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067de:	bf00      	nop
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20004a88 	.word	0x20004a88
 80067ec:	20004a78 	.word	0x20004a78
 80067f0:	20004a84 	.word	0x20004a84

080067f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80067fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006800:	4b27      	ldr	r3, [pc, #156]	; (80068a0 <prvHeapInit+0xac>)
 8006802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00c      	beq.n	8006828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3307      	adds	r3, #7
 8006812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0307 	bic.w	r3, r3, #7
 800681a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <prvHeapInit+0xac>)
 8006824:	4413      	add	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800682c:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <prvHeapInit+0xb0>)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <prvHeapInit+0xb0>)
 8006834:	2200      	movs	r2, #0
 8006836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	4413      	add	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006840:	2208      	movs	r2, #8
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1a9b      	subs	r3, r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0307 	bic.w	r3, r3, #7
 800684e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <prvHeapInit+0xb4>)
 8006854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006856:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <prvHeapInit+0xb4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2200      	movs	r2, #0
 800685c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <prvHeapInit+0xb4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	1ad2      	subs	r2, r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006874:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <prvHeapInit+0xb4>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4a0a      	ldr	r2, [pc, #40]	; (80068ac <prvHeapInit+0xb8>)
 8006882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <prvHeapInit+0xbc>)
 800688a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800688c:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <prvHeapInit+0xc0>)
 800688e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000e6c 	.word	0x20000e6c
 80068a4:	20004a6c 	.word	0x20004a6c
 80068a8:	20004a74 	.word	0x20004a74
 80068ac:	20004a7c 	.word	0x20004a7c
 80068b0:	20004a78 	.word	0x20004a78
 80068b4:	20004a88 	.word	0x20004a88

080068b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068c0:	4b28      	ldr	r3, [pc, #160]	; (8006964 <prvInsertBlockIntoFreeList+0xac>)
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e002      	b.n	80068cc <prvInsertBlockIntoFreeList+0x14>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d8f7      	bhi.n	80068c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d108      	bne.n	80068fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	441a      	add	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	441a      	add	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d118      	bne.n	8006940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4b15      	ldr	r3, [pc, #84]	; (8006968 <prvInsertBlockIntoFreeList+0xb0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d00d      	beq.n	8006936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	441a      	add	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	e008      	b.n	8006948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <prvInsertBlockIntoFreeList+0xb0>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e003      	b.n	8006948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	429a      	cmp	r2, r3
 800694e:	d002      	beq.n	8006956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006956:	bf00      	nop
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20004a6c 	.word	0x20004a6c
 8006968:	20004a74 	.word	0x20004a74

0800696c <__libc_init_array>:
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	4d0d      	ldr	r5, [pc, #52]	; (80069a4 <__libc_init_array+0x38>)
 8006970:	4c0d      	ldr	r4, [pc, #52]	; (80069a8 <__libc_init_array+0x3c>)
 8006972:	1b64      	subs	r4, r4, r5
 8006974:	10a4      	asrs	r4, r4, #2
 8006976:	2600      	movs	r6, #0
 8006978:	42a6      	cmp	r6, r4
 800697a:	d109      	bne.n	8006990 <__libc_init_array+0x24>
 800697c:	4d0b      	ldr	r5, [pc, #44]	; (80069ac <__libc_init_array+0x40>)
 800697e:	4c0c      	ldr	r4, [pc, #48]	; (80069b0 <__libc_init_array+0x44>)
 8006980:	f000 f848 	bl	8006a14 <_init>
 8006984:	1b64      	subs	r4, r4, r5
 8006986:	10a4      	asrs	r4, r4, #2
 8006988:	2600      	movs	r6, #0
 800698a:	42a6      	cmp	r6, r4
 800698c:	d105      	bne.n	800699a <__libc_init_array+0x2e>
 800698e:	bd70      	pop	{r4, r5, r6, pc}
 8006990:	f855 3b04 	ldr.w	r3, [r5], #4
 8006994:	4798      	blx	r3
 8006996:	3601      	adds	r6, #1
 8006998:	e7ee      	b.n	8006978 <__libc_init_array+0xc>
 800699a:	f855 3b04 	ldr.w	r3, [r5], #4
 800699e:	4798      	blx	r3
 80069a0:	3601      	adds	r6, #1
 80069a2:	e7f2      	b.n	800698a <__libc_init_array+0x1e>
 80069a4:	08006ab8 	.word	0x08006ab8
 80069a8:	08006ab8 	.word	0x08006ab8
 80069ac:	08006ab8 	.word	0x08006ab8
 80069b0:	08006abc 	.word	0x08006abc

080069b4 <memcpy>:
 80069b4:	440a      	add	r2, r1
 80069b6:	4291      	cmp	r1, r2
 80069b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069bc:	d100      	bne.n	80069c0 <memcpy+0xc>
 80069be:	4770      	bx	lr
 80069c0:	b510      	push	{r4, lr}
 80069c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ca:	4291      	cmp	r1, r2
 80069cc:	d1f9      	bne.n	80069c2 <memcpy+0xe>
 80069ce:	bd10      	pop	{r4, pc}

080069d0 <memmove>:
 80069d0:	4288      	cmp	r0, r1
 80069d2:	b510      	push	{r4, lr}
 80069d4:	eb01 0402 	add.w	r4, r1, r2
 80069d8:	d902      	bls.n	80069e0 <memmove+0x10>
 80069da:	4284      	cmp	r4, r0
 80069dc:	4623      	mov	r3, r4
 80069de:	d807      	bhi.n	80069f0 <memmove+0x20>
 80069e0:	1e43      	subs	r3, r0, #1
 80069e2:	42a1      	cmp	r1, r4
 80069e4:	d008      	beq.n	80069f8 <memmove+0x28>
 80069e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ee:	e7f8      	b.n	80069e2 <memmove+0x12>
 80069f0:	4402      	add	r2, r0
 80069f2:	4601      	mov	r1, r0
 80069f4:	428a      	cmp	r2, r1
 80069f6:	d100      	bne.n	80069fa <memmove+0x2a>
 80069f8:	bd10      	pop	{r4, pc}
 80069fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a02:	e7f7      	b.n	80069f4 <memmove+0x24>

08006a04 <memset>:
 8006a04:	4402      	add	r2, r0
 8006a06:	4603      	mov	r3, r0
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d100      	bne.n	8006a0e <memset+0xa>
 8006a0c:	4770      	bx	lr
 8006a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a12:	e7f9      	b.n	8006a08 <memset+0x4>

08006a14 <_init>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	bf00      	nop
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr

08006a20 <_fini>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	bf00      	nop
 8006a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a26:	bc08      	pop	{r3}
 8006a28:	469e      	mov	lr, r3
 8006a2a:	4770      	bx	lr
